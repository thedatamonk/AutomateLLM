[{
  "url": "https://trigger.dev/apis",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis",
    "loadedTime": "2024-03-16T13:37:47.777Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 0,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis",
    "title": "API Catalog | Trigger.dev",
    "description": "Build powerful workflows using all your favorite services, in just a few lines of code.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "API Catalog | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "Airtable\nCreate, update or delete single or multiple records in your bases.\nAsana\nSubscribe to task changes, manage projects and more.\nAWS\nManage your AWS databases, storage, and compute resources.\nBrex\nManage payments, expenses, teams and more with Brex.\nCal.com\nManage your own / your teams bookings and calendars.\nClerk\nManage user accounts, authentication and more.\nDeepL\nTranslate text with high-quality machine translation tools.\nDigitalOcean\nManage your DigitalOcean resources, storage, and compute resources.\nDiscord\nCreate and manage community interactions with bots and webhooks.\nGitHub\nSubscribe to webhooks and automate tasks in your code repositories.\nGmail\nAutomate sending and receiving emails, and mailbox management.\nGoogle Calendar\nManage and automate calendar events, invites, and notifications.\nGoogle Docs\nCreate, update and delete documents in Google Docs.\nGoogle Drive\nManage your files and folders in Google Drive.\nGoogle Maps\nUse location data and maps with Google Maps.\nGoogle Sheets\nRead from and write to spreadsheets programmatically.\nHubSpot\nManage marketing, sales, and service data in HubSpot.\nHugging Face\nIntegrate advanced NLP models for text analysis and generation.\nInstagram\nAutomate posting media and manage social interactions.\nLemon Squeezy\nManage digital storefronts, products, and sales.\nSubscribe to issues and manage your teams projects.\nLoops\nSend transactional emails, manage contacts and get custom lists.\nMailgun\nSend, retrieve and delete emails, manage domains, and more.\nMicrosoft Azure\nManage your Azure resources, storage, and compute resources.\nNotion\nCreate, update and delete pages and content in your team's workspace.\nNovu\nAutomate sending notifications across multiple channels.\nOpenAI\nAutomate generating text and images, fine-tune and more.\nPagerDuty\nManage incidents, schedules, and more with PagerDuty.\nPlain\nManage customer support ticketing and responses.\nReplicate\nRun machine learning tasks easily and at scale.\nResend\nSend emails & React emails using Resend's email service.\nSalesforce\nAutomate CRM operations and data synchronization.\nSegment\nIntegrate data collection and management for user analytics.\nSendGrid\nSend, delete and filter emails and more.\nShopify\nAutomate online store management, products, orders, and customers.\nSlack\nPost messages to Slack when events occur.\nSnyk\nIntegrate and automate code security and scan for vulnerabilities.\nSquare\nManage payments, invoices, and more with Square's APIs.\nStabilityAI\nGenerate text, images and audio with Stability AI.\nStripe\nSubscribe to user updates, automate payments, billing and more.\nTrigger anything from a database change. Sync your database and services.\nSvix\nList, create, update and delete applications.\nTodoist\nOrganize your tasks and manage projects.\nTwilio\nAutomate SMS, WhatsApp, voice, video, and email.\nTypeform\nAutomate and distribute Typeform surveys.\nWhatsApp\nSend messages, images, video with WhatsApp.\nX (Twitter)\nSchedule, update and delete posts on X.\nYouTube\nUpload videos, manage your playlists and subscribers.\nZapier\nBuild automated workflows using Zapier's 3000+ integrations.\nZBD\nBitcoin Lightning Network nanotransactions with events, callbacks, and webhooks.",
  "markdown": "[\n\n### Airtable\n\nCreate, update or delete single or multiple records in your bases.\n\n\n\n](https://trigger.dev/apis/airtable)[\n\n### Asana\n\nSubscribe to task changes, manage projects and more.\n\n\n\n](https://trigger.dev/apis/asana)[\n\n### AWS\n\nManage your AWS databases, storage, and compute resources.\n\n\n\n](https://trigger.dev/apis/aws)[\n\n### Brex\n\nManage payments, expenses, teams and more with Brex.\n\n\n\n](https://trigger.dev/apis/brex)[\n\n### Cal.com\n\nManage your own / your teams bookings and calendars.\n\n\n\n](https://trigger.dev/apis/caldotcom)[\n\n### Clerk\n\nManage user accounts, authentication and more.\n\n\n\n](https://trigger.dev/apis/clerk)[\n\n### DeepL\n\nTranslate text with high-quality machine translation tools.\n\n\n\n](https://trigger.dev/apis/deepl)[\n\n### DigitalOcean\n\nManage your DigitalOcean resources, storage, and compute resources.\n\n\n\n](https://trigger.dev/apis/digitalocean)[\n\n### Discord\n\nCreate and manage community interactions with bots and webhooks.\n\n\n\n](https://trigger.dev/apis/discord)[\n\n### GitHub\n\nSubscribe to webhooks and automate tasks in your code repositories.\n\n\n\n](https://trigger.dev/apis/github)[\n\n### Gmail\n\nAutomate sending and receiving emails, and mailbox management.\n\n\n\n](https://trigger.dev/apis/gmail)[\n\n### Google Calendar\n\nManage and automate calendar events, invites, and notifications.\n\n\n\n](https://trigger.dev/apis/googlecalendar)[\n\n### Google Docs\n\nCreate, update and delete documents in Google Docs.\n\n\n\n](https://trigger.dev/apis/googledocs)[\n\n### Google Drive\n\nManage your files and folders in Google Drive.\n\n\n\n](https://trigger.dev/apis/googledrive)[\n\n### Google Maps\n\nUse location data and maps with Google Maps.\n\n\n\n](https://trigger.dev/apis/googlemaps)[\n\n### Google Sheets\n\nRead from and write to spreadsheets programmatically.\n\n\n\n](https://trigger.dev/apis/googlesheets)[\n\n### HubSpot\n\nManage marketing, sales, and service data in HubSpot.\n\n\n\n](https://trigger.dev/apis/hubspot)[\n\n### Hugging Face\n\nIntegrate advanced NLP models for text analysis and generation.\n\n\n\n](https://trigger.dev/apis/huggingface)[\n\n### Instagram\n\nAutomate posting media and manage social interactions.\n\n\n\n](https://trigger.dev/apis/instagram)[\n\n### Lemon Squeezy\n\nManage digital storefronts, products, and sales.\n\n\n\n](https://trigger.dev/apis/lemonsqueezy)[\n\nSubscribe to issues and manage your teams projects.\n\n\n\n](https://trigger.dev/apis/linear)[\n\n### Loops\n\nSend transactional emails, manage contacts and get custom lists.\n\n\n\n](https://trigger.dev/apis/loops)[\n\n### Mailgun\n\nSend, retrieve and delete emails, manage domains, and more.\n\n\n\n](https://trigger.dev/apis/mailgun)[\n\n### Microsoft Azure\n\nManage your Azure resources, storage, and compute resources.\n\n\n\n](https://trigger.dev/apis/microsoftazure)[\n\n### Notion\n\nCreate, update and delete pages and content in your team's workspace.\n\n\n\n](https://trigger.dev/apis/notion)[\n\n### Novu\n\nAutomate sending notifications across multiple channels.\n\n\n\n](https://trigger.dev/apis/novu)[\n\n### OpenAI\n\nAutomate generating text and images, fine-tune and more.\n\n\n\n](https://trigger.dev/apis/openai)[\n\n### PagerDuty\n\nManage incidents, schedules, and more with PagerDuty.\n\n\n\n](https://trigger.dev/apis/pagerduty)[\n\n### Plain\n\nManage customer support ticketing and responses.\n\n\n\n](https://trigger.dev/apis/plain)[\n\n### Replicate\n\nRun machine learning tasks easily and at scale.\n\n\n\n](https://trigger.dev/apis/replicate)[\n\n### Resend\n\nSend emails & React emails using Resend's email service.\n\n\n\n](https://trigger.dev/apis/resend)[\n\n### Salesforce\n\nAutomate CRM operations and data synchronization.\n\n\n\n](https://trigger.dev/apis/salesforce)[\n\n### Segment\n\nIntegrate data collection and management for user analytics.\n\n\n\n](https://trigger.dev/apis/segment)[\n\n### SendGrid\n\nSend, delete and filter emails and more.\n\n\n\n](https://trigger.dev/apis/sendgrid)[\n\n### Shopify\n\nAutomate online store management, products, orders, and customers.\n\n\n\n](https://trigger.dev/apis/shopify)[\n\n### Slack\n\nPost messages to Slack when events occur.\n\n\n\n](https://trigger.dev/apis/slack)[\n\n### Snyk\n\nIntegrate and automate code security and scan for vulnerabilities.\n\n\n\n](https://trigger.dev/apis/snyk)[\n\n### Square\n\nManage payments, invoices, and more with Square's APIs.\n\n\n\n](https://trigger.dev/apis/square)[\n\n### StabilityAI\n\nGenerate text, images and audio with Stability AI.\n\n\n\n](https://trigger.dev/apis/stabilityai)[\n\n### Stripe\n\nSubscribe to user updates, automate payments, billing and more.\n\n\n\n](https://trigger.dev/apis/stripe)[\n\nTrigger anything from a database change. Sync your database and services.\n\n\n\n](https://trigger.dev/apis/supabase)[\n\n### Svix\n\nList, create, update and delete applications.\n\n\n\n](https://trigger.dev/apis/svix)[\n\n### Todoist\n\nOrganize your tasks and manage projects.\n\n\n\n](https://trigger.dev/apis/todoist)[\n\n### Twilio\n\nAutomate SMS, WhatsApp, voice, video, and email.\n\n\n\n](https://trigger.dev/apis/twilio)[\n\n### Typeform\n\nAutomate and distribute Typeform surveys.\n\n\n\n](https://trigger.dev/apis/typeform)[\n\n### WhatsApp\n\nSend messages, images, video with WhatsApp.\n\n\n\n](https://trigger.dev/apis/whatsapp)[\n\n### X (Twitter)\n\nSchedule, update and delete posts on X.\n\n\n\n](https://trigger.dev/apis/x)[\n\n### YouTube\n\nUpload videos, manage your playlists and subscribers.\n\n\n\n](https://trigger.dev/apis/youtube)[\n\n### Zapier\n\nBuild automated workflows using Zapier's 3000+ integrations.\n\n\n\n](https://trigger.dev/apis/zapier)[\n\n### ZBD\n\nBitcoin Lightning Network nanotransactions with events, callbacks, and webhooks.\n\n\n\n](https://trigger.dev/apis/zbd)"
},
{
  "url": "https://trigger.dev/apis/asana",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/asana",
    "loadedTime": "2024-03-16T13:37:59.324Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/asana",
    "title": "Asana | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Asana | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/asana"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { z } from \"zod\";\n4\nconst asana = require(\"asana\");\n6\n// Create a personal access token: https://developers.asana.com/docs/personal-access-token\n7\nconst asanaClient = asana.Client.create().useAccessToken(\n8\nprocess.env.ASANA_ACCESS_TOKEN\n13\nname: \"Asana Get User\",\n15\ntrigger: eventTrigger({\n16\nname: \"asana.get.user\",\n18\n// This can either be the string \"me\", an email, or the GID of a user.\n19\n// You can get your user GID by first logging in to Asana in your browser,\n20\n// then visiting https://app.asana.com/api/1.0/users/me.\n25\nrun: async (payload, io, ctx) => {\n26\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n27\nconst user = await io.runTask(\n30\n// This is the regular Asana SDK\n31\nreturn asanaClient.users.getUser(payload.userGid);\n34\n// Add metadata to improve how the task displays in the logs\n35\n{ name: \"Get Asana User\", icon: \"asana\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { z } from \"zod\";\n\n4\n\nconst asana \\= require(\"asana\");\n\n6\n\n// Create a personal access token: https://developers.asana.com/docs/personal-access-token\n\n7\n\nconst asanaClient \\= asana.Client.create().useAccessToken(\n\n8\n\n  process.env.ASANA\\_ACCESS\\_TOKEN\n\n13\n\n  name: \"Asana Get User\",\n\n15\n\n  trigger: eventTrigger({\n\n16\n\n    name: \"asana.get.user\",\n\n18\n\n      // This can either be the string \"me\", an email, or the GID of a user.\n\n19\n\n      // You can get your user GID by first logging in to Asana in your browser,\n\n20\n\n      // then visiting https://app.asana.com/api/1.0/users/me.\n\n25\n\n  run: async (payload, io, ctx) \\=> {\n\n26\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n27\n\n    const user \\= await io.runTask(\n\n30\n\n        // This is the regular Asana SDK\n\n31\n\n        return asanaClient.users.getUser(payload.userGid);\n\n34\n\n      // Add metadata to improve how the task displays in the logs\n\n35\n\n      { name: \"Get Asana User\", icon: \"asana\" }"
},
{
  "url": "https://trigger.dev/apis/airtable",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/airtable",
    "loadedTime": "2024-03-16T13:37:59.551Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/airtable",
    "title": "Airtable | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Airtable | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/airtable"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Stripe } from \"@trigger.dev/stripe\";\n3\nimport { Airtable } from \"@trigger.dev/airtable\";\n5\nconst stripe = new Stripe({\n7\napiKey: process.env.STRIPE_API_KEY!,\n10\nconst airtable = new Airtable({\n12\ntoken: process.env.AIRTABLE_TOKEN!,\n15\n//this is the type definition for the table\n16\ntype SubscribedUsers = {\n23\n// This job populates an Airtable table when a new customer subscription is created in Stripe\n25\nid: \"stripe-new-subscription-update-airtable\",\n26\nname: \"On new Stripe subscription update Airtable\",\n32\ntrigger: stripe.onCustomerSubscription(),\n33\nrun: async (payload, io, ctx) => {\n34\n// Adding the type to table<YourTableType>(\"<your table name>\")\n35\n// gives you nice type inference and errors.\n36\n// You can leave it out as well table(\"<your table name>\")\n37\nconst table = io.airtable\n38\n.base(\"<your base id>\")\n39\n.table<SubscribedUsers>(\"<your table name>\");\n42\nconst newRecords = await table.createRecords(\"create records\", [\n44\n// Check the Stripe documents for object info: https://stripe.com/docs/api/subscriptions/object\n47\ninterval: payload.items.data[0].price.recurring?.interval,\n48\ncurrency: payload.items.data[0].price.currency,\n49\n// The unit amount in pence to be charged, represented as a whole integer if possible.\n50\nunitAmount: payload.items.data[0].price.unit_amount ?? undefined,\n55\nawait io.logger.info(\"A new subscription was created.\");",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Stripe } from \"@trigger.dev/stripe\";\n\n3\n\nimport { Airtable } from \"@trigger.dev/airtable\";\n\n5\n\nconst stripe \\= new Stripe({\n\n7\n\n  apiKey: process.env.STRIPE\\_API\\_KEY!,\n\n10\n\nconst airtable \\= new Airtable({\n\n12\n\n  token: process.env.AIRTABLE\\_TOKEN!,\n\n15\n\n//this is the type definition for the table\n\n16\n\ntype SubscribedUsers \\= {\n\n23\n\n// This job populates an Airtable table when a new customer subscription is created in Stripe\n\n25\n\n  id: \"stripe-new-subscription-update-airtable\",\n\n26\n\n  name: \"On new Stripe subscription update Airtable\",\n\n32\n\n  trigger: stripe.onCustomerSubscription(),\n\n33\n\n  run: async (payload, io, ctx) \\=> {\n\n34\n\n    // Adding the type to table<YourTableType>(\"<your table name>\")\n\n35\n\n    // gives you nice type inference and errors.\n\n36\n\n    // You can leave it out as well table(\"<your table name>\")\n\n37\n\n    const table \\= io.airtable\n\n38\n\n      .base(\"<your base id>\")\n\n39\n\n      .table<SubscribedUsers\\>(\"<your table name>\");\n\n42\n\n    const newRecords \\= await table.createRecords(\"create records\", \\[\n\n44\n\n        // Check the Stripe documents for object info: https://stripe.com/docs/api/subscriptions/object\n\n47\n\n          interval: payload.items.data\\[0\\].price.recurring?.interval,\n\n48\n\n          currency: payload.items.data\\[0\\].price.currency,\n\n49\n\n          // The unit amount in pence to be charged, represented as a whole integer if possible.\n\n50\n\n          unitAmount: payload.items.data\\[0\\].price.unit\\_amount ?? undefined,\n\n55\n\n    await io.logger.info(\"A new subscription was created.\");"
},
{
  "url": "https://trigger.dev/apis/novu",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/novu",
    "loadedTime": "2024-03-16T13:38:00.331Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/novu",
    "title": "Novu | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Novu | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/novu"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, verifyRequestSignature } from \"@trigger.dev/sdk\";\n3\n// Go to Novu Dashboard > Integrations Store\n4\n// Click Add > Go with \"Push Webhook\"\n5\n// Set the Webhook URL and Hmac Key (say \"Test\", for example)\n6\n// Go to Workflows -> Add a workflow\n7\n// Use the default trigger and add a push webhook call\n8\n// Enter the subscriberID that'll listen to the channel\n9\n// Run Trigger / Send Notification to trigger the webhook\n10\nconst novu = client.defineHttpEndpoint({\n14\nverify: async (request) => {\n15\nif (!process.env.NOVU_SIGNING_SECRET) {\n16\nreturn { success: false, reason: \"No Novu Signing Secret present.\" };\n18\nreturn await verifyRequestSignature({\n21\nheaderName: \"x-novu-signature\",\n22\nsecret: process.env.NOVU_SIGNING_SECRET,\n32\ntrigger: novu.onRequest(),\n33\nrun: async (request, io, ctx) => {\n34\nconst body = await request.json();\n35\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient, verifyRequestSignature } from \"@trigger.dev/sdk\";\n\n3\n\n// Go to Novu Dashboard > Integrations Store\n\n4\n\n// Click Add > Go with \"Push Webhook\"\n\n5\n\n// Set the Webhook URL and Hmac Key (say \"Test\", for example)\n\n6\n\n// Go to Workflows -> Add a workflow\n\n7\n\n// Use the default trigger and add a push webhook call\n\n8\n\n// Enter the subscriberID that'll listen to the channel\n\n9\n\n// Run Trigger / Send Notification to trigger the webhook\n\n10\n\nconst novu \\= client.defineHttpEndpoint({\n\n14\n\n  verify: async (request) \\=> {\n\n15\n\n    if (!process.env.NOVU\\_SIGNING\\_SECRET) {\n\n16\n\n      return { success: false, reason: \"No Novu Signing Secret present.\" };\n\n18\n\n    return await verifyRequestSignature({\n\n21\n\n      headerName: \"x-novu-signature\",\n\n22\n\n      secret: process.env.NOVU\\_SIGNING\\_SECRET,\n\n32\n\n  trigger: novu.onRequest(),\n\n33\n\n  run: async (request, io, ctx) \\=> {\n\n34\n\n    const body \\= await request.json();\n\n35\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/aws",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/aws",
    "loadedTime": "2024-03-16T13:38:12.254Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/aws",
    "title": "AWS | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "AWS | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/aws"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { InvokeCommand, LambdaClient, LogType } from \"@aws-sdk/client-lambda\";\n3\nimport { fromEnv } from \"@aws-sdk/credential-providers\";\n6\n// Create a TriggerClient for managing trigger jobs\n7\n// AWS Lambda setup assumed. For more information on AWS Lambda:\n8\n// https://docs.aws.amazon.com/lambda/latest/dg/getting-started.html\n10\n// Create an AWS Lambda client using AWS SDK for JavaScript (v3)\n11\n// For AWS SDK Lambda documentation:\n12\n// https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/client/lambda/\n13\n// https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/Package/-aws-sdk-client-lambda/Interface/LambdaClientConfig/\n14\n// AWS SDK Credential Providers:\n15\n// https://github.com/aws/aws-sdk-js-v3/tree/main/packages/credential-providers\n16\nconst lambdaClient = new LambdaClient({\n17\nregion: process.env.AWS_REGION,\n18\ncredentials: fromEnv(),\n21\n// Define a Trigger job to invoke the AWS Lambda function\n24\nid: \"invoke-aws-lambda-function\",\n25\nname: \"Invoke AWS Lambda function\",\n28\n// Set up a trigger for this job, in this case, an event trigger\n29\ntrigger: eventTrigger({\n32\n// Define the schema for the payload. In this case, it expects a function name and a payload object with length and width.\n34\nfunctionName: z.string(),\n35\npayloadObject: z.object({ length: z.number(), width: z.number() }),\n39\n// Define the code to run when the job is triggered\n40\nrun: async (payload, io, ctx) => {\n41\n// Wrap an SDK call in io.runTask to make it resumable and display it in logs\n42\nconst result = await io.runTask(\n45\n// Create an AWS Lambda invocation command\n46\nconst command = new InvokeCommand({\n47\nFunctionName: payload.functionName,\n48\nPayload: JSON.stringify(payload.payloadObject),\n49\nLogType: LogType.Tail,\n52\n// Send the command to AWS Lambda\n53\nconst { Payload, LogResult } = await lambdaClient.send(command);\n55\n// Process the Lambda response and logs\n56\nconst result = Buffer.from(Payload).toString();\n57\nconst logs = Buffer.from(LogResult, \"base64\").toString();\n59\n// Return the computed area and associated logs as task output\n60\nreturn { result, logs };\n62\n// Add metadata to the task to improve its display in the logs\n63\n{ name: \"Invoke Lambda\", icon: \"aws\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { InvokeCommand, LambdaClient, LogType } from \"@aws-sdk/client-lambda\";\n\n3\n\nimport { fromEnv } from \"@aws-sdk/credential-providers\";\n\n6\n\n// Create a TriggerClient for managing trigger jobs\n\n7\n\n// AWS Lambda setup assumed. For more information on AWS Lambda:\n\n8\n\n// https://docs.aws.amazon.com/lambda/latest/dg/getting-started.html\n\n10\n\n// Create an AWS Lambda client using AWS SDK for JavaScript (v3)\n\n11\n\n// For AWS SDK Lambda documentation:\n\n12\n\n// https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/client/lambda/\n\n13\n\n// https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/Package/-aws-sdk-client-lambda/Interface/LambdaClientConfig/\n\n14\n\n// AWS SDK Credential Providers:\n\n15\n\n// https://github.com/aws/aws-sdk-js-v3/tree/main/packages/credential-providers\n\n16\n\nconst lambdaClient \\= new LambdaClient({\n\n17\n\n  region: process.env.AWS\\_REGION,\n\n18\n\n  credentials: fromEnv(),\n\n21\n\n// Define a Trigger job to invoke the AWS Lambda function\n\n24\n\n  id: \"invoke-aws-lambda-function\",\n\n25\n\n  name: \"Invoke AWS Lambda function\",\n\n28\n\n  // Set up a trigger for this job, in this case, an event trigger\n\n29\n\n  trigger: eventTrigger({\n\n32\n\n    // Define the schema for the payload. In this case, it expects a function name and a payload object with length and width.\n\n34\n\n      functionName: z.string(),\n\n35\n\n      payloadObject: z.object({ length: z.number(), width: z.number() }),\n\n39\n\n  // Define the code to run when the job is triggered\n\n40\n\n  run: async (payload, io, ctx) \\=> {\n\n41\n\n    // Wrap an SDK call in io.runTask to make it resumable and display it in logs\n\n42\n\n    const result \\= await io.runTask(\n\n45\n\n        // Create an AWS Lambda invocation command\n\n46\n\n        const command \\= new InvokeCommand({\n\n47\n\n          FunctionName: payload.functionName,\n\n48\n\n          Payload: JSON.stringify(payload.payloadObject),\n\n49\n\n          LogType: LogType.Tail,\n\n52\n\n        // Send the command to AWS Lambda\n\n53\n\n        const { Payload, LogResult } \\= await lambdaClient.send(command);\n\n55\n\n        // Process the Lambda response and logs\n\n56\n\n        const result \\= Buffer.from(Payload).toString();\n\n57\n\n        const logs \\= Buffer.from(LogResult, \"base64\").toString();\n\n59\n\n        // Return the computed area and associated logs as task output\n\n60\n\n        return { result, logs };\n\n62\n\n      // Add metadata to the task to improve its display in the logs\n\n63\n\n      { name: \"Invoke Lambda\", icon: \"aws\" }"
},
{
  "url": "https://trigger.dev/apis/openai",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/openai",
    "loadedTime": "2024-03-16T13:38:15.247Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/openai",
    "title": "OpenAI | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "OpenAI | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/openai"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { OpenAI } from \"@trigger.dev/openai\";\n3\nimport { z } from \"zod\";\n5\nconst openai = new OpenAI({\n7\napiKey: process.env.OPENAI_API_KEY!,\n10\n// This Job will use OpenAI GPT-3.5 Turbo to tell you a joke\n12\nid: \"openai-tell-me-a-joke\",\n13\nname: \"OpenAI: tell me a joke\",\n15\ntrigger: eventTrigger({\n18\njokePrompt: z.string(),\n24\nrun: async (payload, io, ctx) => {\n25\nawait io.openai.retrieveModel(\"get-model\", {\n26\nmodel: \"gpt-3.5-turbo\",\n29\nconst models = await io.openai.listModels(\"list-models\");\n31\nconst jokeResult = await io.openai.backgroundCreateChatCompletion(\n32\n\"background-chat-completion\",\n34\nmodel: \"gpt-3.5-turbo\",\n38\ncontent: payload.jokePrompt,\n45\njoke: jokeResult.choices[0]?.message?.content,",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { OpenAI } from \"@trigger.dev/openai\";\n\n3\n\nimport { z } from \"zod\";\n\n5\n\nconst openai \\= new OpenAI({\n\n7\n\n  apiKey: process.env.OPENAI\\_API\\_KEY!,\n\n10\n\n// This Job will use OpenAI GPT-3.5 Turbo to tell you a joke\n\n12\n\n  id: \"openai-tell-me-a-joke\",\n\n13\n\n  name: \"OpenAI: tell me a joke\",\n\n15\n\n  trigger: eventTrigger({\n\n18\n\n      jokePrompt: z.string(),\n\n24\n\n  run: async (payload, io, ctx) \\=> {\n\n25\n\n    await io.openai.retrieveModel(\"get-model\", {\n\n26\n\n      model: \"gpt-3.5-turbo\",\n\n29\n\n    const models \\= await io.openai.listModels(\"list-models\");\n\n31\n\n    const jokeResult \\= await io.openai.backgroundCreateChatCompletion(\n\n32\n\n      \"background-chat-completion\",\n\n34\n\n        model: \"gpt-3.5-turbo\",\n\n38\n\n            content: payload.jokePrompt,\n\n45\n\n      joke: jokeResult.choices\\[0\\]?.message?.content,"
},
{
  "url": "https://trigger.dev/apis/brex",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/brex",
    "loadedTime": "2024-03-16T13:38:18.618Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/brex",
    "title": "Brex | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Brex | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/brex"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n4\n// Docs: https://developer.brex.com/openapi/team_api/#tag/Titles\n5\n// API: https://developer.brex.com/openapi/team_api/#operation/createTitle\n6\nconst endpointURL = `${process.env.BREX_BASE_URL}/titles`; // Replace with the Other Brex API endpoint\n8\n// Create tokens at https://developer.brex.com/docs/quickstart/#1-generate-your-user-token\n9\n// Scopes: Titles: read, write\n10\n// Create request options\n11\nconst requestOptions: RequestInit = {\n14\nAuthorization: `Bearer ${process.env.BREX_API_KEY}`,\n15\n\"Content-Type\": \"application/json\",\n19\n//<> ### This is a title\n20\n//<> **This is a bold comment 1 ** and `this is code`\n22\nid: \"brex-create-title\",\n23\nname: \"Brex Create Title\",\n25\ntrigger: eventTrigger({\n26\nname: \"Brex Create Title\",\n28\n// Name of the title. You can see the all titles in the teams section.\n29\n// https://dashboard.brex.com/p/team/titles\n34\nrun: async (payload, io, ctx) => {\n35\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n39\n// Make a request to the Brex API using the fetch API\n40\nconst response = await fetch(endpointURL, {\n42\nbody: JSON.stringify(payload),\n45\n// Return the response body\n46\nreturn await response.json();\n49\n//<> This is comment 2\n50\n// Add metadata to improve how the task displays in the logs\n51\n{ name: \"Brex Create Title\", icon: \"brex\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n4\n\n// Docs: https://developer.brex.com/openapi/team\\_api/#tag/Titles\n\n5\n\n// API: https://developer.brex.com/openapi/team\\_api/#operation/createTitle\n\n6\n\nconst endpointURL \\= \\`${process.env.BREX\\_BASE\\_URL}/titles\\`; // Replace with the Other Brex API endpoint\n\n8\n\n// Create tokens at https://developer.brex.com/docs/quickstart/#1-generate-your-user-token\n\n9\n\n// Scopes: Titles: read, write\n\n10\n\n// Create request options\n\n11\n\nconst requestOptions: RequestInit \\= {\n\n14\n\n    Authorization: \\`Bearer ${process.env.BREX\\_API\\_KEY}\\`,\n\n15\n\n    \"Content-Type\": \"application/json\",\n\n19\n\n//<> ### This is a title\n\n20\n\n//<> \\*\\*This is a bold comment 1 \\*\\* and \\`this is code\\`\n\n22\n\n  id: \"brex-create-title\",\n\n23\n\n  name: \"Brex Create Title\",\n\n25\n\n  trigger: eventTrigger({\n\n26\n\n    name: \"Brex Create Title\",\n\n28\n\n      // Name of the title. You can see the all titles in the teams section.\n\n29\n\n      // https://dashboard.brex.com/p/team/titles\n\n34\n\n  run: async (payload, io, ctx) \\=> {\n\n35\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n39\n\n        // Make a request to the Brex API using the fetch API\n\n40\n\n        const response \\= await fetch(endpointURL, {\n\n42\n\n          body: JSON.stringify(payload),\n\n45\n\n        // Return the response body\n\n46\n\n        return await response.json();\n\n49\n\n      //<> This is comment 2\n\n50\n\n      // Add metadata to improve how the task displays in the logs\n\n51\n\n      { name: \"Brex Create Title\", icon: \"brex\" }"
},
{
  "url": "https://trigger.dev/apis/pagerduty",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/pagerduty",
    "loadedTime": "2024-03-16T13:38:17.018Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/pagerduty",
    "title": "PagerDuty | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "PagerDuty | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/pagerduty"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport crypto from \"crypto\";\n2\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n4\n// Create an HTTP endpoint to listen to PagerDuty webhooks.\n5\n// (This will create the endpoint URL on the `trigger.dev` dashboard)\n6\n// Create a PagerDuty account (if you don't have one).\n7\n// Go to Integrations -> Generic Webhooks and setup the subscription.\n8\n// Copy the secret shown in popup to PAGERDUTY_WEBHOOK_SIGNING_SECRET in the .env file.\n9\nconst pagerduty = client.defineHttpEndpoint({\n11\nsource: \"pagerduty.com\",\n13\nverify: async (request) => {\n14\nconst bodyText = await request.text();\n15\nconst signatures = request.headers.get(\"X-PagerDuty-Signature\");\n17\nreturn { success: false };\n19\nconst signature = crypto\n20\n.createHmac(\"sha256\", process.env.PAGERDUTY_WEBHOOK_SIGNING_SECRET!)\n23\nconst signatureWithVersion = \"v1=\" + signature;\n24\nconst signatureList = signatures.split(\",\");\n26\nsuccess: signatureList.indexOf(signatureWithVersion) > -1,\n33\nname: \"HTTP PagerDuty\",\n36\ntrigger: pagerduty.onRequest(),\n37\nrun: async (request, io, ctx) => {\n38\nconst body = await request.json();\n39\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport crypto from \"crypto\";\n\n2\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n4\n\n// Create an HTTP endpoint to listen to PagerDuty webhooks.\n\n5\n\n// (This will create the endpoint URL on the \\`trigger.dev\\` dashboard)\n\n6\n\n// Create a PagerDuty account (if you don't have one).\n\n7\n\n// Go to Integrations -> Generic Webhooks and setup the subscription.\n\n8\n\n// Copy the secret shown in popup to PAGERDUTY\\_WEBHOOK\\_SIGNING\\_SECRET in the .env file.\n\n9\n\nconst pagerduty \\= client.defineHttpEndpoint({\n\n11\n\n  source: \"pagerduty.com\",\n\n13\n\n  verify: async (request) \\=> {\n\n14\n\n    const bodyText \\= await request.text();\n\n15\n\n    const signatures \\= request.headers.get(\"X-PagerDuty-Signature\");\n\n17\n\n      return { success: false };\n\n19\n\n    const signature \\= crypto\n\n20\n\n      .createHmac(\"sha256\", process.env.PAGERDUTY\\_WEBHOOK\\_SIGNING\\_SECRET!)\n\n23\n\n    const signatureWithVersion \\= \"v1=\" + signature;\n\n24\n\n    const signatureList \\= signatures.split(\",\");\n\n26\n\n      success: signatureList.indexOf(signatureWithVersion) \\> \\-1,\n\n33\n\n  name: \"HTTP PagerDuty\",\n\n36\n\n  trigger: pagerduty.onRequest(),\n\n37\n\n  run: async (request, io, ctx) \\=> {\n\n38\n\n    const body \\= await request.json();\n\n39\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/caldotcom",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/caldotcom",
    "loadedTime": "2024-03-16T13:38:29.018Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/caldotcom",
    "title": "Cal.com | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Cal.com | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/caldotcom"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, verifyRequestSignature } from \"@trigger.dev/sdk\";\n2\nimport { Slack } from \"@trigger.dev/slack\";\n4\nconst dateFormatter = new Intl.DateTimeFormat(\"en-US\", {\n9\nconst timeFormatter = new Intl.DateTimeFormat(\"en-US\", {\n13\nconst slack = new Slack({ id: \"slack\" });\n15\n// Create an HTTP Endpoint, with the cal.com details\n16\nconst caldotcom = client.defineHttpEndpoint({\n20\nverify: async (request) => {\n21\nreturn await verifyRequestSignature({\n23\nheaderName: \"X-Cal-Signature-256\",\n24\nsecret: process.env.CALDOTCOM_SECRET!,\n30\n// This job sends a Slack message when meetings are booked or canceled\n36\n// Create a trigger from the HTTP endpoint\n37\ntrigger: caldotcom.onRequest(),\n41\nrun: async (request, io, ctx) => {\n42\nconst body = await request.json();\n43\nawait io.logger.info(`Body`, body);\n45\nconst attendees = body.payload.attendees\n46\n.map((attendee: any) => attendee.email)\n47\n.join(\", \") as string[];\n49\nconst startTime = dateFormatter.format(new Date(body.payload.startTime));\n50\nconst endTime = timeFormatter.format(new Date(body.payload.endTime));\n52\nswitch (body.triggerEvent) {\n53\ncase \"BOOKING_CREATED\": {\n54\nawait io.slack.postMessage(\"booking-created\", {\n55\nchannel: process.env.SLACK_CHANNEL!,\n56\ntext: `Meeting booked:\\n ${attendees} \\n ${startTime}—${endTime}`,\n60\ncase \"BOOKING_CANCELLED\": {\n61\nawait io.slack.postMessage(\"booking-cancelled\", {\n62\nchannel: process.env.SLACK_CHANNEL!,\n63\ntext: `Meeting canceled:\\n ${attendees} \\n ${startTime}—${endTime}`,",
  "markdown": "1\n\nimport { TriggerClient, verifyRequestSignature } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n4\n\nconst dateFormatter \\= new Intl.DateTimeFormat(\"en-US\", {\n\n9\n\nconst timeFormatter \\= new Intl.DateTimeFormat(\"en-US\", {\n\n13\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n15\n\n// Create an HTTP Endpoint, with the cal.com details\n\n16\n\nconst caldotcom \\= client.defineHttpEndpoint({\n\n20\n\n  verify: async (request) \\=> {\n\n21\n\n    return await verifyRequestSignature({\n\n23\n\n      headerName: \"X-Cal-Signature-256\",\n\n24\n\n      secret: process.env.CALDOTCOM\\_SECRET!,\n\n30\n\n// This job sends a Slack message when meetings are booked or canceled\n\n36\n\n  // Create a trigger from the HTTP endpoint\n\n37\n\n  trigger: caldotcom.onRequest(),\n\n41\n\n  run: async (request, io, ctx) \\=> {\n\n42\n\n    const body \\= await request.json();\n\n43\n\n    await io.logger.info(\\`Body\\`, body);\n\n45\n\n    const attendees \\= body.payload.attendees\n\n46\n\n      .map((attendee: any) \\=> attendee.email)\n\n47\n\n      .join(\", \") as string\\[\\];\n\n49\n\n    const startTime \\= dateFormatter.format(new Date(body.payload.startTime));\n\n50\n\n    const endTime \\= timeFormatter.format(new Date(body.payload.endTime));\n\n52\n\n    switch (body.triggerEvent) {\n\n53\n\n      case \"BOOKING\\_CREATED\": {\n\n54\n\n        await io.slack.postMessage(\"booking-created\", {\n\n55\n\n          channel: process.env.SLACK\\_CHANNEL!,\n\n56\n\n          text: \\`Meeting booked:\\\\n ${attendees} \\\\n ${startTime}—${endTime}\\`,\n\n60\n\n      case \"BOOKING\\_CANCELLED\": {\n\n61\n\n        await io.slack.postMessage(\"booking-cancelled\", {\n\n62\n\n          channel: process.env.SLACK\\_CHANNEL!,\n\n63\n\n          text: \\`Meeting canceled:\\\\n ${attendees} \\\\n ${startTime}—${endTime}\\`,"
},
{
  "url": "https://trigger.dev/apis/clerk",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/clerk",
    "loadedTime": "2024-03-16T13:38:29.228Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/clerk",
    "title": "Clerk | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Clerk | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/clerk"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Webhook, WebhookVerificationError } from \"svix\";\n4\nexport const clerk = client.defineHttpEndpoint({\n11\n): Promise<{ success: boolean; reason?: string }> => {\n12\nconst body = await request.text();\n13\nconst svixId = request.headers.get(\"svix-id\") ?? \"\";\n14\nconst svixIdTimeStamp = request.headers.get(\"svix-timestamp\") ?? \"\";\n15\nconst svixSignature = request.headers.get(\"svix-signature\") ?? \"\";\n17\nif (!svixId || !svixIdTimeStamp || !svixSignature) {\n20\nreason: \"Missing svix headers\",\n26\n\"svix-timestamp\": svixIdTimeStamp,\n27\n\"svix-signature\": svixSignature,\n30\nconst wh = new Webhook(process.env.CLERK_WEBHOOK_SIGNING_SECRET as string);\n32\ntype WebhookEvent = string;\n35\nwh.verify(body, svixHeaders) as WebhookEvent;\n40\n} catch (err: unknown) {\n41\nconsole.log(`❌ Error message: ${(err as Error).message}`);\n43\nif (err instanceof WebhookVerificationError) {\n52\nreason: \"Unknown error\",\n58\n// Job that runs when the HTTP endpoint is called from Clerk\n59\n// When a contact is created or deleted\n66\n// Create a trigger from the HTTP endpoint\n67\ntrigger: clerk.onRequest(),\n68\nrun: async (request, io, ctx) => {\n69\nconst body = await request.json();\n70\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Webhook, WebhookVerificationError } from \"svix\";\n\n4\n\nexport const clerk \\= client.defineHttpEndpoint({\n\n11\n\n  ): Promise<{ success: boolean; reason?: string }\\> \\=> {\n\n12\n\n    const body \\= await request.text();\n\n13\n\n    const svixId \\= request.headers.get(\"svix-id\") ?? \"\";\n\n14\n\n    const svixIdTimeStamp \\= request.headers.get(\"svix-timestamp\") ?? \"\";\n\n15\n\n    const svixSignature \\= request.headers.get(\"svix-signature\") ?? \"\";\n\n17\n\n    if (!svixId || !svixIdTimeStamp || !svixSignature) {\n\n20\n\n        reason: \"Missing svix headers\",\n\n26\n\n      \"svix-timestamp\": svixIdTimeStamp,\n\n27\n\n      \"svix-signature\": svixSignature,\n\n30\n\n    const wh \\= new Webhook(process.env.CLERK\\_WEBHOOK\\_SIGNING\\_SECRET as string);\n\n32\n\n    type WebhookEvent \\= string;\n\n35\n\n      wh.verify(body, svixHeaders) as WebhookEvent;\n\n40\n\n    } catch (err: unknown) {\n\n41\n\n      console.log(\\`❌ Error message: ${(err as Error).message}\\`);\n\n43\n\n      if (err instanceof WebhookVerificationError) {\n\n52\n\n        reason: \"Unknown error\",\n\n58\n\n// Job that runs when the HTTP endpoint is called from Clerk\n\n59\n\n// When a contact is created or deleted\n\n66\n\n  // Create a trigger from the HTTP endpoint\n\n67\n\n  trigger: clerk.onRequest(),\n\n68\n\n  run: async (request, io, ctx) \\=> {\n\n69\n\n    const body \\= await request.json();\n\n70\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/plain",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/plain",
    "loadedTime": "2024-03-16T13:38:37.449Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/plain",
    "title": "Plain | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Plain | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/plain"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { Plain } from \"@trigger.dev/plain\";\n2\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n4\nexport const plain = new Plain({\n6\napiKey: process.env.PLAIN_API_KEY!,\n9\n// This Job will use update a customer's information in Plain based on an identifier.\n11\nid: \"plain-update-customer\",\n12\nname: \"Plain: update customer\",\n17\ntrigger: eventTrigger({\n18\nname: \"plain.update.customer\",\n20\nrun: async (payload, io, ctx) => {\n21\nconst { customer } = await io.plain.upsertCustomer(\"upsert-customer\", {\n23\nemailAddress: \"rick.astley@gmail.com\",\n25\n// If customer isn't found they should be created\n28\nemail: \"rick.astley@gmail.com\",\n31\nfullName: \"Rick Astley\",\n34\n// If customer is found their details will be updated\n39\n// This is the id of the customer in your own backend.",
  "markdown": "1\n\nimport { Plain } from \"@trigger.dev/plain\";\n\n2\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n4\n\nexport const plain \\= new Plain({\n\n6\n\n  apiKey: process.env.PLAIN\\_API\\_KEY!,\n\n9\n\n// This Job will use update a customer's information in Plain based on an identifier.\n\n11\n\n  id: \"plain-update-customer\",\n\n12\n\n  name: \"Plain: update customer\",\n\n17\n\n  trigger: eventTrigger({\n\n18\n\n    name: \"plain.update.customer\",\n\n20\n\n  run: async (payload, io, ctx) \\=> {\n\n21\n\n    const { customer } \\= await io.plain.upsertCustomer(\"upsert-customer\", {\n\n23\n\n        emailAddress: \"rick.astley@gmail.com\",\n\n25\n\n      // If customer isn't found they should be created\n\n28\n\n          email: \"rick.astley@gmail.com\",\n\n31\n\n        fullName: \"Rick Astley\",\n\n34\n\n      // If customer is found their details will be updated\n\n39\n\n        // This is the id of the customer in your own backend."
},
{
  "url": "https://trigger.dev/apis/replicate",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/replicate",
    "loadedTime": "2024-03-16T13:38:44.361Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/replicate",
    "title": "Replicate | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Replicate | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/replicate"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n3\nconst replicate = new Replicate({\n5\napiKey: process.env.REPLICATE_API_KEY!,\n9\nid: \"replicate-cinematic-prompt\",\n10\nname: \"Replicate - Cinematic Prompt\",\n12\nintegrations: { replicate },\n13\ntrigger: eventTrigger({\n14\nname: \"replicate.cinematic\",\n18\n.default(\"rick astley riding a harley through post-apocalyptic miami\"),\n22\n\"af1a68a271597604546c09c64aabcd7782c114a63539a4a8d14d1eeda5630c33\"\n26\nrun: async (payload, io, ctx) => {\n27\n//wait for prediction completion (uses remote callbacks internally)\n28\nconst prediction = await io.replicate.predictions.createAndAwait(\n31\nversion: payload.version,\n33\nprompt: `${payload.prompt}, cinematic, 70mm, anamorphic, bokeh`,\n39\nreturn prediction.output;",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n3\n\nconst replicate \\= new Replicate({\n\n5\n\n  apiKey: process.env.REPLICATE\\_API\\_KEY!,\n\n9\n\n  id: \"replicate-cinematic-prompt\",\n\n10\n\n  name: \"Replicate - Cinematic Prompt\",\n\n12\n\n  integrations: { replicate },\n\n13\n\n  trigger: eventTrigger({\n\n14\n\n    name: \"replicate.cinematic\",\n\n18\n\n        .default(\"rick astley riding a harley through post-apocalyptic miami\"),\n\n22\n\n          \"af1a68a271597604546c09c64aabcd7782c114a63539a4a8d14d1eeda5630c33\"\n\n26\n\n  run: async (payload, io, ctx) \\=> {\n\n27\n\n    //wait for prediction completion (uses remote callbacks internally)\n\n28\n\n    const prediction \\= await io.replicate.predictions.createAndAwait(\n\n31\n\n        version: payload.version,\n\n33\n\n          prompt: \\`${payload.prompt}, cinematic, 70mm, anamorphic, bokeh\\`,\n\n39\n\n    return prediction.output;"
},
{
  "url": "https://trigger.dev/apis/deepl",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/deepl",
    "loadedTime": "2024-03-16T13:38:51.061Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/deepl",
    "title": "DeepL | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "DeepL | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/deepl"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { z } from \"zod\";\n3\nimport * as deepl from \"deepl-node\";\n5\n// API documentation: https://www.deepl.com/docs-api/api-access\n6\n// This code uses the deepl-node library.\n7\n// You can find more examples and usage details at: https://github.com/DeepLcom/deepl-node\n8\nconst translator = new deepl.Translator(process.env.DEEPL_AUTH_KEY!);\n11\nid: \"deepl-translate\",\n12\nname: \"DeepL Translate\",\n14\ntrigger: eventTrigger({\n15\nname: \"deepl.translate\",\n18\ntargetLang: z.string(), // Languages: https://www.deepl.com/docs-api/translate-text\n22\nrun: async (payload, io, ctx) => {\n23\n// Wrap any SDK call in io.runTask so it's resumable and displays in logs\n27\nconst targetLang = payload.targetLang as deepl.TargetLanguageCode;\n28\nconst result = await translator.translateText(\n36\n// Add metadata to improve how the task displays in the logs\n37\n{ name: \"DeepL Translate Text\", icon: \"deepl\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { z } from \"zod\";\n\n3\n\nimport \\* as deepl from \"deepl-node\";\n\n5\n\n// API documentation: https://www.deepl.com/docs-api/api-access\n\n6\n\n// This code uses the deepl-node library.\n\n7\n\n// You can find more examples and usage details at: https://github.com/DeepLcom/deepl-node\n\n8\n\nconst translator \\= new deepl.Translator(process.env.DEEPL\\_AUTH\\_KEY!);\n\n11\n\n  id: \"deepl-translate\",\n\n12\n\n  name: \"DeepL Translate\",\n\n14\n\n  trigger: eventTrigger({\n\n15\n\n    name: \"deepl.translate\",\n\n18\n\n      targetLang: z.string(), // Languages: https://www.deepl.com/docs-api/translate-text\n\n22\n\n  run: async (payload, io, ctx) \\=> {\n\n23\n\n    // Wrap any SDK call in io.runTask so it's resumable and displays in logs\n\n27\n\n        const targetLang \\= payload.targetLang as deepl.TargetLanguageCode;\n\n28\n\n        const result \\= await translator.translateText(\n\n36\n\n      // Add metadata to improve how the task displays in the logs\n\n37\n\n      { name: \"DeepL Translate Text\", icon: \"deepl\" }"
},
{
  "url": "https://trigger.dev/apis/resend",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/resend",
    "loadedTime": "2024-03-16T13:38:55.126Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/resend",
    "title": "Resend | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Resend | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/resend"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, TriggerContext, eventTrigger } from \"@trigger.dev/sdk\";\n7\n} from \"./mocks/reactEmails\";\n8\nimport { Resend } from \"@trigger.dev/resend\";\n9\nimport { z } from \"zod\";\n11\nconst resend = new Resend({\n13\napiKey: process.env.RESEND_API_KEY!,\n16\n// This job sends a drip campaign using Resend\n18\nid: \"resend-drip-campaign\",\n19\nname: \"Resend: email drip campaign\",\n21\ntrigger: eventTrigger({\n22\nname: \"send.drip.campaign\",\n25\n// The 'from' email address must be a verified domain in your Resend account.\n33\nrun: async (payload, io, ctx) => {\n35\ntext: `Hi there, welcome to our community! This is the first email we send you to help you get started.`,\n38\n// Email 1, triggered by an event\n39\nawait io.resend.sendEmail(\"email-1\", {\n42\nsubject: `Thanks for joining Acme Inc`,\n44\nreact: <FirstEmail name={payload.name} text={email1.text} />,\n47\nawait io.wait(\"wait-1-day\", delay(60 * 60 * 24 * 1, ctx));\n50\ntext: `Hi there, welcome to our community! This is the second email we send you to help you get started.`,\n53\n// Email 2, triggered after a day\n54\nawait io.resend.sendEmail(\"email-2\", {\n57\nsubject: `Here are some tips to get started`,\n59\nreact: <SecondEmail name={payload.name} text={email2.text} />,\n62\nawait io.wait(\"wait-4-days\", delay(60 * 60 * 24 * 4, ctx));\n65\ntext: `Hi there, welcome to our community! This is the third email we send you to help you get started.`,\n68\n// Email 3, triggered after 5 days\n69\nawait io.resend.sendEmail(\"email-3\", {\n72\nsubject: `Do you have any questions?`,\n74\nreact: <ThirdEmail name={payload.name} text={email3.text} />,\n77\nawait io.wait(\"wait-26-days\", delay(60 * 60 * 24 * 26, ctx));\n80\ntext: `This is the fourth email designed to re-engage your users after a month.`,\n83\n// Email 4, triggered after 30 days\n84\nawait io.resend.sendEmail(\"email-4\", {\n87\nsubject: `How are you getting on with Acme Inc.?`,\n89\nreact: <MonthLaterEmail name={payload.name} text={email4.text} />,\n94\nfunction delay(seconds: number, context: TriggerContext) {\n95\nif (context.environment.type === \"DEVELOPMENT\" || context.run.isTest) {",
  "markdown": "1\n\nimport { TriggerClient, TriggerContext, eventTrigger } from \"@trigger.dev/sdk\";\n\n7\n\n} from \"./mocks/reactEmails\";\n\n8\n\nimport { Resend } from \"@trigger.dev/resend\";\n\n9\n\nimport { z } from \"zod\";\n\n11\n\nconst resend \\= new Resend({\n\n13\n\n  apiKey: process.env.RESEND\\_API\\_KEY!,\n\n16\n\n// This job sends a drip campaign using Resend\n\n18\n\n  id: \"resend-drip-campaign\",\n\n19\n\n  name: \"Resend: email drip campaign\",\n\n21\n\n  trigger: eventTrigger({\n\n22\n\n    name: \"send.drip.campaign\",\n\n25\n\n      // The 'from' email address must be a verified domain in your Resend account.\n\n33\n\n  run: async (payload, io, ctx) \\=> {\n\n35\n\n      text: \\`Hi there, welcome to our community! This is the first email we send you to help you get started.\\`,\n\n38\n\n    // Email 1, triggered by an event\n\n39\n\n    await io.resend.sendEmail(\"email-1\", {\n\n42\n\n      subject: \\`Thanks for joining Acme Inc\\`,\n\n44\n\n      react: <FirstEmail name\\={payload.name} text\\={email1.text} /\\>,\n\n47\n\n    await io.wait(\"wait-1-day\", delay(60 \\* 60 \\* 24 \\* 1, ctx));\n\n50\n\n      text: \\`Hi there, welcome to our community! This is the second email we send you to help you get started.\\`,\n\n53\n\n    // Email 2, triggered after a day\n\n54\n\n    await io.resend.sendEmail(\"email-2\", {\n\n57\n\n      subject: \\`Here are some tips to get started\\`,\n\n59\n\n      react: <SecondEmail name\\={payload.name} text\\={email2.text} /\\>,\n\n62\n\n    await io.wait(\"wait-4-days\", delay(60 \\* 60 \\* 24 \\* 4, ctx));\n\n65\n\n      text: \\`Hi there, welcome to our community! This is the third email we send you to help you get started.\\`,\n\n68\n\n    // Email 3, triggered after 5 days\n\n69\n\n    await io.resend.sendEmail(\"email-3\", {\n\n72\n\n      subject: \\`Do you have any questions?\\`,\n\n74\n\n      react: <ThirdEmail name\\={payload.name} text\\={email3.text} /\\>,\n\n77\n\n    await io.wait(\"wait-26-days\", delay(60 \\* 60 \\* 24 \\* 26, ctx));\n\n80\n\n      text: \\`This is the fourth email designed to re-engage your users after a month.\\`,\n\n83\n\n    // Email 4, triggered after 30 days\n\n84\n\n    await io.resend.sendEmail(\"email-4\", {\n\n87\n\n      subject: \\`How are you getting on with Acme Inc.?\\`,\n\n89\n\n      react: <MonthLaterEmail name\\={payload.name} text\\={email4.text} /\\>,\n\n94\n\nfunction delay(seconds: number, context: TriggerContext) {\n\n95\n\n  if (context.environment.type \\=== \"DEVELOPMENT\" || context.run.isTest) {"
},
{
  "url": "https://trigger.dev/apis/digitalocean",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/digitalocean",
    "loadedTime": "2024-03-16T13:39:04.424Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/digitalocean",
    "title": "DigitalOcean | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "DigitalOcean | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/digitalocean"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n4\n// API reference: https://docs.digitalocean.com/reference/api/api-reference/#operation/uptime_create_check\n6\n// https://docs.digitalocean.com/reference/api/create-personal-access-token/\n8\nconst endpointURL = \"https://api.digitalocean.com/v2/uptime/checks\";\n12\nname: \"DigitalOcean uptime create\",\n14\ntrigger: eventTrigger({\n18\ntype: z.enum([\"http\", \"https\", \"ping\"]).default(\"https\"),\n20\nregions: z.string().array().default([\"us_east\", \"eu_west\"]),\n21\nenabled: z.boolean().default(true),\n24\nrun: async (payload, io, ctx) => {\n25\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n29\n// Make request using Fetch API\n30\nreturn await fetch(endpointURL, {\n33\nAuthorization: `Bearer ${process.env.DIGITALOCEAN_TOKEN}`,\n34\n\"content-type\": \"application/json\",\n36\nbody: JSON.stringify(payload),\n37\n}).then((response) => response.json());\n40\n// Add metadata to improve how the task displays in the logs\n41\n{ name: \"DigitalOcean uptime create\", icon: \"digitalocean\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n4\n\n// API reference: https://docs.digitalocean.com/reference/api/api-reference/#operation/uptime\\_create\\_check\n\n6\n\n// https://docs.digitalocean.com/reference/api/create-personal-access-token/\n\n8\n\nconst endpointURL \\= \"https://api.digitalocean.com/v2/uptime/checks\";\n\n12\n\n  name: \"DigitalOcean uptime create\",\n\n14\n\n  trigger: eventTrigger({\n\n18\n\n      type: z.enum(\\[\"http\", \"https\", \"ping\"\\]).default(\"https\"),\n\n20\n\n      regions: z.string().array().default(\\[\"us\\_east\", \"eu\\_west\"\\]),\n\n21\n\n      enabled: z.boolean().default(true),\n\n24\n\n  run: async (payload, io, ctx) \\=> {\n\n25\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n29\n\n        // Make request using Fetch API\n\n30\n\n        return await fetch(endpointURL, {\n\n33\n\n            Authorization: \\`Bearer ${process.env.DIGITALOCEAN\\_TOKEN}\\`,\n\n34\n\n            \"content-type\": \"application/json\",\n\n36\n\n          body: JSON.stringify(payload),\n\n37\n\n        }).then((response) \\=> response.json());\n\n40\n\n      // Add metadata to improve how the task displays in the logs\n\n41\n\n      { name: \"DigitalOcean uptime create\", icon: \"digitalocean\" }"
},
{
  "url": "https://trigger.dev/apis/salesforce",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/salesforce",
    "loadedTime": "2024-03-16T13:39:05.842Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/salesforce",
    "title": "Salesforce | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Salesforce | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/salesforce"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n3\nimport jsforce from \"jsforce\";\n5\n// Create a Salesforce account: https://developer.salesforce.com/signup\n6\n// jsforce SDK: https://developer.salesforce.com/docs/platform/functions/guide/develop.html#use-salesforce-apis\n7\n// Salesforce only provides API access for the following editions: Enterprise, Unlimited, Developer or Performance Editions\n8\n// Salesforce connection instance\n9\nconst conn = new jsforce.Connection({\n10\nloginUrl: process.env.SF_LOGIN_URL,\n15\nprocess.env.SF_USERNAME!,\n16\nprocess.env.SF_PASSWORD! + process.env.SF_TOKEN!, // Get your token from https://help.salesforce.com/articleView?id=user_security_token.htm&type=5\n17\n(error, userInfo) => {\n19\nreturn console.error(error);\n21\nconsole.log(\"Salesforce login successful. User ID: \" + userInfo.id);\n27\nid: \"salesforce-create-contact\",\n28\nname: \"Salesforce create contact\",\n30\ntrigger: eventTrigger({\n31\nname: \"salesforce-create-contact\",\n37\nrun: async (payload, io, ctx) => {\n38\nconst { Name, Website } = payload;\n40\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n42\n\"Salesforce create contact\",\n44\n// Create a new record in Salesforce\n45\nawait conn.sobject(\"Account\").create({ Name, Website }, (err, ret) => {\n46\nif (err || !ret.success) {\n47\nreturn console.error(err, ret);\n49\nconsole.log(\"Created record id : \" + ret.id);\n53\n// Add metadata to improve how the task displays in the logs\n54\n{ name: \"Salesforce create contact\", icon: \"salesforce\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n3\n\nimport jsforce from \"jsforce\";\n\n5\n\n// Create a Salesforce account: https://developer.salesforce.com/signup\n\n6\n\n// jsforce SDK: https://developer.salesforce.com/docs/platform/functions/guide/develop.html#use-salesforce-apis\n\n7\n\n// Salesforce only provides API access for the following editions: Enterprise,  Unlimited, Developer or Performance Editions\n\n8\n\n// Salesforce connection instance\n\n9\n\nconst conn \\= new jsforce.Connection({\n\n10\n\n  loginUrl: process.env.SF\\_LOGIN\\_URL,\n\n15\n\n  process.env.SF\\_USERNAME!,\n\n16\n\n  process.env.SF\\_PASSWORD! + process.env.SF\\_TOKEN!, // Get your token from https://help.salesforce.com/articleView?id=user\\_security\\_token.htm&type=5\n\n17\n\n  (error, userInfo) \\=> {\n\n19\n\n      return console.error(error);\n\n21\n\n      console.log(\"Salesforce login successful. User ID: \" + userInfo.id);\n\n27\n\n  id: \"salesforce-create-contact\",\n\n28\n\n  name: \"Salesforce create contact\",\n\n30\n\n  trigger: eventTrigger({\n\n31\n\n    name: \"salesforce-create-contact\",\n\n37\n\n  run: async (payload, io, ctx) \\=> {\n\n38\n\n    const { Name, Website } \\= payload;\n\n40\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n42\n\n      \"Salesforce create contact\",\n\n44\n\n        // Create a new record in Salesforce\n\n45\n\n        await conn.sobject(\"Account\").create({ Name, Website }, (err, ret) \\=> {\n\n46\n\n          if (err || !ret.success) {\n\n47\n\n            return console.error(err, ret);\n\n49\n\n          console.log(\"Created record id : \" + ret.id);\n\n53\n\n      // Add metadata to improve how the task displays in the logs\n\n54\n\n      { name: \"Salesforce create contact\", icon: \"salesforce\" }"
},
{
  "url": "https://trigger.dev/apis/discord",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/discord",
    "loadedTime": "2024-03-16T13:39:07.341Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/discord",
    "title": "Discord | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Discord | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/discord"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { REST } from \"@discordjs/rest\";\n2\nimport { API } from \"@discordjs/core\";\n3\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n6\n// SDK: https://discord.js.org/docs/packages/core/1.0.1\n7\n// To get the Discord bot token follow the instructions here:\n8\n// https://discord.com/developers/docs/getting-started\n9\n// Bot needs to be added to a server to be able to send messages.\n10\n// Oauth URL generator to add the bot to a server. Scopes: bot, send messages\n11\n// Create REST and WebSocket managers directly\n12\nconst rest = new REST({ version: \"10\" }).setToken(\n13\nprocess.env.DISCORD_BOT_TOKEN!\n16\n// Create a client to emit relevant events.\n17\nconst discordApi = new API(rest);\n20\nid: \"discord-send-message\",\n21\nname: \"Discord send message\",\n23\ntrigger: eventTrigger({\n24\nname: \"discord-send-message\",\n26\n// To get the channel ID, right click on the channel and click \"Copy ID\".\n27\n// NB: You need to enable developer mode in Discord settings.\n28\nchannelId: z.string(),\n29\ncontent: z.string(), // The message content\n32\nrun: async (payload, io, ctx) => {\n33\nconst { channelId, content } = payload;\n35\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n37\n\"Discord send message\",\n39\n// See more https://discord.js.org/docs/packages/core/1.0.1/ChannelsAPI:Class\n40\nconst channelsAPI = discordApi.channels;\n41\nawait channelsAPI.createMessage(channelId, { content });\n44\n// Add metadata to the task to improve how it displays in the logs\n45\n{ name: \"Discord send message\", icon: \"discord\" }",
  "markdown": "1\n\nimport { REST } from \"@discordjs/rest\";\n\n2\n\nimport { API } from \"@discordjs/core\";\n\n3\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n6\n\n// SDK: https://discord.js.org/docs/packages/core/1.0.1\n\n7\n\n// To get the Discord bot token follow the instructions here:\n\n8\n\n// https://discord.com/developers/docs/getting-started\n\n9\n\n// Bot needs to be added to a server to be able to send messages.\n\n10\n\n// Oauth URL generator to add the bot to a server. Scopes: bot, send messages\n\n11\n\n// Create REST and WebSocket managers directly\n\n12\n\nconst rest \\= new REST({ version: \"10\" }).setToken(\n\n13\n\n  process.env.DISCORD\\_BOT\\_TOKEN!\n\n16\n\n// Create a client to emit relevant events.\n\n17\n\nconst discordApi \\= new API(rest);\n\n20\n\n  id: \"discord-send-message\",\n\n21\n\n  name: \"Discord send message\",\n\n23\n\n  trigger: eventTrigger({\n\n24\n\n    name: \"discord-send-message\",\n\n26\n\n      // To get the channel ID, right click on the channel and click \"Copy ID\".\n\n27\n\n      // NB: You need to enable developer mode in Discord settings.\n\n28\n\n      channelId: z.string(),\n\n29\n\n      content: z.string(), // The message content\n\n32\n\n  run: async (payload, io, ctx) \\=> {\n\n33\n\n    const { channelId, content } \\= payload;\n\n35\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n37\n\n      \"Discord send message\",\n\n39\n\n        // See more https://discord.js.org/docs/packages/core/1.0.1/ChannelsAPI:Class\n\n40\n\n        const channelsAPI \\= discordApi.channels;\n\n41\n\n        await channelsAPI.createMessage(channelId, { content });\n\n44\n\n      // Add metadata to the task to improve how it displays in the logs\n\n45\n\n      { name: \"Discord send message\", icon: \"discord\" }"
},
{
  "url": "https://trigger.dev/apis/segment",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/segment",
    "loadedTime": "2024-03-16T13:39:15.151Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/segment",
    "title": "Segment | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Segment | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/segment"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n3\nimport * as PublicAPI from \"@segment/public-api-sdk-typescript\";\n5\n// Guide to create a segment public api: https://segment.com/docs/api/public-api/\n6\n// You need to upgrade your account to a team account or business to get access to the public API.\n7\nconst publicAPI = PublicAPI.configureApis(\n8\nprocess.env.SEGMENT_PUBLIC_API_KEY!\n12\nid: \"segment-get-source\",\n13\nname: \"Segment Get Source\",\n15\ntrigger: eventTrigger({\n16\nname: \"segment-get-source\",\n21\nrun: async (payload, io, ctx) => {\n22\nconst { sourceId } = payload;\n24\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n28\nconst source = await publicAPI.sources.getSource(sourceId);\n29\nreturn JSON.parse(JSON.stringify(source));\n32\n// Add metadata to improve how the task displays in the logs\n33\n{ name: \"segment get source\", icon: \"segment\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n3\n\nimport \\* as PublicAPI from \"@segment/public-api-sdk-typescript\";\n\n5\n\n// Guide to create a segment public api: https://segment.com/docs/api/public-api/\n\n6\n\n// You need to upgrade your account to a team account or business to get access to the public API.\n\n7\n\nconst publicAPI \\= PublicAPI.configureApis(\n\n8\n\n  process.env.SEGMENT\\_PUBLIC\\_API\\_KEY!\n\n12\n\n  id: \"segment-get-source\",\n\n13\n\n  name: \"Segment Get Source\",\n\n15\n\n  trigger: eventTrigger({\n\n16\n\n    name: \"segment-get-source\",\n\n21\n\n  run: async (payload, io, ctx) \\=> {\n\n22\n\n    const { sourceId } \\= payload;\n\n24\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n28\n\n        const source \\= await publicAPI.sources.getSource(sourceId);\n\n29\n\n        return JSON.parse(JSON.stringify(source));\n\n32\n\n      // Add metadata to improve how the task displays in the logs\n\n33\n\n      { name: \"segment get source\", icon: \"segment\" }"
},
{
  "url": "https://trigger.dev/apis/github",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/github",
    "loadedTime": "2024-03-16T13:39:23.617Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/github",
    "title": "GitHub | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "GitHub | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/github"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Github, events } from \"@trigger.dev/github\";\n3\nimport { Slack } from \"@trigger.dev/slack\";\n5\nconst github = new Github({ id: \"github\" });\n6\nconst slack = new Slack({ id: \"slack\" });\n8\n// This Job will run when a star is added or removed from the triggerdotdev/trigger.dev repo\n10\nid: \"github-new-star-to-slack\",\n11\nname: \"GitHub: new star to slack\",\n13\ntrigger: github.triggers.repo({\n15\nowner: \"<your-org-name>\",\n16\nrepo: \"<your-repo-name>\",\n21\nrun: async (payload, io, ctx) => {\n22\nawait io.slack.postMessage(\"post message\", {\n23\nchannel: process.env.SLACK_CHANNEL_ID!,\n24\ntext: `New GitHub star from ${payload.sender.html_url}, ${payload.sender.name}. Your new GitHub star count is ${payload.repository.stargazers_count}.`,",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Github, events } from \"@trigger.dev/github\";\n\n3\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n5\n\nconst github \\= new Github({ id: \"github\" });\n\n6\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n8\n\n// This Job will run when a star is added or removed from the triggerdotdev/trigger.dev repo\n\n10\n\n  id: \"github-new-star-to-slack\",\n\n11\n\n  name: \"GitHub: new star to slack\",\n\n13\n\n  trigger: github.triggers.repo({\n\n15\n\n    owner: \"<your-org-name>\",\n\n16\n\n    repo: \"<your-repo-name>\",\n\n21\n\n  run: async (payload, io, ctx) \\=> {\n\n22\n\n    await io.slack.postMessage(\"post message\", {\n\n23\n\n      channel: process.env.SLACK\\_CHANNEL\\_ID!,\n\n24\n\n      text: \\`New GitHub star from ${payload.sender.html\\_url}, ${payload.sender.name}. Your new GitHub star count is ${payload.repository.stargazers\\_count}.\\`,"
},
{
  "url": "https://trigger.dev/apis/sendgrid",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/sendgrid",
    "loadedTime": "2024-03-16T13:39:24.517Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/sendgrid",
    "title": "SendGrid | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "SendGrid | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/sendgrid"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, cronTrigger } from \"@trigger.dev/sdk\";\n2\nimport { SendGrid } from \"@trigger.dev/sendgrid\";\n3\nimport { Slack } from \"@trigger.dev/slack\";\n4\nimport { weeklySummaryDb } from \"./mocks/db\";\n5\nimport { weeklySummaryEmail } from \"./mocks/emails\";\n7\nconst sendgrid = new SendGrid({\n9\napiKey: process.env.SENDGRID_API_KEY!,\n12\nconst slack = new Slack({ id: \"slack\" });\n14\n// This Job sends a weekly summary email to users who have\n15\n// summariesEnabled = true, and then posts the total numbers to Slack.\n17\nid: \"weekly-user-activity-summary\",\n18\nname: \"Weekly user activity summary\",\n20\nintegrations: { sendgrid, slack },\n21\ntrigger: cronTrigger({\n22\n// Send every Friday at 4pm\n25\nrun: async (payload, io, ctx) => {\n26\nconst users = await weeklySummaryDb.getUsers();\n31\nfor (const user of users) {\n32\nif (user.summariesEnabled) {\n33\nawait io.sendgrid.sendEmail(`Weekly summary for ${user.id}`, {\n35\n// The 'from' email must be a verified domain in your SendGrid account.\n36\nfrom: \"hello@acme.inc\",\n37\nsubject: \"Your weekly summary\",\n38\nhtml: weeklySummaryEmail(user),\n46\nawait io.slack.postMessage(\"Notify team\", {\n47\ntext: `Weekly summary sent to ${sentCount} users and not sent to ${notSentCount} users`,\n48\n// This has to be a channel ID, not a channel name\n49\nchannel: \"YOUR_CHANNEL_ID\",",
  "markdown": "1\n\nimport { TriggerClient, cronTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { SendGrid } from \"@trigger.dev/sendgrid\";\n\n3\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n4\n\nimport { weeklySummaryDb } from \"./mocks/db\";\n\n5\n\nimport { weeklySummaryEmail } from \"./mocks/emails\";\n\n7\n\nconst sendgrid \\= new SendGrid({\n\n9\n\n  apiKey: process.env.SENDGRID\\_API\\_KEY!,\n\n12\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n14\n\n// This Job sends a weekly summary email to users who have\n\n15\n\n// summariesEnabled = true, and then posts the total numbers to Slack.\n\n17\n\n  id: \"weekly-user-activity-summary\",\n\n18\n\n  name: \"Weekly user activity summary\",\n\n20\n\n  integrations: { sendgrid, slack },\n\n21\n\n  trigger: cronTrigger({\n\n22\n\n    // Send every Friday at 4pm\n\n25\n\n  run: async (payload, io, ctx) \\=> {\n\n26\n\n    const users \\= await weeklySummaryDb.getUsers();\n\n31\n\n    for (const user of users) {\n\n32\n\n      if (user.summariesEnabled) {\n\n33\n\n        await io.sendgrid.sendEmail(\\`Weekly summary for ${user.id}\\`, {\n\n35\n\n          // The 'from' email must be a verified domain in your SendGrid account.\n\n36\n\n          from: \"hello@acme.inc\",\n\n37\n\n          subject: \"Your weekly summary\",\n\n38\n\n          html: weeklySummaryEmail(user),\n\n46\n\n    await io.slack.postMessage(\"Notify team\", {\n\n47\n\n      text: \\`Weekly summary sent to ${sentCount} users and not sent to ${notSentCount} users\\`,\n\n48\n\n      // This has to be a channel ID, not a channel name\n\n49\n\n      channel: \"YOUR\\_CHANNEL\\_ID\","
},
{
  "url": "https://trigger.dev/apis/gmail",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/gmail",
    "loadedTime": "2024-03-16T13:39:32.460Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/gmail",
    "title": "Gmail | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Gmail | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/gmail"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { google } from \"googleapis\";\n3\nimport { JWT } from \"google-auth-library\";\n6\n// NB: This job only works if you have a Google Workspace account\n8\n// Create a service account and project: https://cloud.google.com/iam/docs/service-account-overview\n9\n// Create a JWT (JSON Web Token) authentication instance for Google APIs.\n10\n// https://cloud.google.com/nodejs/docs/reference/google-auth-library/latest/google-auth-library/jwt\n12\nemail: process.env.GOOGLE_CLIENT_EMAIL, // The email associated with the service account\n13\nkey: process.env.GOOGLE_PRIVATE_KEY!.split(String.raw`\\n`).join(\"\\n\"), // The service account private key\n14\nscopes: [\"https://www.googleapis.com/auth/gmail.send\"], // The desired scope for sending Gmail emails\n17\n// In order to send an email from a user's account, you must enable Gmail API Domain-Wide Delegation of Authority:\n18\n// 1. Google Admin Console: Go to your Google Admin Console.\n19\n// 2. Security Settings: Navigate to Security > API controls.\n20\n// 3. Manage Domain-Wide Delegation: In the \"Domain wide delegation\" panel, click on \"Manage Domain-Wide Delegation\".\n21\n// 4. Add Service Account: Click on \"Add new\" and provide:\n22\n// 4a. Client ID: This is the Service Account's Client ID, which can be found in your Google Cloud Console under the Service Account's details.\n23\n// 4b. OAuth Scopes: Enter https://www.googleapis.com/auth/gmail.send to grant send permissions via Gmail.\n24\n// 5. Click on \"Authorize\".\n26\n// Replace with the email of the user you're impersonating (the user that will send the email)\n27\nauth.subject = process.env.GOOGLE_IMPERSONATION_EMAIL;\n29\n// Initialize the Gmail API\n30\nconst gmail = google.gmail({ version: \"v1\", auth });\n33\nid: \"send-gmail-email\",\n34\nname: \"Send an email from Gmail\",\n36\ntrigger: eventTrigger({\n37\nname: \"send-gmail-email\",\n44\nrun: async (payload, io, ctx) => {\n45\nconst { to, subject, message } = payload;\n47\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n51\n// Create the email message\n52\nconst email = `To: ${to}\\r\\nSubject: ${subject}\\r\\n\\r\\n${message}`;\n54\nconst res = await gmail.users.messages.send({\n57\nraw: Buffer.from(email).toString(\"base64\"),\n61\nconsole.log(\"Message sent: \", res.data);\n64\n// Add metadata to improve how the task displays in the logs\n65\n{ name: \"Send Gmail\", icon: \"google\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { google } from \"googleapis\";\n\n3\n\nimport { JWT } from \"google-auth-library\";\n\n6\n\n// NB: This job only works if you have a Google Workspace account\n\n8\n\n// Create a service account and project: https://cloud.google.com/iam/docs/service-account-overview\n\n9\n\n// Create a JWT (JSON Web Token) authentication instance for Google APIs.\n\n10\n\n// https://cloud.google.com/nodejs/docs/reference/google-auth-library/latest/google-auth-library/jwt\n\n12\n\n  email: process.env.GOOGLE\\_CLIENT\\_EMAIL, // The email associated with the service account\n\n13\n\n  key: process.env.GOOGLE\\_PRIVATE\\_KEY!.split(String.raw\\`\\\\n\\`).join(\"\\\\n\"), // The service account private key\n\n14\n\n  scopes: \\[\"https://www.googleapis.com/auth/gmail.send\"\\], // The desired scope for sending Gmail emails\n\n17\n\n// In order to send an email from a user's account, you must enable Gmail API Domain-Wide Delegation of Authority:\n\n18\n\n// 1. Google Admin Console: Go to your Google Admin Console.\n\n19\n\n// 2. Security Settings: Navigate to Security > API controls.\n\n20\n\n// 3. Manage Domain-Wide Delegation: In the \"Domain wide delegation\" panel, click on \"Manage Domain-Wide Delegation\".\n\n21\n\n// 4. Add Service Account: Click on \"Add new\" and provide:\n\n22\n\n//  4a. Client ID: This is the Service Account's Client ID, which can be found in your Google Cloud Console under the Service Account's details.\n\n23\n\n//  4b. OAuth Scopes: Enter https://www.googleapis.com/auth/gmail.send to grant send permissions via Gmail.\n\n24\n\n// 5. Click on \"Authorize\".\n\n26\n\n// Replace with the email of the user you're impersonating (the user that will send the email)\n\n27\n\nauth.subject \\= process.env.GOOGLE\\_IMPERSONATION\\_EMAIL;\n\n29\n\n// Initialize the Gmail API\n\n30\n\nconst gmail \\= google.gmail({ version: \"v1\", auth });\n\n33\n\n  id: \"send-gmail-email\",\n\n34\n\n  name: \"Send an email from Gmail\",\n\n36\n\n  trigger: eventTrigger({\n\n37\n\n    name: \"send-gmail-email\",\n\n44\n\n  run: async (payload, io, ctx) \\=> {\n\n45\n\n    const { to, subject, message } \\= payload;\n\n47\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n51\n\n        // Create the email message\n\n52\n\n        const email \\= \\`To: ${to}\\\\r\\\\nSubject: ${subject}\\\\r\\\\n\\\\r\\\\n${message}\\`;\n\n54\n\n        const res \\= await gmail.users.messages.send({\n\n57\n\n            raw: Buffer.from(email).toString(\"base64\"),\n\n61\n\n        console.log(\"Message sent: \", res.data);\n\n64\n\n      // Add metadata to improve how the task displays in the logs\n\n65\n\n      { name: \"Send Gmail\", icon: \"google\" }"
},
{
  "url": "https://trigger.dev/apis/googlecalendar",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/googlecalendar",
    "loadedTime": "2024-03-16T13:39:40.160Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/googlecalendar",
    "title": "Google Calendar | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Google Calendar | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/googlecalendar"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { google } from \"googleapis\";\n3\nimport { JWT } from \"google-auth-library\";\n6\n// Create a service account and project: https://cloud.google.com/iam/docs/service-account-overview\n7\n// Create a JWT (JSON Web Token) authentication instance for Google APIs.\n8\n// https://cloud.google.com/nodejs/docs/reference/google-auth-library/latest/google-auth-library/jwt\n9\n// Make sure to add the service account email to the calendar you want to access as \"Make changes to manage\" https://support.google.com/calendar/answer/37082?hl=en\n11\nemail: process.env.GOOGLE_CLIENT_EMAIL, // The email associated with the service account\n12\nkey: process.env.GOOGLE_PRIVATE_KEY!.split(String.raw`\\n`).join(\"\\n\"), // The private key associated with the service account\n13\nscopes: [\"https://www.googleapis.com/auth/calendar\"], // The desired scope for accessing Google Calendar\n16\n// Initialize the Google Calendar API\n17\n// You have to enable the Google Calendar API https://console.cloud.google.com/apis/\n18\nconst calendar = google.calendar({ version: \"v3\", auth });\n21\nid: \"google-calendar-event-create\",\n22\nname: \"Google Calendar Event Create\",\n24\ntrigger: eventTrigger({\n25\nname: \"google-calendar\",\n27\ncalendarId: z.string(), // The calendar ID is in the Integrate Calendar section of the calendar settings\n29\ndescription: z.string().optional(),\n30\nstart: z.string(), // Format as ISO 8601 datetime string. Ex: \"2021-08-01T12:00:00.000Z\"\n34\nrun: async (payload, io, ctx) => {\n35\nconst { calendarId, summary, description, start, end } = payload;\n37\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n39\n\"Google Calendar create event\",\n46\ntimeZone: \"UTC\", // Adjust to the desired time zone\n54\nawait calendar.events.insert({ calendarId, requestBody });\n57\n// Add metadata to improve how the task displays in the logs\n58\n{ name: \"Google Calendar create event\", icon: \"calendar\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { google } from \"googleapis\";\n\n3\n\nimport { JWT } from \"google-auth-library\";\n\n6\n\n// Create a service account and project: https://cloud.google.com/iam/docs/service-account-overview\n\n7\n\n// Create a JWT (JSON Web Token) authentication instance for Google APIs.\n\n8\n\n// https://cloud.google.com/nodejs/docs/reference/google-auth-library/latest/google-auth-library/jwt\n\n9\n\n// Make sure to add the service account email to the calendar you want to access as \"Make changes to manage\" https://support.google.com/calendar/answer/37082?hl=en\n\n11\n\n  email: process.env.GOOGLE\\_CLIENT\\_EMAIL, // The email associated with the service account\n\n12\n\n  key: process.env.GOOGLE\\_PRIVATE\\_KEY!.split(String.raw\\`\\\\n\\`).join(\"\\\\n\"), // The private key associated with the service account\n\n13\n\n  scopes: \\[\"https://www.googleapis.com/auth/calendar\"\\], // The desired scope for accessing Google Calendar\n\n16\n\n// Initialize the Google Calendar API\n\n17\n\n// You have to enable the Google Calendar API https://console.cloud.google.com/apis/\n\n18\n\nconst calendar \\= google.calendar({ version: \"v3\", auth });\n\n21\n\n  id: \"google-calendar-event-create\",\n\n22\n\n  name: \"Google Calendar Event Create\",\n\n24\n\n  trigger: eventTrigger({\n\n25\n\n    name: \"google-calendar\",\n\n27\n\n      calendarId: z.string(), // The calendar ID is in the Integrate Calendar section of the calendar settings\n\n29\n\n      description: z.string().optional(),\n\n30\n\n      start: z.string(), // Format as ISO 8601 datetime string. Ex: \"2021-08-01T12:00:00.000Z\"\n\n34\n\n  run: async (payload, io, ctx) \\=> {\n\n35\n\n    const { calendarId, summary, description, start, end } \\= payload;\n\n37\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n39\n\n      \"Google Calendar create event\",\n\n46\n\n            timeZone: \"UTC\", // Adjust to the desired time zone\n\n54\n\n        await calendar.events.insert({ calendarId, requestBody });\n\n57\n\n      // Add metadata to improve how the task displays in the logs\n\n58\n\n      { name: \"Google Calendar create event\", icon: \"calendar\" }"
},
{
  "url": "https://trigger.dev/apis/shopify",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/shopify",
    "loadedTime": "2024-03-16T13:39:47.265Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/shopify",
    "title": "Shopify | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Shopify | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/shopify"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { shopifyApi, ApiVersion } from \"@shopify/shopify-api\";\n5\n// Make sure to include this import\n6\n// see: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/runtimes.md\n7\nimport \"@shopify/shopify-api/adapters/node\";\n9\n// Create a Shopify custom app: https://shopify.dev/tutorials/build-a-shopify-app-with-node-and-react\n10\n// Shopify SDK: https://github.com/Shopify/shopify-api-js\n11\n// https://admin.shopify.com/store/<STORE_ID>/settings/apps/development/<APP_ID>/api_credentials\n12\n// Initialize the Shopify API client\n13\nconst shopify = shopifyApi({\n14\napiKey: process.env.SHOPIFY_API_KEY,\n15\napiSecretKey: process.env.SHOPIFY_API_SECRET!,\n16\nscopes: [\"write_products\"], // Scopes can be found on the Shopify Admin Apps page\n17\nhostName: process.env.SHOPIFY_HOSTNAME!, // Ex: <STORE_ID>.myshopify.com\n18\napiVersion: ApiVersion.October23,\n22\n// Define a job to update product variant prices\n24\nid: \"shopify-product-variant-price\",\n25\nname: \"Shopify update product variant price\",\n27\ntrigger: eventTrigger({\n28\nname: \"shopify-product-variant-price\",\n30\n// The product variant ID can be found in the Shopify Admin product variant URL\n31\n// (e.g. https://admin.shopify.com/store/<STORE_NAME>/products/<PRODUCTS_ID>/variants/<VARIANT_ID>)\n32\nproductVariantId: z.number(),\n33\nprice: z.number(), // The new price of the product variant\n36\nrun: async (payload, io, ctx) => {\n37\nconst { productVariantId: id, price } = payload;\n39\n// Use io.runTask to make the SDK call resumable and log-friendly\n41\n\"Shopify update product variant price\",\n43\n// Initialize a Shopify session\n44\nconst session = shopify.session.customAppSession(\n45\nprocess.env.SHOPIFY_HOSTNAME!\n48\n// The access token can be found in the Shopify Admin Apps page\n49\nsession.accessToken = process.env.SHOPIFY_ADMIN_ACCESS_TOKEN;\n51\n// Initialize a Shopify REST client\n52\nconst client = new shopify.clients.Rest({ session });\n54\n// Update the product variant price\n56\npath: `variants/${id}`,\n57\ndata: { variant: { id, price } },\n61\n// Add metadata to improve how the task displays in the logs\n62\n{ name: \"Shopify update product variant price\", icon: \"shopify\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { shopifyApi, ApiVersion } from \"@shopify/shopify-api\";\n\n5\n\n// Make sure to include this import\n\n6\n\n// see: https://github.com/Shopify/shopify-api-js/blob/main/packages/shopify-api/docs/guides/runtimes.md\n\n7\n\nimport \"@shopify/shopify-api/adapters/node\";\n\n9\n\n// Create a Shopify custom app: https://shopify.dev/tutorials/build-a-shopify-app-with-node-and-react\n\n10\n\n// Shopify SDK: https://github.com/Shopify/shopify-api-js\n\n11\n\n// https://admin.shopify.com/store/<STORE\\_ID>/settings/apps/development/<APP\\_ID>/api\\_credentials\n\n12\n\n// Initialize the Shopify API client\n\n13\n\nconst shopify \\= shopifyApi({\n\n14\n\n  apiKey: process.env.SHOPIFY\\_API\\_KEY,\n\n15\n\n  apiSecretKey: process.env.SHOPIFY\\_API\\_SECRET!,\n\n16\n\n  scopes: \\[\"write\\_products\"\\], // Scopes can be found on the Shopify Admin Apps page\n\n17\n\n  hostName: process.env.SHOPIFY\\_HOSTNAME!, // Ex: <STORE\\_ID>.myshopify.com\n\n18\n\n  apiVersion: ApiVersion.October23,\n\n22\n\n// Define a job to update product variant prices\n\n24\n\n  id: \"shopify-product-variant-price\",\n\n25\n\n  name: \"Shopify update product variant price\",\n\n27\n\n  trigger: eventTrigger({\n\n28\n\n    name: \"shopify-product-variant-price\",\n\n30\n\n      // The product variant ID can be found in the Shopify Admin product variant URL\n\n31\n\n      // (e.g. https://admin.shopify.com/store/<STORE\\_NAME>/products/<PRODUCTS\\_ID>/variants/<VARIANT\\_ID>)\n\n32\n\n      productVariantId: z.number(),\n\n33\n\n      price: z.number(), // The new price of the product variant\n\n36\n\n  run: async (payload, io, ctx) \\=> {\n\n37\n\n    const { productVariantId: id, price } \\= payload;\n\n39\n\n    // Use io.runTask to make the SDK call resumable and log-friendly\n\n41\n\n      \"Shopify update product variant price\",\n\n43\n\n        // Initialize a Shopify session\n\n44\n\n        const session \\= shopify.session.customAppSession(\n\n45\n\n          process.env.SHOPIFY\\_HOSTNAME!\n\n48\n\n        // The access token can be found in the Shopify Admin Apps page\n\n49\n\n        session.accessToken \\= process.env.SHOPIFY\\_ADMIN\\_ACCESS\\_TOKEN;\n\n51\n\n        // Initialize a Shopify REST client\n\n52\n\n        const client \\= new shopify.clients.Rest({ session });\n\n54\n\n        // Update the product variant price\n\n56\n\n          path: \\`variants/${id}\\`,\n\n57\n\n          data: { variant: { id, price } },\n\n61\n\n      // Add metadata to improve how the task displays in the logs\n\n62\n\n      { name: \"Shopify update product variant price\", icon: \"shopify\" }"
},
{
  "url": "https://trigger.dev/apis/googledocs",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/googledocs",
    "loadedTime": "2024-03-16T13:39:56.323Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/googledocs",
    "title": "Google Docs | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Google Docs | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/googledocs"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n3\n// Apps Script Docs: https://developers.google.com/apps-script/reference\n4\n// Triggers Docs: https://developers.google.com/apps-script/guides/triggers\n6\n// Go to https://docs.google.com/document\n7\n// Open a document or create a new one\n8\n// Click on Extensions > Apps Script\n10\n// Add the following code to the script editor:\n12\n// function pushNotification(e) {\n13\n// // get endpoint url and secret key from trigger.dev dashboard\n18\n// 'message': 'Google Docs event',\n19\n// 'details': e // This contains information about the edit event\n22\n// var payload = JSON.stringify(payloadData);\n26\n// 'contentType': 'application/json',\n28\n// 'x-webhook-secret': secretKey\n33\n// UrlFetchApp.fetch(url, options);\n36\n// Save the script and click on the clock icon (Triggers) in the sidebar to open the Triggers page\n37\n// Click on Add Trigger, which will open a dialog box\n38\n// Choose pushNotification as the function to run\n39\n// Select event type, by default it is set to On open\n42\n// Set the GOOGLE_DOCS_WEBHOOK_SECRET (Secret) in the .env file.\n44\n// Create an HTTP Endpoint, with the Google Docs details\n45\nconst docs = client.defineHttpEndpoint({\n47\nsource: \"google-docs\",\n49\nverify: async (request) => {\n50\nconst secret = process.env.GOOGLE_DOCS_WEBHOOK_SECRET;\n51\nif (!secret) return { success: false, reason: \"Missing Secret\" };\n52\nif (request.headers.get(\"x-webhook-secret\") === secret)\n53\nreturn { success: true };\n54\nreturn { success: false, reason: \"Webhook Secret Match Failed\" };\n59\nid: \"http-google-docs\",\n60\nname: \"HTTP Google Docs\",\n63\n// Create a trigger from the HTTP endpoint\n64\ntrigger: docs.onRequest(),\n65\nrun: async (request, io, ctx) => {\n66\nconst body = await request.json();\n67\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n3\n\n// Apps Script Docs: https://developers.google.com/apps-script/reference\n\n4\n\n// Triggers Docs: https://developers.google.com/apps-script/guides/triggers\n\n6\n\n// Go to https://docs.google.com/document\n\n7\n\n// Open a document or create a new one\n\n8\n\n// Click on Extensions > Apps Script\n\n10\n\n// Add the following code to the script editor:\n\n12\n\n// function pushNotification(e) {\n\n13\n\n//   // get endpoint url and secret key from trigger.dev dashboard\n\n18\n\n//     'message': 'Google Docs event',\n\n19\n\n//     'details': e // This contains information about the edit event\n\n22\n\n//   var payload = JSON.stringify(payloadData);\n\n26\n\n//     'contentType': 'application/json',\n\n28\n\n//       'x-webhook-secret': secretKey\n\n33\n\n//   UrlFetchApp.fetch(url, options);\n\n36\n\n// Save the script and click on the clock icon (Triggers) in the sidebar to open the Triggers page\n\n37\n\n// Click on Add Trigger, which will open a dialog box\n\n38\n\n// Choose pushNotification as the function to run\n\n39\n\n// Select event type, by default it is set to On open\n\n42\n\n// Set the GOOGLE\\_DOCS\\_WEBHOOK\\_SECRET (Secret) in the .env file.\n\n44\n\n// Create an HTTP Endpoint, with the Google Docs details\n\n45\n\nconst docs \\= client.defineHttpEndpoint({\n\n47\n\n  source: \"google-docs\",\n\n49\n\n  verify: async (request) \\=> {\n\n50\n\n    const secret \\= process.env.GOOGLE\\_DOCS\\_WEBHOOK\\_SECRET;\n\n51\n\n    if (!secret) return { success: false, reason: \"Missing Secret\" };\n\n52\n\n    if (request.headers.get(\"x-webhook-secret\") \\=== secret)\n\n53\n\n      return { success: true };\n\n54\n\n    return { success: false, reason: \"Webhook Secret Match Failed\" };\n\n59\n\n  id: \"http-google-docs\",\n\n60\n\n  name: \"HTTP Google Docs\",\n\n63\n\n  // Create a trigger from the HTTP endpoint\n\n64\n\n  trigger: docs.onRequest(),\n\n65\n\n  run: async (request, io, ctx) \\=> {\n\n66\n\n    const body \\= await request.json();\n\n67\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/slack",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/slack",
    "loadedTime": "2024-03-16T13:39:56.936Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/slack",
    "title": "Slack | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Slack | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/slack"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Github, events } from \"@trigger.dev/github\";\n3\nimport { Slack } from \"@trigger.dev/slack\";\n5\nconst github = new Github({ id: \"github\" });\n6\nconst slack = new Slack({ id: \"slack\" });\n8\n// This Job will run when a star is added or removed from the triggerdotdev/trigger.dev repo\n10\nid: \"github-new-star-to-slack\",\n11\nname: \"GitHub: new star to slack\",\n13\ntrigger: github.triggers.repo({\n15\nowner: \"<your-org-name>\",\n16\nrepo: \"<your-repo-name>\",\n21\nrun: async (payload, io, ctx) => {\n22\nawait io.slack.postMessage(\"post message\", {\n23\nchannel: process.env.SLACK_CHANNEL_ID!,\n24\ntext: `New GitHub star from ${payload.sender.html_url}, ${payload.sender.name}. Your new GitHub star count is ${payload.repository.stargazers_count}.`,",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Github, events } from \"@trigger.dev/github\";\n\n3\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n5\n\nconst github \\= new Github({ id: \"github\" });\n\n6\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n8\n\n// This Job will run when a star is added or removed from the triggerdotdev/trigger.dev repo\n\n10\n\n  id: \"github-new-star-to-slack\",\n\n11\n\n  name: \"GitHub: new star to slack\",\n\n13\n\n  trigger: github.triggers.repo({\n\n15\n\n    owner: \"<your-org-name>\",\n\n16\n\n    repo: \"<your-repo-name>\",\n\n21\n\n  run: async (payload, io, ctx) \\=> {\n\n22\n\n    await io.slack.postMessage(\"post message\", {\n\n23\n\n      channel: process.env.SLACK\\_CHANNEL\\_ID!,\n\n24\n\n      text: \\`New GitHub star from ${payload.sender.html\\_url}, ${payload.sender.name}. Your new GitHub star count is ${payload.repository.stargazers\\_count}.\\`,"
},
{
  "url": "https://trigger.dev/apis/snyk",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/snyk",
    "loadedTime": "2024-03-16T13:40:06.365Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/snyk",
    "title": "Snyk | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Snyk | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/snyk"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n4\n// Replace this URL with the actual API endpoint you want to call in Snyk\n5\n// https://docs.snyk.io/snyk-api/authentication-for-api\n6\nconst endpointURL = `${process.env.SNYK_BASE_URL}/user/me`;\n7\nconst createOrgEndpontUrl = `${process.env.SNYK_BASE_URL}/org`;\n9\n// Create request options\n10\nconst requestOptions: RequestInit = {\n12\n\"Content-Type\": \"application/json; charset=utf-8\",\n13\n// You can find your token in your General Account Settings on\n14\n// https://snyk.io/account/. See Authentication for API details.\n15\nAuthorization: `${process.env.SNYK_AUTH_TOKEN}`,\n20\nid: \"snyk-get-my-user-details\",\n21\nname: \"Snyk get my user details\",\n23\ntrigger: eventTrigger({\n24\nname: \"snyk-get-profile\",\n26\nrun: async (payload, io, ctx) => {\n27\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n29\n\"Get Snyk me user details\",\n31\nconst response = await fetch(endpointURL, {\n36\n// Return the response body\n37\nconst res = await response.json();\n41\n// Add metadata to improve how the task displays in the logs\n42\n{ name: \"get snyk me user details\", icon: \"snyk\" }\n47\n// Create organization in Snyk\n50\n// id: \"snyk-create-org\",\n51\n// name: \"Snyk create new organization\",\n53\n// trigger: eventTrigger({\n54\n// name: \"snyk-add-org\",\n57\n// groupId: z.string(),\n58\n// sourceOrgId: z.string(),\n61\n// run: async (payload, io, ctx) => {\n62\n// // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n64\n// \"Create Organization\",\n66\n// // Make request using Fetch API\n67\n// const response = await fetch(createOrgEndpontUrl, {\n70\n// body: JSON.stringify(payload),\n73\n// // Return the response body\n74\n// const res = await response.json();\n78\n// // Add metadata to improve how the task displays in the logs\n79\n// { name: \"create new organization in snyk\", icon: \"snyk\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n4\n\n// Replace this URL with the actual API endpoint you want to call in Snyk\n\n5\n\n// https://docs.snyk.io/snyk-api/authentication-for-api\n\n6\n\nconst endpointURL \\= \\`${process.env.SNYK\\_BASE\\_URL}/user/me\\`;\n\n7\n\nconst createOrgEndpontUrl \\= \\`${process.env.SNYK\\_BASE\\_URL}/org\\`;\n\n9\n\n// Create request options\n\n10\n\nconst requestOptions: RequestInit \\= {\n\n12\n\n    \"Content-Type\": \"application/json; charset=utf-8\",\n\n13\n\n    // You can find your token in your General Account Settings on\n\n14\n\n    // https://snyk.io/account/. See Authentication for API details.\n\n15\n\n    Authorization: \\`${process.env.SNYK\\_AUTH\\_TOKEN}\\`,\n\n20\n\n  id: \"snyk-get-my-user-details\",\n\n21\n\n  name: \"Snyk get my user details\",\n\n23\n\n  trigger: eventTrigger({\n\n24\n\n    name: \"snyk-get-profile\",\n\n26\n\n  run: async (payload, io, ctx) \\=> {\n\n27\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n29\n\n      \"Get Snyk me user details\",\n\n31\n\n        const response \\= await fetch(endpointURL, {\n\n36\n\n        // Return the response body\n\n37\n\n        const res \\= await response.json();\n\n41\n\n      // Add metadata to improve how the task displays in the logs\n\n42\n\n      { name: \"get snyk me user details\", icon: \"snyk\" }\n\n47\n\n// Create organization in Snyk\n\n50\n\n//   id: \"snyk-create-org\",\n\n51\n\n//   name: \"Snyk create new organization\",\n\n53\n\n//   trigger: eventTrigger({\n\n54\n\n//     name: \"snyk-add-org\",\n\n57\n\n//       groupId: z.string(),\n\n58\n\n//       sourceOrgId: z.string(),\n\n61\n\n//   run: async (payload, io, ctx) => {\n\n62\n\n//     // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n64\n\n//       \"Create Organization\",\n\n66\n\n//         // Make request using Fetch API\n\n67\n\n//         const response = await fetch(createOrgEndpontUrl, {\n\n70\n\n//           body: JSON.stringify(payload),\n\n73\n\n//         // Return the response body\n\n74\n\n//         const res = await response.json();\n\n78\n\n//       // Add metadata to improve how the task displays in the logs\n\n79\n\n//       { name: \"create new organization in snyk\", icon: \"snyk\" }"
},
{
  "url": "https://trigger.dev/apis/googledrive",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/googledrive",
    "loadedTime": "2024-03-16T13:40:16.932Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/googledrive",
    "title": "Google Drive | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Google Drive | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/googledrive"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { google } from \"googleapis\";\n3\nimport { JWT } from \"google-auth-library\";\n6\n// Create a service account and project: https://cloud.google.com/iam/docs/service-account-overview\n7\n// Create a JWT (JSON Web Token) authentication instance for Google APIs.\n8\n// https://cloud.google.com/nodejs/docs/reference/google-auth-library/latest/google-auth-library/jwt\n10\nemail: process.env.GOOGLE_CLIENT_EMAIL, // The email associated with the service account\n11\nkey: process.env.GOOGLE_PRIVATE_KEY!.split(String.raw`\\n`).join(\"\\n\"), // The private key associated with the service account\n12\nscopes: \"https://www.googleapis.com/auth/drive\", // The desired scope for accessing Google Drive\n15\n// Initialize the Google Drive API\n16\n// You have to enable the Google Drive API https://console.cloud.google.com/apis/\n17\nconst drive = google.drive({ version: \"v2\", auth });\n20\nid: \"google-drive-file-rename\",\n21\nname: \"Google drive file rename\",\n23\ntrigger: eventTrigger({\n24\nname: \"google-drive-file-rename\",\n26\n// The fileId is a unique identifier found in the Google Drive sharing link.\n27\n// E.g.: https://drive.google.com/file/d/FILE_ID/view\n32\nrun: async (payload, io, ctx) => {\n33\nconst { fileId, newName } = payload;\n35\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n37\n\"Google Drive File Rename\",\n39\n// NB: You must share the Google Drive file with the service account.\n40\nawait drive.files.update({\n48\n// Add metadata to improve how the task displays in the logs\n49\n{ name: \"Google drive file rename\", icon: \"google\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { google } from \"googleapis\";\n\n3\n\nimport { JWT } from \"google-auth-library\";\n\n6\n\n// Create a service account and project: https://cloud.google.com/iam/docs/service-account-overview\n\n7\n\n// Create a JWT (JSON Web Token) authentication instance for Google APIs.\n\n8\n\n// https://cloud.google.com/nodejs/docs/reference/google-auth-library/latest/google-auth-library/jwt\n\n10\n\n  email: process.env.GOOGLE\\_CLIENT\\_EMAIL, // The email associated with the service account\n\n11\n\n  key: process.env.GOOGLE\\_PRIVATE\\_KEY!.split(String.raw\\`\\\\n\\`).join(\"\\\\n\"), // The private key associated with the service account\n\n12\n\n  scopes: \"https://www.googleapis.com/auth/drive\", // The desired scope for accessing Google Drive\n\n15\n\n// Initialize the Google Drive API\n\n16\n\n// You have to enable the Google Drive API https://console.cloud.google.com/apis/\n\n17\n\nconst drive \\= google.drive({ version: \"v2\", auth });\n\n20\n\n  id: \"google-drive-file-rename\",\n\n21\n\n  name: \"Google drive file rename\",\n\n23\n\n  trigger: eventTrigger({\n\n24\n\n    name: \"google-drive-file-rename\",\n\n26\n\n      // The fileId is a unique identifier found in the Google Drive sharing link.\n\n27\n\n      // E.g.: https://drive.google.com/file/d/FILE\\_ID/view\n\n32\n\n  run: async (payload, io, ctx) \\=> {\n\n33\n\n    const { fileId, newName } \\= payload;\n\n35\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n37\n\n      \"Google Drive File Rename\",\n\n39\n\n        // NB: You must share the Google Drive file with the service account.\n\n40\n\n        await drive.files.update({\n\n48\n\n      // Add metadata to improve how the task displays in the logs\n\n49\n\n      { name: \"Google drive file rename\", icon: \"google\" }"
},
{
  "url": "https://trigger.dev/apis/googlemaps",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/googlemaps",
    "loadedTime": "2024-03-16T13:40:17.640Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/googlemaps",
    "title": "Google Maps | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Google Maps | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/googlemaps"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { Client } from \"@googlemaps/google-maps-services-js\";\n5\n// Get your API key here: https://console.developers.google.com/apis/credentials\n6\n// Make sure to enable the Google Maps Data API https://console.cloud.google.com/apis/library/maps-backend.googleapis.com\n7\n// SDK Docs: https://developers.google.com/maps/documentation/javascript/overview\n8\n// Initialize the Google Maps API with your API key\n9\nconst apiKey = String(process.env.GOOGLE_MAP_API_KEY);\n11\nconst map = new Client({});\n14\nid: \"google-map-geocode\",\n15\nname: \"Google Map Geocode\",\n17\ntrigger: eventTrigger({\n18\nname: \"google-map-geocode\",\n23\nrun: async (payload, io, ctx) => {\n24\nconst { address } = payload;\n26\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n30\n// Make the geocode request\n31\nconst response = await map.geocode({\n38\n// Process the geocode response here\n39\nreturn JSON.parse(JSON.stringify(response.data));\n42\n// Add metadata to improve how the task displays in the logs\n43\n{ name: \"Google map geocode\", icon: \"google\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Client } from \"@googlemaps/google-maps-services-js\";\n\n5\n\n// Get your API key here: https://console.developers.google.com/apis/credentials\n\n6\n\n// Make sure to enable the Google Maps Data API https://console.cloud.google.com/apis/library/maps-backend.googleapis.com\n\n7\n\n// SDK Docs: https://developers.google.com/maps/documentation/javascript/overview\n\n8\n\n// Initialize the Google Maps API with your API key\n\n9\n\nconst apiKey \\= String(process.env.GOOGLE\\_MAP\\_API\\_KEY);\n\n11\n\nconst map \\= new Client({});\n\n14\n\n  id: \"google-map-geocode\",\n\n15\n\n  name: \"Google Map Geocode\",\n\n17\n\n  trigger: eventTrigger({\n\n18\n\n    name: \"google-map-geocode\",\n\n23\n\n  run: async (payload, io, ctx) \\=> {\n\n24\n\n    const { address } \\= payload;\n\n26\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n30\n\n        // Make the geocode request\n\n31\n\n        const response \\= await map.geocode({\n\n38\n\n        // Process the geocode response here\n\n39\n\n        return JSON.parse(JSON.stringify(response.data));\n\n42\n\n      // Add metadata to improve how the task displays in the logs\n\n43\n\n      { name: \"Google map geocode\", icon: \"google\" }"
},
{
  "url": "https://trigger.dev/apis/square",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/square",
    "loadedTime": "2024-03-16T13:40:27.043Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/square",
    "title": "Square | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Square | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/square"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { WebhooksHelper } from \"square\";\n3\nimport { Slack } from \"@trigger.dev/slack\";\n5\nconst slack = new Slack({ id: \"slack\" });\n7\n// Go to your Square developer account\n8\n// Create and open an application\n9\n// Go to Webhooks > Subscriptions\n10\n// Add a subscription and add your trigger webhooks url in url field\n11\n// Select events you want to be notified about\n13\n// Obtain the Webhook Signature Key and Notification URL\n15\n// Create an HTTP Endpoint, with the Square details\n16\nconst square = client.defineHttpEndpoint({\n20\nverify: async (request) => {\n21\nconst body = await request.text();\n23\nconst isFromSquare = WebhooksHelper.isValidWebhookEventSignature(\n25\nrequest.headers.get(\"x-square-hmacsha256-signature\") ?? \"\",\n26\nprocess.env.SQUARE_WEBHOOK_SIGNATURE_KEY ?? \"\",\n27\nprocess.env.SQUARE_WEBHOOK_NOTIFICATION_URL ?? \"\"\n33\nreason: \"Invalid Square Signature\",\n43\n//Our job sends a Slack message when customer is created or deleted\n49\n// Create a trigger from the HTTP endpoint\n50\ntrigger: square.onRequest(),\n54\nrun: async (request, io, ctx) => {\n55\nconst body = await request.json();\n56\nawait io.logger.info(`Body`, body);\n58\nconst customer = body.data.object.customer;\n61\ncase \"customer.created\": {\n62\nawait io.slack.postMessage(\"customer-created\", {\n63\nchannel: process.env.SLACK_CHANNEL!,\n64\ntext: `Customer created:\\n ${customer.given_name} ${customer.family_name}`,\n68\ncase \"customer.deleted\": {\n69\nawait io.slack.postMessage(\"customer-deleted\", {\n70\nchannel: process.env.SLACK_CHANNEL!,\n71\ntext: `Customer deleted:\\n ${customer.given_name} ${customer.family_name}`,",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { WebhooksHelper } from \"square\";\n\n3\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n5\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n7\n\n// Go to your Square developer account\n\n8\n\n// Create and open an application\n\n9\n\n// Go to Webhooks > Subscriptions\n\n10\n\n// Add a subscription and add your trigger webhooks url in url field\n\n11\n\n// Select events you want to be notified about\n\n13\n\n// Obtain the Webhook Signature Key and Notification URL\n\n15\n\n// Create an HTTP Endpoint, with the Square details\n\n16\n\nconst square \\= client.defineHttpEndpoint({\n\n20\n\n  verify: async (request) \\=> {\n\n21\n\n    const body \\= await request.text();\n\n23\n\n    const isFromSquare \\= WebhooksHelper.isValidWebhookEventSignature(\n\n25\n\n      request.headers.get(\"x-square-hmacsha256-signature\") ?? \"\",\n\n26\n\n      process.env.SQUARE\\_WEBHOOK\\_SIGNATURE\\_KEY ?? \"\",\n\n27\n\n      process.env.SQUARE\\_WEBHOOK\\_NOTIFICATION\\_URL ?? \"\"\n\n33\n\n        reason: \"Invalid Square Signature\",\n\n43\n\n//Our job sends a Slack message when customer is created or deleted\n\n49\n\n  // Create a trigger from the HTTP endpoint\n\n50\n\n  trigger: square.onRequest(),\n\n54\n\n  run: async (request, io, ctx) \\=> {\n\n55\n\n    const body \\= await request.json();\n\n56\n\n    await io.logger.info(\\`Body\\`, body);\n\n58\n\n    const customer \\= body.data.object.customer;\n\n61\n\n      case \"customer.created\": {\n\n62\n\n        await io.slack.postMessage(\"customer-created\", {\n\n63\n\n          channel: process.env.SLACK\\_CHANNEL!,\n\n64\n\n          text: \\`Customer created:\\\\n ${customer.given\\_name} ${customer.family\\_name}\\`,\n\n68\n\n      case \"customer.deleted\": {\n\n69\n\n        await io.slack.postMessage(\"customer-deleted\", {\n\n70\n\n          channel: process.env.SLACK\\_CHANNEL!,\n\n71\n\n          text: \\`Customer deleted:\\\\n ${customer.given\\_name} ${customer.family\\_name}\\`,"
},
{
  "url": "https://trigger.dev/apis/googlesheets",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/googlesheets",
    "loadedTime": "2024-03-16T13:40:27.834Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/googlesheets",
    "title": "Google Sheets | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Google Sheets | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/googlesheets"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { config } from \"dotenv\";\n2\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n3\nimport { google } from \"googleapis\";\n4\nimport { JWT } from \"google-auth-library\";\n7\n// Create a service account and project: https://cloud.google.com/iam/docs/service-account-overview\n8\n// Create a JWT (JSON Web Token) authentication instance for Google APIs.\n9\n// https://cloud.google.com/nodejs/docs/reference/google-auth-library/latest/google-auth-library/jwt\n11\nemail: process.env.GOOGLE_CLIENT_EMAIL, // The email associated with the service account\n12\nkey: process.env.GOOGLE_PRIVATE_KEY!.split(String.raw`\\n`).join(\"\\n\"), // The private key associated with the service account\n13\nscopes: \"https://www.googleapis.com/auth/spreadsheets\", // The desired scope for accessing Google Sheets\n16\n// You have to enable the Google Sheets API: https://console.cloud.google.com/apis/\n17\nconst sheets = google.sheets({ version: \"v4\", auth });\n20\nid: \"google-sheets-append\",\n21\nname: \"Google Sheets Append\",\n23\ntrigger: eventTrigger({\n24\nname: \"google-sheets\",\n27\ngithubUrl: z.string(),\n28\nrange: z.string().optional(),\n31\nrun: async (payload, io, ctx) => {\n32\nconst { fullName, githubUrl, range } = payload;\n34\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n36\n\"Google Sheets append row\",\n38\nconst sheetsData = [[fullName, githubUrl]];\n40\nconst sheetsAPI = sheets.spreadsheets.values;\n42\nawait sheetsAPI.append({\n43\n// NB: You must share your Google Sheet with your service account email\n44\nspreadsheetId: process.env.SPREADSHEET_ID,\n45\n// Set a spreadsheet range\n47\nvalueInputOption: \"USER_ENTERED\",\n48\ninsertDataOption: \"INSERT_ROWS\",\n55\n// Add metadata to improve how the task displays in the logs\n56\n{ name: \"Google Sheets append\", icon: \"google\" }",
  "markdown": "1\n\nimport { config } from \"dotenv\";\n\n2\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n3\n\nimport { google } from \"googleapis\";\n\n4\n\nimport { JWT } from \"google-auth-library\";\n\n7\n\n// Create a service account and project: https://cloud.google.com/iam/docs/service-account-overview\n\n8\n\n// Create a JWT (JSON Web Token) authentication instance for Google APIs.\n\n9\n\n// https://cloud.google.com/nodejs/docs/reference/google-auth-library/latest/google-auth-library/jwt\n\n11\n\n  email: process.env.GOOGLE\\_CLIENT\\_EMAIL, // The email associated with the service account\n\n12\n\n  key: process.env.GOOGLE\\_PRIVATE\\_KEY!.split(String.raw\\`\\\\n\\`).join(\"\\\\n\"), // The private key associated with the service account\n\n13\n\n  scopes: \"https://www.googleapis.com/auth/spreadsheets\", // The desired scope for accessing Google Sheets\n\n16\n\n// You have to enable the Google Sheets API: https://console.cloud.google.com/apis/\n\n17\n\nconst sheets \\= google.sheets({ version: \"v4\", auth });\n\n20\n\n  id: \"google-sheets-append\",\n\n21\n\n  name: \"Google Sheets Append\",\n\n23\n\n  trigger: eventTrigger({\n\n24\n\n    name: \"google-sheets\",\n\n27\n\n      githubUrl: z.string(),\n\n28\n\n      range: z.string().optional(),\n\n31\n\n  run: async (payload, io, ctx) \\=> {\n\n32\n\n    const { fullName, githubUrl, range } \\= payload;\n\n34\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n36\n\n      \"Google Sheets append row\",\n\n38\n\n        const sheetsData \\= \\[\\[fullName, githubUrl\\]\\];\n\n40\n\n        const sheetsAPI \\= sheets.spreadsheets.values;\n\n42\n\n        await sheetsAPI.append({\n\n43\n\n          // NB: You must share your Google Sheet with your service account email\n\n44\n\n          spreadsheetId: process.env.SPREADSHEET\\_ID,\n\n45\n\n          // Set a spreadsheet range\n\n47\n\n          valueInputOption: \"USER\\_ENTERED\",\n\n48\n\n          insertDataOption: \"INSERT\\_ROWS\",\n\n55\n\n      // Add metadata to improve how the task displays in the logs\n\n56\n\n      { name: \"Google Sheets append\", icon: \"google\" }"
},
{
  "url": "https://trigger.dev/apis/stabilityai",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/stabilityai",
    "loadedTime": "2024-03-16T13:40:27.723Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/stabilityai",
    "title": "StabilityAI | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "StabilityAI | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/stabilityai"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { z } from \"zod\";\n4\n// This code uses the REST API for Stability AI\n5\n// Documentation can be found at: https://platform.stability.ai/docs/api-reference\n6\nconst engineId = \"stable-diffusion-xl-1024-v1-0\";\n7\nconst apiHost = process.env.API_HOST ?? \"https://api.stability.ai\";\n8\nconst apiKey = process.env.STABILITY_API_KEY;\n10\ninterface GenerationResponse {\n19\nid: \"stability-ai-text-to-image\",\n20\nname: \"Stability AI Text to Image\",\n22\ntrigger: eventTrigger({\n23\nname: \"stability.text.to.image\",\n24\n// Define the schema for text prompts used for image generation.\n25\n// Weights can be positive or negative to influence the generation.\n29\n// \"text\": \"A painting of a cat\",\n33\n// \"text\": \"blurry, bad\",\n38\n// For more details, refer to the text-to-image endpoint documentation:\n39\n// https://platform.stability.ai/docs/api-reference#tag/v1generation/operation/textToImage\n41\ntext_prompts: z.array(\n44\nweight: z.number().optional(),\n47\ncfg_scale: z.number().optional(),\n48\nwidth: z.number().optional(),\n49\nheight: z.number().optional(),\n50\nsteps: z.number().optional(),\n51\nsamples: z.number().optional(),\n54\nrun: async (payload, io, ctx) => {\n55\n// Here we use `backgroundFetch` which allows you to fetch data from\n56\n// a URL that can take longer than the serverless timeout.\n57\nconst response = (await io.backgroundFetch(\n58\n\"create-image-from-text\",\n59\n`${apiHost}/v1/generation/${engineId}/text-to-image`,\n63\n\"Content-Type\": \"application/json\",\n64\nAccept: \"application/json\",\n65\nAuthorization: `Bearer ${apiKey}`,\n67\nbody: JSON.stringify({\n68\ntext_prompts: payload.text_prompts,\n69\ncfg_scale: payload.cfg_scale ?? 7,\n70\nheight: payload.height ?? 1024,\n71\nwidth: payload.width ?? 1024,\n72\nsteps: payload.steps ?? 50,\n73\nsamples: payload.samples ?? 1,\n81\nmaxTimeoutInMs: 60000,\n86\n)) as GenerationResponse;\n88\n// Do something with the returned image(s).\n89\n// Learn about using cache keys with loops here:\n90\n// https://trigger.dev/docs/documentation/concepts/resumability#how-to-use-cache-keys-with-loops\n91\nfor (const [index, artifact] of response.artifacts.entries()) {\n93\n`Image ${index + 1}/${payload.samples ?? 1}`,\n95\nconst imageUrl = `data:image/png;base64,${artifact.base64}`;",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { z } from \"zod\";\n\n4\n\n// This code uses the REST API for Stability AI\n\n5\n\n// Documentation can be found at: https://platform.stability.ai/docs/api-reference\n\n6\n\nconst engineId \\= \"stable-diffusion-xl-1024-v1-0\";\n\n7\n\nconst apiHost \\= process.env.API\\_HOST ?? \"https://api.stability.ai\";\n\n8\n\nconst apiKey \\= process.env.STABILITY\\_API\\_KEY;\n\n10\n\ninterface GenerationResponse {\n\n19\n\n  id: \"stability-ai-text-to-image\",\n\n20\n\n  name: \"Stability AI Text to Image\",\n\n22\n\n  trigger: eventTrigger({\n\n23\n\n    name: \"stability.text.to.image\",\n\n24\n\n    // Define the schema for text prompts used for image generation.\n\n25\n\n    // Weights can be positive or negative to influence the generation.\n\n29\n\n    //     \"text\": \"A painting of a cat\",\n\n33\n\n    //     \"text\": \"blurry, bad\",\n\n38\n\n    // For more details, refer to the text-to-image endpoint documentation:\n\n39\n\n    // https://platform.stability.ai/docs/api-reference#tag/v1generation/operation/textToImage\n\n41\n\n      text\\_prompts: z.array(\n\n44\n\n          weight: z.number().optional(),\n\n47\n\n      cfg\\_scale: z.number().optional(),\n\n48\n\n      width: z.number().optional(),\n\n49\n\n      height: z.number().optional(),\n\n50\n\n      steps: z.number().optional(),\n\n51\n\n      samples: z.number().optional(),\n\n54\n\n  run: async (payload, io, ctx) \\=> {\n\n55\n\n    // Here we use \\`backgroundFetch\\` which allows you to fetch data from\n\n56\n\n    // a URL that can take longer than the serverless timeout.\n\n57\n\n    const response \\= (await io.backgroundFetch(\n\n58\n\n      \"create-image-from-text\",\n\n59\n\n      \\`${apiHost}/v1/generation/${engineId}/text-to-image\\`,\n\n63\n\n          \"Content-Type\": \"application/json\",\n\n64\n\n          Accept: \"application/json\",\n\n65\n\n          Authorization: \\`Bearer ${apiKey}\\`,\n\n67\n\n        body: JSON.stringify({\n\n68\n\n          text\\_prompts: payload.text\\_prompts,\n\n69\n\n          cfg\\_scale: payload.cfg\\_scale ?? 7,\n\n70\n\n          height: payload.height ?? 1024,\n\n71\n\n          width: payload.width ?? 1024,\n\n72\n\n          steps: payload.steps ?? 50,\n\n73\n\n          samples: payload.samples ?? 1,\n\n81\n\n          maxTimeoutInMs: 60000,\n\n86\n\n    )) as GenerationResponse;\n\n88\n\n    // Do something with the returned image(s).\n\n89\n\n    // Learn about using cache keys with loops here:\n\n90\n\n    // https://trigger.dev/docs/documentation/concepts/resumability#how-to-use-cache-keys-with-loops\n\n91\n\n    for (const \\[index, artifact\\] of response.artifacts.entries()) {\n\n93\n\n        \\`Image ${index + 1}/${payload.samples ?? 1}\\`,\n\n95\n\n          const imageUrl \\= \\`data:image/png;base64,${artifact.base64}\\`;"
},
{
  "url": "https://trigger.dev/apis/hubspot",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/hubspot",
    "loadedTime": "2024-03-16T13:40:36.837Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/hubspot",
    "title": "HubSpot | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "HubSpot | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/hubspot"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { createHash } from \"crypto\";\n4\n// Go to your normal HubSpot account\n5\n// Create a private app in Settings > Integrations > Private apps\n6\n// With scopes: 'crm.objects.contacts.read', 'crm.objects.contacts.write'\n7\n// And add your trigger webhooks url in target url.\n8\n// Create subscription for contact creation and deletion\n9\n// Copy your client secret from the Auth tab and paste it in the .env file\n10\n// Create an HTTP Endpoint, with the HubSpot details\n11\nconst hubspot = client.defineHttpEndpoint({\n13\nsource: \"hubspot.com\",\n15\nverify: async (request) => {\n16\nconst bodyText = await request.text();\n17\nconst source_string = process.env.HUBSPOT_SECRET! + bodyText;\n18\nconst hash = createHash(\"sha256\").update(source_string).digest(\"hex\");\n19\nconst reqHash = request.headers.get(\"X-HubSpot-Signature\");\n20\nconst success = hash === reqHash;\n21\nif (success) return { success };\n22\nreturn { success: false, reason: \"Failed sha256 verification\" };\n26\n// Job that runs when the HTTP endpoint is called from HubSpot\n27\n// When a contact is created or deleted\n33\n// Create a trigger from the HTTP endpoint\n34\ntrigger: hubspot.onRequest(),\n35\nrun: async (request, io, ctx) => {\n36\nconst body = await request.json();\n37\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { createHash } from \"crypto\";\n\n4\n\n// Go to your normal HubSpot account\n\n5\n\n// Create a private app in Settings > Integrations > Private apps\n\n6\n\n// With scopes: 'crm.objects.contacts.read', 'crm.objects.contacts.write'\n\n7\n\n// And add your trigger webhooks url in target url.\n\n8\n\n// Create subscription for contact creation and deletion\n\n9\n\n// Copy your client secret from the Auth tab and paste it in the .env file\n\n10\n\n// Create an HTTP Endpoint, with the HubSpot details\n\n11\n\nconst hubspot \\= client.defineHttpEndpoint({\n\n13\n\n  source: \"hubspot.com\",\n\n15\n\n  verify: async (request) \\=> {\n\n16\n\n    const bodyText \\= await request.text();\n\n17\n\n    const source\\_string \\= process.env.HUBSPOT\\_SECRET! + bodyText;\n\n18\n\n    const hash \\= createHash(\"sha256\").update(source\\_string).digest(\"hex\");\n\n19\n\n    const reqHash \\= request.headers.get(\"X-HubSpot-Signature\");\n\n20\n\n    const success \\= hash \\=== reqHash;\n\n21\n\n    if (success) return { success };\n\n22\n\n    return { success: false, reason: \"Failed sha256 verification\" };\n\n26\n\n// Job that runs when the HTTP endpoint is called from HubSpot\n\n27\n\n// When a contact is created or deleted\n\n33\n\n  // Create a trigger from the HTTP endpoint\n\n34\n\n  trigger: hubspot.onRequest(),\n\n35\n\n  run: async (request, io, ctx) \\=> {\n\n36\n\n    const body \\= await request.json();\n\n37\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/stripe",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/stripe",
    "loadedTime": "2024-03-16T13:40:44.540Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/stripe",
    "title": "Stripe | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Stripe | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/stripe"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Stripe } from \"@trigger.dev/stripe\";\n3\nimport { Airtable } from \"@trigger.dev/airtable\";\n5\nconst stripe = new Stripe({\n7\napiKey: process.env.STRIPE_API_KEY!,\n10\nconst airtable = new Airtable({\n12\ntoken: process.env.AIRTABLE_TOKEN!,\n15\n//this is the type definition for the table\n16\ntype SubscribedUsers = {\n23\n// This job populates an Airtable table when a new customer subscription is created in Stripe\n25\nid: \"stripe-new-subscription-update-airtable\",\n26\nname: \"On new Stripe subscription update Airtable\",\n32\ntrigger: stripe.onCustomerSubscription(),\n33\nrun: async (payload, io, ctx) => {\n34\n// Adding the type to table<YourTableType>(\"<your table name>\")\n35\n// gives you nice type inference and errors.\n36\n// You can leave it out as well table(\"<your table name>\")\n37\nconst table = io.airtable\n38\n.base(\"<your base id>\")\n39\n.table<SubscribedUsers>(\"<your table name>\");\n42\nconst newRecords = await table.createRecords(\"create records\", [\n44\n// Check the Stripe documents for object info: https://stripe.com/docs/api/subscriptions/object\n47\ninterval: payload.items.data[0].price.recurring?.interval,\n48\ncurrency: payload.items.data[0].price.currency,\n49\n// The unit amount in pence to be charged, represented as a whole integer if possible.\n50\nunitAmount: payload.items.data[0].price.unit_amount ?? undefined,\n55\nawait io.logger.info(\"A new subscription was created.\");",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Stripe } from \"@trigger.dev/stripe\";\n\n3\n\nimport { Airtable } from \"@trigger.dev/airtable\";\n\n5\n\nconst stripe \\= new Stripe({\n\n7\n\n  apiKey: process.env.STRIPE\\_API\\_KEY!,\n\n10\n\nconst airtable \\= new Airtable({\n\n12\n\n  token: process.env.AIRTABLE\\_TOKEN!,\n\n15\n\n//this is the type definition for the table\n\n16\n\ntype SubscribedUsers \\= {\n\n23\n\n// This job populates an Airtable table when a new customer subscription is created in Stripe\n\n25\n\n  id: \"stripe-new-subscription-update-airtable\",\n\n26\n\n  name: \"On new Stripe subscription update Airtable\",\n\n32\n\n  trigger: stripe.onCustomerSubscription(),\n\n33\n\n  run: async (payload, io, ctx) \\=> {\n\n34\n\n    // Adding the type to table<YourTableType>(\"<your table name>\")\n\n35\n\n    // gives you nice type inference and errors.\n\n36\n\n    // You can leave it out as well table(\"<your table name>\")\n\n37\n\n    const table \\= io.airtable\n\n38\n\n      .base(\"<your base id>\")\n\n39\n\n      .table<SubscribedUsers\\>(\"<your table name>\");\n\n42\n\n    const newRecords \\= await table.createRecords(\"create records\", \\[\n\n44\n\n        // Check the Stripe documents for object info: https://stripe.com/docs/api/subscriptions/object\n\n47\n\n          interval: payload.items.data\\[0\\].price.recurring?.interval,\n\n48\n\n          currency: payload.items.data\\[0\\].price.currency,\n\n49\n\n          // The unit amount in pence to be charged, represented as a whole integer if possible.\n\n50\n\n          unitAmount: payload.items.data\\[0\\].price.unit\\_amount ?? undefined,\n\n55\n\n    await io.logger.info(\"A new subscription was created.\");"
},
{
  "url": "https://trigger.dev/apis/huggingface",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/huggingface",
    "loadedTime": "2024-03-16T13:40:44.930Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/huggingface",
    "title": "Hugging Face | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Hugging Face | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/huggingface"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { createHash } from \"crypto\";\n4\n// Go to Hugging Face Dashboard > Click on Profile > Settings\n5\n// Go to Webhooks > Add a new webhook\n6\n// Select yourself as the target\n8\n// Add the secret as \"Test\" (for example)\n9\n// Create a model from the dashboard to trigger the webhook\n10\nconst huggingFace = client.defineHttpEndpoint({\n12\nsource: \"huggingface.co\",\n14\nverify: async (request) => {\n16\nrequest.headers.get(\"x-webhook-secret\") ===\n17\nprocess.env.HUGGING_FACE_WEBHOOK_SECRET\n19\nreturn { success: true };\n20\nreturn { success: false, reason: \"Webhook Secret Match Failed\" };\n25\nid: \"http-hugging-face\",\n26\nname: \"HTTP Hugging Face\",\n29\ntrigger: huggingFace.onRequest(),\n30\nrun: async (request, io, ctx) => {\n31\nconst body = await request.json();\n32\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { createHash } from \"crypto\";\n\n4\n\n// Go to Hugging Face Dashboard > Click on Profile > Settings\n\n5\n\n// Go to Webhooks > Add a new webhook\n\n6\n\n// Select yourself as the target\n\n8\n\n// Add the secret as \"Test\" (for example)\n\n9\n\n// Create a model from the dashboard to trigger the webhook\n\n10\n\nconst huggingFace \\= client.defineHttpEndpoint({\n\n12\n\n  source: \"huggingface.co\",\n\n14\n\n  verify: async (request) \\=> {\n\n16\n\n      request.headers.get(\"x-webhook-secret\") \\===\n\n17\n\n      process.env.HUGGING\\_FACE\\_WEBHOOK\\_SECRET\n\n19\n\n      return { success: true };\n\n20\n\n    return { success: false, reason: \"Webhook Secret Match Failed\" };\n\n25\n\n  id: \"http-hugging-face\",\n\n26\n\n  name: \"HTTP Hugging Face\",\n\n29\n\n  trigger: huggingFace.onRequest(),\n\n30\n\n  run: async (request, io, ctx) \\=> {\n\n31\n\n    const body \\= await request.json();\n\n32\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/supabase",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/supabase",
    "loadedTime": "2024-03-16T13:40:51.926Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/supabase",
    "title": "Supabase | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Supabase | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/supabase"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { SupabaseManagement, Supabase } from \"@trigger.dev/supabase\";\n2\nimport { Stripe } from \"@trigger.dev/stripe\";\n3\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n5\nexport const stripe = new Stripe({\n7\napiKey: process.env.STRIPE_API_KEY!,\n10\nconst supabase = new Supabase({\n12\nsupabaseUrl: process.env.SUPABASE_PUBLIC_URL!,\n13\nsupabaseKey: process.env.SUPABASE_SERVICE_ROLE_KEY!,\n16\n// Use OAuth to authenticate with Supabase Management API\n17\nconst supabaseManagement = new SupabaseManagement({\n18\nid: \"supabase-management\",\n21\n// Update a Supabase table when a Stripe account is updated\n23\nid: \"supabase-stripe-update-database\",\n24\nname: \"Supabase: update database when Stripe account is updated\",\n30\ntrigger: stripe.onAccountUpdated({ connect: true }),\n31\nrun: async (payload, io, ctx) => {\n32\nconst stripeAccountId = payload.id;\n33\nconst { payouts_enabled, charges_enabled, details_submitted } = payload;\n35\nconst updatedAt = new Date().toISOString();\n37\nawait io.supabase.runTask(\"update-stripe-account\", async (database) => {\n38\nconst { data, error } = await database\n44\nupdated_at: updatedAt,\n46\n.eq(\"stripe_account_id\", stripeAccountId);\n48\nif (error) throw error;",
  "markdown": "1\n\nimport { SupabaseManagement, Supabase } from \"@trigger.dev/supabase\";\n\n2\n\nimport { Stripe } from \"@trigger.dev/stripe\";\n\n3\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n5\n\nexport const stripe \\= new Stripe({\n\n7\n\n  apiKey: process.env.STRIPE\\_API\\_KEY!,\n\n10\n\nconst supabase \\= new Supabase({\n\n12\n\n  supabaseUrl: process.env.SUPABASE\\_PUBLIC\\_URL!,\n\n13\n\n  supabaseKey: process.env.SUPABASE\\_SERVICE\\_ROLE\\_KEY!,\n\n16\n\n// Use OAuth to authenticate with Supabase Management API\n\n17\n\nconst supabaseManagement \\= new SupabaseManagement({\n\n18\n\n  id: \"supabase-management\",\n\n21\n\n// Update a Supabase table when a Stripe account is updated\n\n23\n\n  id: \"supabase-stripe-update-database\",\n\n24\n\n  name: \"Supabase: update database when Stripe account is updated\",\n\n30\n\n  trigger: stripe.onAccountUpdated({ connect: true }),\n\n31\n\n  run: async (payload, io, ctx) \\=> {\n\n32\n\n    const stripeAccountId \\= payload.id;\n\n33\n\n    const { payouts\\_enabled, charges\\_enabled, details\\_submitted } \\= payload;\n\n35\n\n    const updatedAt \\= new Date().toISOString();\n\n37\n\n    await io.supabase.runTask(\"update-stripe-account\", async (database) \\=> {\n\n38\n\n      const { data, error } \\= await database\n\n44\n\n          updated\\_at: updatedAt,\n\n46\n\n        .eq(\"stripe\\_account\\_id\", stripeAccountId);\n\n48\n\n      if (error) throw error;"
},
{
  "url": "https://trigger.dev/apis/instagram",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/instagram",
    "loadedTime": "2024-03-16T13:40:59.066Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/instagram",
    "title": "Instagram | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Instagram | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/instagram"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n4\n// You need a professional Instagram account that is connected with your facebook business account\n5\n// Get started from here: https://developers.facebook.com/docs/instagram-api/getting-started\n6\n// For permanent token you have to create system user: https://business.facebook.com/settings/system-users\n7\n// You can find your instagram user id from here: https://business.facebook.com/settings/instagram-account-v2s\n9\nuserId: process.env.INSTAGRAM_USER_ID!,\n10\naccessToken: process.env.FACEBOOK_ACCESS_TOKEN!,\n12\nconst endpointURLCreate = `https://graph.facebook.com/v18.0/${token.userId}/media`;\n13\nconst endpointURLPublish = `https://graph.facebook.com/v18.0/${token.userId}/media_publish`;\n17\nname: \"Post on Instagram\",\n19\ntrigger: eventTrigger({\n20\nname: \"post-instagram\",\n22\ncaption: z.string().max(2200), // instagram captions are limited to 2200 characters\n26\nrun: async (payload, io, ctx) => {\n27\n// wrap the SDK call in io.runTask for resumability and log display\n31\n// Publishing a single media post is a two step process,\n32\n// Step 1: Create container\n33\nconst createContainerUrl = `${endpointURLCreate}?image_url=${\n35\n}&caption=${encodeURIComponent(payload.caption)}&access_token=${\n39\nconst containerResponse = await fetch(createContainerUrl, {\n41\n}).then((response) => response.json());\n43\n// Extract container ID\n44\nconst containerId = containerResponse.id;\n46\n// Step 2: Publish container\n47\nconst publishContainerUrl = `${endpointURLPublish}?creation_id=${containerId}&access_token=${token.accessToken}`;\n49\nconst publishResponse = await fetch(publishContainerUrl, {\n51\n}).then((response) => response.json());\n53\nreturn publishResponse;\n56\n// Add metadata to the task to improve the display in the logs\n57\n{ name: \"Post to Instagram\", icon: \"instagram\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n4\n\n// You need a professional Instagram account that is connected with your facebook business account\n\n5\n\n// Get started from here: https://developers.facebook.com/docs/instagram-api/getting-started\n\n6\n\n// For permanent token you have to create system user: https://business.facebook.com/settings/system-users\n\n7\n\n// You can find your instagram user id from here: https://business.facebook.com/settings/instagram-account-v2s\n\n9\n\n  userId: process.env.INSTAGRAM\\_USER\\_ID!,\n\n10\n\n  accessToken: process.env.FACEBOOK\\_ACCESS\\_TOKEN!,\n\n12\n\nconst endpointURLCreate \\= \\`https://graph.facebook.com/v18.0/${token.userId}/media\\`;\n\n13\n\nconst endpointURLPublish \\= \\`https://graph.facebook.com/v18.0/${token.userId}/media\\_publish\\`;\n\n17\n\n  name: \"Post on Instagram\",\n\n19\n\n  trigger: eventTrigger({\n\n20\n\n    name: \"post-instagram\",\n\n22\n\n      caption: z.string().max(2200), // instagram captions are limited to 2200 characters\n\n26\n\n  run: async (payload, io, ctx) \\=> {\n\n27\n\n    // wrap the SDK call in io.runTask for resumability and log display\n\n31\n\n        // Publishing a single media post is a two step process,\n\n32\n\n        // Step 1: Create container\n\n33\n\n        const createContainerUrl \\= \\`${endpointURLCreate}?image\\_url=${\n\n35\n\n        }&caption=${encodeURIComponent(payload.caption)}&access\\_token=${\n\n39\n\n        const containerResponse \\= await fetch(createContainerUrl, {\n\n41\n\n        }).then((response) \\=> response.json());\n\n43\n\n        // Extract container ID\n\n44\n\n        const containerId \\= containerResponse.id;\n\n46\n\n        // Step 2: Publish container\n\n47\n\n        const publishContainerUrl \\= \\`${endpointURLPublish}?creation\\_id=${containerId}&access\\_token=${token.accessToken}\\`;\n\n49\n\n        const publishResponse \\= await fetch(publishContainerUrl, {\n\n51\n\n        }).then((response) \\=> response.json());\n\n53\n\n        return publishResponse;\n\n56\n\n      // Add metadata to the task to improve the display in the logs\n\n57\n\n      { name: \"Post to Instagram\", icon: \"instagram\" }"
},
{
  "url": "https://trigger.dev/apis/svix",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/svix",
    "loadedTime": "2024-03-16T13:41:06.153Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/svix",
    "title": "Svix | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Svix | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/svix"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "2\nimport { Svix } from \"svix\";\n3\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n5\n// Create an access token at https://api.svix.com/docs#section/Introduction/Authentication\n6\n// https://dashboard.svix.com/api-access\n7\nconst svix = new Svix(process.env.SVIX_API_KEY!);\n9\n// Using official Svix sdk, https://github.com/svix/svix-webhooks/tree/main/javascript/\n11\nid: \"create-svix-application\",\n12\nname: \"Create Svix application\",\n14\ntrigger: eventTrigger({\n15\nname: \"create-svix-application\",\n18\nuid: z.string().optional(),\n19\nrateLimit: z.number().optional(),\n20\nmetadata: z.record(z.string(), z.string()).optional(),\n23\nrun: async (payload, io) => {\n27\nconst app = await svix.application.create({\n29\nrateLimit: payload.rateLimit,\n31\nmetadata: payload.metadata,\n36\n// Add metadata to improve how the task displays in the logs\n37\n{ name: \"Create application\", icon: \"svix\" }",
  "markdown": "2\n\nimport { Svix } from \"svix\";\n\n3\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n5\n\n// Create an access token at https://api.svix.com/docs#section/Introduction/Authentication\n\n6\n\n// https://dashboard.svix.com/api-access\n\n7\n\nconst svix \\= new Svix(process.env.SVIX\\_API\\_KEY!);\n\n9\n\n// Using official Svix sdk, https://github.com/svix/svix-webhooks/tree/main/javascript/\n\n11\n\n  id: \"create-svix-application\",\n\n12\n\n  name: \"Create Svix application\",\n\n14\n\n  trigger: eventTrigger({\n\n15\n\n    name: \"create-svix-application\",\n\n18\n\n      uid: z.string().optional(),\n\n19\n\n      rateLimit: z.number().optional(),\n\n20\n\n      metadata: z.record(z.string(), z.string()).optional(),\n\n23\n\n  run: async (payload, io) \\=> {\n\n27\n\n        const app \\= await svix.application.create({\n\n29\n\n          rateLimit: payload.rateLimit,\n\n31\n\n          metadata: payload.metadata,\n\n36\n\n      // Add metadata to improve how the task displays in the logs\n\n37\n\n      { name: \"Create application\", icon: \"svix\" }"
},
{
  "url": "https://trigger.dev/apis/lemonsqueezy",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/lemonsqueezy",
    "loadedTime": "2024-03-16T13:41:13.243Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/lemonsqueezy",
    "title": "Lemon Squeezy | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Lemon Squeezy | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/lemonsqueezy"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "2\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n4\n// The import path here has been updated because of conflict between commonjs and ESmodule\n5\n// when using in proper ESmodule setup you won't have to do this\n6\nimport LemonSqueezy from \"@lemonsqueezy/lemonsqueezy.js/dist/index.cjs\";\n8\n// Get API key from https://docs.lemonsqueezy.com/api#authentication\n9\nconst ls = new LemonSqueezy(process.env.LEMONSQUEEZY_API_KEY!);\n11\n// Using the official SDK; https://github.com/lmsqueezy/lemonsqueezy.js\n13\nid: \"get-lemon-squeezy-store-details\",\n14\nname: \"Get Lemon Squeezy store details\",\n16\ntrigger: eventTrigger({\n17\nname: \"get-lemon-squeezy-store-details\",\n33\nrun: async (payload, io) => {\n35\n\"Get Lemon Squeezy store details\",\n37\nconst store = await ls.getStore({\n39\ninclude: payload.include,\n41\n// The return value has to be JSON serializable as it's stored in the database.\n42\nreturn JSON.parse(JSON.stringify(store));\n45\n// Add metadata to improve how the task displays in the logs\n46\n{ name: \"Get Lemon Squeezy store details\", icon: \"lemonSqueezy\" }",
  "markdown": "2\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n4\n\n// The import path here has been updated because of conflict between commonjs and ESmodule\n\n5\n\n// when using in proper ESmodule setup you won't have to do this\n\n6\n\nimport LemonSqueezy from \"@lemonsqueezy/lemonsqueezy.js/dist/index.cjs\";\n\n8\n\n// Get API key from https://docs.lemonsqueezy.com/api#authentication\n\n9\n\nconst ls \\= new LemonSqueezy(process.env.LEMONSQUEEZY\\_API\\_KEY!);\n\n11\n\n// Using the official SDK; https://github.com/lmsqueezy/lemonsqueezy.js\n\n13\n\n  id: \"get-lemon-squeezy-store-details\",\n\n14\n\n  name: \"Get Lemon Squeezy store details\",\n\n16\n\n  trigger: eventTrigger({\n\n17\n\n    name: \"get-lemon-squeezy-store-details\",\n\n33\n\n  run: async (payload, io) \\=> {\n\n35\n\n      \"Get Lemon Squeezy store details\",\n\n37\n\n        const store \\= await ls.getStore({\n\n39\n\n          include: payload.include,\n\n41\n\n        // The return value has to be JSON serializable as it's stored in the database.\n\n42\n\n        return JSON.parse(JSON.stringify(store));\n\n45\n\n      // Add metadata to improve how the task displays in the logs\n\n46\n\n      { name: \"Get Lemon Squeezy store details\", icon: \"lemonSqueezy\" }"
},
{
  "url": "https://trigger.dev/apis/todoist",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/todoist",
    "loadedTime": "2024-03-16T13:41:15.947Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/todoist",
    "title": "Todoist | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Todoist | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/todoist"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { z } from \"zod\";\n3\nimport { TodoistApi } from \"@doist/todoist-api-typescript\";\n5\n// https://developer.todoist.com/rest/v2/?javascript#getting-started\n6\n// find your api reference https://todoist.com/help/articles/find-your-api-token-Jpzx9IIlB\n7\nconst todoistClientApi = new TodoistApi(process.env.TODOIST_API_TOKEN!);\n10\nid: \"todoist-add-new-project\",\n11\nname: \"Todoist add new project\",\n13\ntrigger: eventTrigger({\n14\nname: \"todoist.add.project\",\n16\nname: z.string(), // name of the project\n20\nrun: async (payload, io, ctx) => {\n21\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n22\nconst user = await io.runTask(\n25\nreturn await todoistClientApi.addProject({ name: payload.name });\n28\n// Add metadata to improve how the task displays in the logs\n29\n{ name: \"Add Todoist project\", icon: \"todoist\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { z } from \"zod\";\n\n3\n\nimport { TodoistApi } from \"@doist/todoist-api-typescript\";\n\n5\n\n// https://developer.todoist.com/rest/v2/?javascript#getting-started\n\n6\n\n// find your api reference https://todoist.com/help/articles/find-your-api-token-Jpzx9IIlB\n\n7\n\nconst todoistClientApi \\= new TodoistApi(process.env.TODOIST\\_API\\_TOKEN!);\n\n10\n\n  id: \"todoist-add-new-project\",\n\n11\n\n  name: \"Todoist add new project\",\n\n13\n\n  trigger: eventTrigger({\n\n14\n\n    name: \"todoist.add.project\",\n\n16\n\n      name: z.string(), // name of the project\n\n20\n\n  run: async (payload, io, ctx) \\=> {\n\n21\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n22\n\n    const user \\= await io.runTask(\n\n25\n\n        return await todoistClientApi.addProject({ name: payload.name });\n\n28\n\n      // Add metadata to improve how the task displays in the logs\n\n29\n\n      { name: \"Add Todoist project\", icon: \"todoist\" }"
},
{
  "url": "https://trigger.dev/apis/linear",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/linear",
    "loadedTime": "2024-03-16T13:41:24.361Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/linear",
    "title": "Linear | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Linear | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/linear"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Github, events } from \"@trigger.dev/github\";\n3\nimport { Linear } from \"@trigger.dev/linear\";\n4\nimport { Slack } from \"@trigger.dev/slack\";\n6\nconst linear = new Linear({\n8\napiKey: process.env.LINEAR_API_KEY!,\n10\nconst slack = new Slack({ id: \"slack\" });\n12\nconst github = new Github({ id: \"github\" });\n15\nid: \"linear-create-issue-on-github-pr\",\n16\nname: \"Create a Linear issue when a pull request is opened on a GitHub repo\",\n18\ntrigger: github.triggers.repo({\n19\nevent: events.onPullRequest,\n20\nowner: \"<your-org-name>\",\n21\nrepo: \"<your-repo-name>\",\n28\nrun: async (payload, io, ctx) => {\n29\nconst pullRequestTitle = payload.pull_request.title;\n30\nconst pullRequestURL = payload.pull_request.issue_url;\n31\nconst pullRequestAuthorURL = payload.sender.html_url;\n32\nconst pullRequestDescription = payload.pull_request.body;\n34\nconst issue = await io.linear.createIssue(\"create issue\", {\n35\ntitle: pullRequestTitle,\n36\ndescription: pullRequestDescription,\n37\n// To get your Team id from within Linear, hit CMD+K and \"Copy model UUID\"\n38\nteamId: \"<your-team-uuid>\",\n41\nawait io.slack.postMessage(\"post message\", {\n42\n// Set the Slack channel ID (not name) in your environment variables\n43\nchannel: process.env.SLACK_CHANNEL_ID!,\n44\ntext: `⚡️ New pull request, \"${pullRequestTitle}\", ${pullRequestURL},\n45\n\\n created by 👨‍💻 \"${pullRequestAuthorURL}\"\n46\n\\n New issue has been created in Linear: ${issue?.url}.`,",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Github, events } from \"@trigger.dev/github\";\n\n3\n\nimport { Linear } from \"@trigger.dev/linear\";\n\n4\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n6\n\nconst linear \\= new Linear({\n\n8\n\n  apiKey: process.env.LINEAR\\_API\\_KEY!,\n\n10\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n12\n\nconst github \\= new Github({ id: \"github\" });\n\n15\n\n  id: \"linear-create-issue-on-github-pr\",\n\n16\n\n  name: \"Create a Linear issue when a pull request is opened on a GitHub repo\",\n\n18\n\n  trigger: github.triggers.repo({\n\n19\n\n    event: events.onPullRequest,\n\n20\n\n    owner: \"<your-org-name>\",\n\n21\n\n    repo: \"<your-repo-name>\",\n\n28\n\n  run: async (payload, io, ctx) \\=> {\n\n29\n\n    const pullRequestTitle \\= payload.pull\\_request.title;\n\n30\n\n    const pullRequestURL \\= payload.pull\\_request.issue\\_url;\n\n31\n\n    const pullRequestAuthorURL \\= payload.sender.html\\_url;\n\n32\n\n    const pullRequestDescription \\= payload.pull\\_request.body;\n\n34\n\n    const issue \\= await io.linear.createIssue(\"create issue\", {\n\n35\n\n      title: pullRequestTitle,\n\n36\n\n      description: pullRequestDescription,\n\n37\n\n      // To get your Team id from within Linear, hit CMD+K and \"Copy model UUID\"\n\n38\n\n      teamId: \"<your-team-uuid>\",\n\n41\n\n    await io.slack.postMessage(\"post message\", {\n\n42\n\n      // Set the Slack channel ID (not name) in your environment variables\n\n43\n\n      channel: process.env.SLACK\\_CHANNEL\\_ID!,\n\n44\n\n      text: \\`⚡️ New pull request, \"${pullRequestTitle}\", ${pullRequestURL},\n\n45\n\n            \\\\n created by 👨‍💻 \"${pullRequestAuthorURL}\"\n\n46\n\n            \\\\n New issue has been created in Linear: ${issue?.url}.\\`,"
},
{
  "url": "https://trigger.dev/apis/twilio",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/twilio",
    "loadedTime": "2024-03-16T13:41:25.417Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/twilio",
    "title": "Twilio | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Twilio | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/twilio"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport twilio from \"twilio\";\n2\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n7\n// Initialize the Twilio instance\n8\n// Twilio SDK https://github.com/twilio/twilio-node\n9\n// Your AccountSID and Auth Token from console.twilio.com\n10\n// https://www.twilio.com/docs/sms/quickstart/node\n11\nconst twilioClient = twilio(\n12\nprocess.env.TWILIO_ACCOUNT_SID,\n13\nprocess.env.TWILIO_AUTH_TOKEN\n17\nid: \"twilio-send-message\",\n18\nname: \"Twilio send message\",\n20\ntrigger: eventTrigger({\n21\nname: \"twilio-send-message\",\n23\n// 'from' is Your Twilio phone number.\n24\n// Adding 'whatsapp:' before the number will send a WhatsApp message.\n25\n// https://console.twilio.com/us1/develop/sms/try-it-out/whatsapp-learn\n27\nto: z.string(), // The phone number you want to send the message.\n28\nbody: z.string(), // The message body\n31\nrun: async (payload, io, ctx) => {\n32\nconst { from, to, body } = payload;\n34\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n36\n\"Twilio send message\",\n38\nawait twilioClient.messages.create({ from, to, body });\n41\n// Add metadata to improve how the task displays in the logs\n42\n{ name: \"Twilio send message\", icon: \"twilio\" }",
  "markdown": "1\n\nimport twilio from \"twilio\";\n\n2\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n7\n\n// Initialize the Twilio instance\n\n8\n\n// Twilio SDK https://github.com/twilio/twilio-node\n\n9\n\n// Your AccountSID and Auth Token from console.twilio.com\n\n10\n\n// https://www.twilio.com/docs/sms/quickstart/node\n\n11\n\nconst twilioClient \\= twilio(\n\n12\n\n  process.env.TWILIO\\_ACCOUNT\\_SID,\n\n13\n\n  process.env.TWILIO\\_AUTH\\_TOKEN\n\n17\n\n  id: \"twilio-send-message\",\n\n18\n\n  name: \"Twilio send message\",\n\n20\n\n  trigger: eventTrigger({\n\n21\n\n    name: \"twilio-send-message\",\n\n23\n\n      // 'from' is Your Twilio phone number.\n\n24\n\n      // Adding 'whatsapp:' before the number will send a WhatsApp message.\n\n25\n\n      // https://console.twilio.com/us1/develop/sms/try-it-out/whatsapp-learn\n\n27\n\n      to: z.string(), // The phone number you want to send the message.\n\n28\n\n      body: z.string(), // The message body\n\n31\n\n  run: async (payload, io, ctx) \\=> {\n\n32\n\n    const { from, to, body } \\= payload;\n\n34\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n36\n\n      \"Twilio send message\",\n\n38\n\n        await twilioClient.messages.create({ from, to, body });\n\n41\n\n      // Add metadata to improve how the task displays in the logs\n\n42\n\n      { name: \"Twilio send message\", icon: \"twilio\" }"
},
{
  "url": "https://trigger.dev/apis/typeform",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/typeform",
    "loadedTime": "2024-03-16T13:41:35.021Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/typeform",
    "title": "Typeform | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Typeform | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/typeform"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Airtable } from \"@trigger.dev/airtable\";\n3\nimport { Typeform } from \"@trigger.dev/typeform\";\n5\nconst typeform = new Typeform({\n7\ntoken: process.env.TYPEFORM_TOKEN!,\n10\nconst airtable = new Airtable({\n12\ntoken: process.env.AIRTABLE_TOKEN!,\n15\n//this is the type definition for the table\n20\nemailContactEnabled: boolean;\n23\n// This job populates an Airtable table when a new submission is created in Typeform\n25\nid: \"typeform-new-submission-update-airtable\",\n26\nname: \"On new Typeform submission update Airtable\",\n32\ntrigger: typeform.onFormResponse({\n33\n// to get uid & tag instructions can be found here:\n34\n// https://trigger.dev/docs/integrations/apis/typeform#get-notified-of-new-form-responses\n35\nuid: \"<your-form-id>\",\n38\nrun: async (payload, io, ctx) => {\n39\n// You can get your base-id and table-name from airtable\n40\nconst table = io.airtable\n41\n.base(\"<your-base-id>\")\n42\n.table<Submission>(\"<your-table-name>\");\n44\nif (payload.form_response.answers[0].type !== \"text\") {\n45\nthrow new Error(\"The first answer is not a name\");\n47\nconst name = payload.form_response.answers[0].text;\n49\nif (payload.form_response.answers[1].type !== \"email\") {\n50\nthrow new Error(\"The second answer is not an email\");\n52\nconst email = payload.form_response.answers[1].email;\n54\nif (payload.form_response.answers[2].type !== \"choice\") {\n55\nthrow new Error(\"The third answer is not a choice\");\n57\nconst emailContactEnabled =\n58\npayload.form_response.answers[2].choice.label === \"Yes\";\n61\nconst newRecords = await table.createRecords(\"create records\", [\n72\nawait io.logger.info(\"A new form submission was created.\", {",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Airtable } from \"@trigger.dev/airtable\";\n\n3\n\nimport { Typeform } from \"@trigger.dev/typeform\";\n\n5\n\nconst typeform \\= new Typeform({\n\n7\n\n  token: process.env.TYPEFORM\\_TOKEN!,\n\n10\n\nconst airtable \\= new Airtable({\n\n12\n\n  token: process.env.AIRTABLE\\_TOKEN!,\n\n15\n\n//this is the type definition for the table\n\n20\n\n  emailContactEnabled: boolean;\n\n23\n\n// This job populates an Airtable table when a new submission is created in Typeform\n\n25\n\n  id: \"typeform-new-submission-update-airtable\",\n\n26\n\n  name: \"On new Typeform submission update Airtable\",\n\n32\n\n  trigger: typeform.onFormResponse({\n\n33\n\n    // to get uid & tag instructions can be found here:\n\n34\n\n    // https://trigger.dev/docs/integrations/apis/typeform#get-notified-of-new-form-responses\n\n35\n\n    uid: \"<your-form-id>\",\n\n38\n\n  run: async (payload, io, ctx) \\=> {\n\n39\n\n    // You can get your base-id and table-name from airtable\n\n40\n\n    const table \\= io.airtable\n\n41\n\n      .base(\"<your-base-id>\")\n\n42\n\n      .table<Submission\\>(\"<your-table-name>\");\n\n44\n\n    if (payload.form\\_response.answers\\[0\\].type !== \"text\") {\n\n45\n\n      throw new Error(\"The first answer is not a name\");\n\n47\n\n    const name \\= payload.form\\_response.answers\\[0\\].text;\n\n49\n\n    if (payload.form\\_response.answers\\[1\\].type !== \"email\") {\n\n50\n\n      throw new Error(\"The second answer is not an email\");\n\n52\n\n    const email \\= payload.form\\_response.answers\\[1\\].email;\n\n54\n\n    if (payload.form\\_response.answers\\[2\\].type !== \"choice\") {\n\n55\n\n      throw new Error(\"The third answer is not a choice\");\n\n57\n\n    const emailContactEnabled \\=\n\n58\n\n      payload.form\\_response.answers\\[2\\].choice.label \\=== \"Yes\";\n\n61\n\n    const newRecords \\= await table.createRecords(\"create records\", \\[\n\n72\n\n    await io.logger.info(\"A new form submission was created.\", {"
},
{
  "url": "https://trigger.dev/apis/loops",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/loops",
    "loadedTime": "2024-03-16T13:41:35.140Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/loops",
    "title": "Loops | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Loops | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/loops"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n4\n// Replace this URL with the actual API endpoint you want to call in Loops\n5\nconst endpointURL = `${process.env.LOOPS_BASE_URL}/contacts/create`;\n7\n// Create request options\n8\nconst requestOptions: RequestInit = {\n11\n\"Content-Type\": \"application/json\",\n12\n// To create an API key for Loops, go to the API settings in your account,\n13\n// generate a new key and set permissions: https://loops.so/docs/api\n14\nAuthorization: `Bearer ${process.env.LOOPS_API_KEY}`,\n19\nid: \"loops-create-contract\",\n20\nname: \"Loops create contract\",\n22\ntrigger: eventTrigger({\n23\nname: \"loops-create-contract\",\n26\nfirstName: z.string(),\n28\nfavoriteColor: z.string(),\n29\nuserGroup: z.string(),\n33\nrun: async (payload, io, ctx) => {\n34\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n36\n\"loops create contact\",\n38\nconst response = await fetch(endpointURL, {\n40\nbody: JSON.stringify(payload),\n43\nreturn await response.json();\n46\n// Add metadata to improve how the task displays in the logs\n47\n{ name: \"loops create contract\", icon: \"loops\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n4\n\n// Replace this URL with the actual API endpoint you want to call in Loops\n\n5\n\nconst endpointURL \\= \\`${process.env.LOOPS\\_BASE\\_URL}/contacts/create\\`;\n\n7\n\n// Create request options\n\n8\n\nconst requestOptions: RequestInit \\= {\n\n11\n\n    \"Content-Type\": \"application/json\",\n\n12\n\n    // To create an API key for Loops, go to the API settings in your account,\n\n13\n\n    // generate a new key and set permissions: https://loops.so/docs/api\n\n14\n\n    Authorization: \\`Bearer ${process.env.LOOPS\\_API\\_KEY}\\`,\n\n19\n\n  id: \"loops-create-contract\",\n\n20\n\n  name: \"Loops create contract\",\n\n22\n\n  trigger: eventTrigger({\n\n23\n\n    name: \"loops-create-contract\",\n\n26\n\n      firstName: z.string(),\n\n28\n\n      favoriteColor: z.string(),\n\n29\n\n      userGroup: z.string(),\n\n33\n\n  run: async (payload, io, ctx) \\=> {\n\n34\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n36\n\n      \"loops create contact\",\n\n38\n\n        const response \\= await fetch(endpointURL, {\n\n40\n\n          body: JSON.stringify(payload),\n\n43\n\n        return await response.json();\n\n46\n\n      // Add metadata to improve how the task displays in the logs\n\n47\n\n      { name: \"loops create contract\", icon: \"loops\" }"
},
{
  "url": "https://trigger.dev/apis/mailgun",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/mailgun",
    "loadedTime": "2024-03-16T13:41:45.173Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/mailgun",
    "title": "Mailgun | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Mailgun | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/mailgun"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { createHmac } from \"crypto\";\n4\n// Go to your normal Mailgun account\n5\n// Create a private app in Sending > Webhooks\n6\n// With scope: Delivered\n7\n// And add your trigger webhooks url in target url\n8\n// Obtain the Webhook Key on the right of your window\n10\n// Create an HTTP Endpoint, with the Mailgun details\n11\nconst mailgun = client.defineHttpEndpoint({\n13\nsource: \"mailgun.com\",\n15\nverify: async (request) => {\n16\nconst body = await request.json();\n17\nconst { timestamp, token, signature } = body.signature;\n18\nconst mailgunKey = process.env.MAILGUN_WEBHOOK_SIGNING_KEY;\n20\nreturn { success: false, reason: \"Missing mailgun webhook signing key\" };\n21\nif (!timestamp || !token)\n24\nreason: \"Missing signature fields in request body\",\n26\nconst hash = createHmac(\"sha256\", mailgunKey)\n27\n.update(timestamp + token)\n29\nconst success = hash === signature;\n30\nif (success) return { success };\n31\nreturn { success: false, reason: \"Failed sha256 verification\" };\n35\n// Job that runs when the HTTP endpoint is called from Mailgun when an email is sent\n41\n// Create a trigger from the HTTP endpoint\n42\ntrigger: mailgun.onRequest(),\n43\nrun: async (request, io, ctx) => {\n44\nconst body = await request.json();\n45\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { createHmac } from \"crypto\";\n\n4\n\n// Go to your normal Mailgun account\n\n5\n\n// Create a private app in Sending > Webhooks\n\n6\n\n// With scope: Delivered\n\n7\n\n// And add your trigger webhooks url in target url\n\n8\n\n// Obtain the Webhook Key on the right of your window\n\n10\n\n// Create an HTTP Endpoint, with the Mailgun details\n\n11\n\nconst mailgun \\= client.defineHttpEndpoint({\n\n13\n\n  source: \"mailgun.com\",\n\n15\n\n  verify: async (request) \\=> {\n\n16\n\n    const body \\= await request.json();\n\n17\n\n    const { timestamp, token, signature } \\= body.signature;\n\n18\n\n    const mailgunKey \\= process.env.MAILGUN\\_WEBHOOK\\_SIGNING\\_KEY;\n\n20\n\n      return { success: false, reason: \"Missing mailgun webhook signing key\" };\n\n21\n\n    if (!timestamp || !token)\n\n24\n\n        reason: \"Missing signature fields in request body\",\n\n26\n\n    const hash \\= createHmac(\"sha256\", mailgunKey)\n\n27\n\n      .update(timestamp + token)\n\n29\n\n    const success \\= hash \\=== signature;\n\n30\n\n    if (success) return { success };\n\n31\n\n    return { success: false, reason: \"Failed sha256 verification\" };\n\n35\n\n// Job that runs when the HTTP endpoint is called from Mailgun when an email is sent\n\n41\n\n  // Create a trigger from the HTTP endpoint\n\n42\n\n  trigger: mailgun.onRequest(),\n\n43\n\n  run: async (request, io, ctx) \\=> {\n\n44\n\n    const body \\= await request.json();\n\n45\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/whatsapp",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/whatsapp",
    "loadedTime": "2024-03-16T13:41:45.855Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/whatsapp",
    "title": "WhatsApp | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "WhatsApp | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/whatsapp"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, verifyRequestSignature } from \"@trigger.dev/sdk\";\n4\nconst whatsApp = client.defineHttpEndpoint({\n6\nsource: \"whatsapp.com\",\n8\n// This is only needed for certain APIs like WhatsApp which don't setup the webhook until you pass the test\n10\n// Don't trigger runs if they match this filter\n11\nskipTriggeringRuns: true,\n15\n\"hub.mode\": [{ $startsWith: \"sub\" }],\n18\nhandler: async (request, verify) => {\n19\nconst searchParams = new URL(request.url).searchParams;\n21\nsearchParams.get(\"hub.verify_token\") !==\n22\nprocess.env.WHATSAPP_WEBHOOK_SECRET\n24\nreturn new Response(\"Unauthorized\", { status: 401 });\n26\nreturn new Response(searchParams.get(\"hub.challenge\") ?? \"OK\", {\n31\nverify: async (request) => {\n32\nreturn await verifyRequestSignature({\n34\nheaderName: \"x-hub-signature-256\",\n35\nsecret: process.env.WHATSAPP_APP_SECRET!,\n44\nname: \"HTTP WhatsApp\",\n47\ntrigger: whatsApp.onRequest(),\n48\nrun: async (request, io, ctx) => {\n49\nconst body = await request.json();\n50\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient, verifyRequestSignature } from \"@trigger.dev/sdk\";\n\n4\n\nconst whatsApp \\= client.defineHttpEndpoint({\n\n6\n\n  source: \"whatsapp.com\",\n\n8\n\n  // This is only needed for certain APIs like WhatsApp which don't setup the webhook until you pass the test\n\n10\n\n    // Don't trigger runs if they match this filter\n\n11\n\n    skipTriggeringRuns: true,\n\n15\n\n        \"hub.mode\": \\[{ $startsWith: \"sub\" }\\],\n\n18\n\n    handler: async (request, verify) \\=> {\n\n19\n\n      const searchParams \\= new URL(request.url).searchParams;\n\n21\n\n        searchParams.get(\"hub.verify\\_token\") !==\n\n22\n\n        process.env.WHATSAPP\\_WEBHOOK\\_SECRET\n\n24\n\n        return new Response(\"Unauthorized\", { status: 401 });\n\n26\n\n      return new Response(searchParams.get(\"hub.challenge\") ?? \"OK\", {\n\n31\n\n  verify: async (request) \\=> {\n\n32\n\n    return await verifyRequestSignature({\n\n34\n\n      headerName: \"x-hub-signature-256\",\n\n35\n\n      secret: process.env.WHATSAPP\\_APP\\_SECRET!,\n\n44\n\n  name: \"HTTP WhatsApp\",\n\n47\n\n  trigger: whatsApp.onRequest(),\n\n48\n\n  run: async (request, io, ctx) \\=> {\n\n49\n\n    const body \\= await request.json();\n\n50\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/microsoftazure",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/microsoftazure",
    "loadedTime": "2024-03-16T13:41:55.554Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/microsoftazure",
    "title": "Microsoft Azure | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Microsoft Azure | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/microsoftazure"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { parse } from \"url\";\n5\n// https://learn.microsoft.com/en-us/azure/azure-monitor/alerts/activity-log-alerts-webhook\n6\n// https://learn.microsoft.com/en-us/azure/service-health/service-health-alert-webhook-guide\n9\n// Goto Azure Monitor > Alerts > Create Action Group\n10\n// Fill up Basics with any data. In Actions, select Webhook and add the trigger endpoint with secret query param. Example: https://<Endpoint>?secret=123 then review and create.\n11\n// Goto Alerts Action groups and select the action group you created and click on the text action group. Select any sample type and test.\n13\n// Create an HTTP Endpoint, with the azure details\n14\nconst azure = client.defineHttpEndpoint({\n19\nverify: async (request) => {\n20\nconst { query } = parse(request.url, true);\n21\nif (query.secret === process.env.AZURE_WEBHOOK_SECRET) {\n22\nreturn { success: true };\n24\nreturn { success: false, message: \"Verification failed\" };\n28\n// A job that runs when the HTTP endpoint is called from Azure Monitoring Alerts\n34\n// Create a trigger from the HTTP endpoint\n35\ntrigger: azure.onRequest(),\n36\nrun: async (request, io, ctx) => {\n37\nconst body = await request.json();\n38\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { parse } from \"url\";\n\n5\n\n// https://learn.microsoft.com/en-us/azure/azure-monitor/alerts/activity-log-alerts-webhook\n\n6\n\n// https://learn.microsoft.com/en-us/azure/service-health/service-health-alert-webhook-guide\n\n9\n\n// Goto Azure Monitor > Alerts > Create Action Group\n\n10\n\n// Fill up Basics with any data. In Actions, select Webhook and add the trigger endpoint with secret query param. Example: https://<Endpoint>?secret=123 then review and create.\n\n11\n\n// Goto Alerts Action groups and select the action group you created and click on the text action group. Select any sample type and test.\n\n13\n\n// Create an HTTP Endpoint, with the azure details\n\n14\n\nconst azure \\= client.defineHttpEndpoint({\n\n19\n\n  verify: async (request) \\=> {\n\n20\n\n    const { query } \\= parse(request.url, true);\n\n21\n\n    if (query.secret \\=== process.env.AZURE\\_WEBHOOK\\_SECRET) {\n\n22\n\n      return { success: true };\n\n24\n\n    return { success: false, message: \"Verification failed\" };\n\n28\n\n// A job that runs when the HTTP endpoint is called from Azure Monitoring Alerts\n\n34\n\n  // Create a trigger from the HTTP endpoint\n\n35\n\n  trigger: azure.onRequest(),\n\n36\n\n  run: async (request, io, ctx) \\=> {\n\n37\n\n    const body \\= await request.json();\n\n38\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/x",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/x",
    "loadedTime": "2024-03-16T13:41:55.643Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/x",
    "title": "X (Twitter) | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "X (Twitter) | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/x"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n3\nimport { createHmac } from \"crypto\";\n4\nimport OAuth from \"oauth-1.0a\";\n7\n// https://developer.twitter.com/en/docs/twitter-api/getting-started/getting-access-to-the-twitter-api\n8\nconst endpointURL = \"https://api.twitter.com/2/tweets\";\n10\nkey: process.env.X_ACCESS_TOKEN!,\n11\nsecret: process.env.X_ACCESS_TOKEN_SECRET!,\n15\nconst oauth = new OAuth({\n17\nkey: process.env.X_CONSUMER_KEY!,\n18\nsecret: process.env.X_CONSUMER_SECRET!,\n20\nsignature_method: \"HMAC-SHA1\",\n21\nhash_function: (baseString: string, key: string) =>\n22\ncreateHmac(\"sha1\", key).update(baseString).digest(\"base64\"),\n25\n// Create an authorization header\n26\nconst authHeader = oauth.toHeader(\n27\noauth.authorize({ url: endpointURL, method: \"POST\" }, token)\n30\n// Create request options\n31\nconst requestOptions: RequestInit = {\n34\nAuthorization: authHeader[\"Authorization\"],\n35\n\"user-agent\": \"v2CreateTweetJS\",\n36\n\"content-type\": \"application/json\",\n37\naccept: \"application/json\",\n45\ntrigger: eventTrigger({\n48\ntext: z.string().max(280), // Tweets are limited to 280 characters\n51\nrun: async (payload, io, ctx) => {\n52\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n56\n// Make request using Fetch API\n57\nreturn await fetch(endpointURL, {\n59\nbody: JSON.stringify(payload),\n60\n}).then((response) => response.json());\n63\n// Add metadata to improve how the task displays in the logs\n64\n{ name: \"Tweet X\", icon: \"twitter\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n3\n\nimport { createHmac } from \"crypto\";\n\n4\n\nimport OAuth from \"oauth-1.0a\";\n\n7\n\n// https://developer.twitter.com/en/docs/twitter-api/getting-started/getting-access-to-the-twitter-api\n\n8\n\nconst endpointURL \\= \"https://api.twitter.com/2/tweets\";\n\n10\n\n  key: process.env.X\\_ACCESS\\_TOKEN!,\n\n11\n\n  secret: process.env.X\\_ACCESS\\_TOKEN\\_SECRET!,\n\n15\n\nconst oauth \\= new OAuth({\n\n17\n\n    key: process.env.X\\_CONSUMER\\_KEY!,\n\n18\n\n    secret: process.env.X\\_CONSUMER\\_SECRET!,\n\n20\n\n  signature\\_method: \"HMAC-SHA1\",\n\n21\n\n  hash\\_function: (baseString: string, key: string) \\=>\n\n22\n\n    createHmac(\"sha1\", key).update(baseString).digest(\"base64\"),\n\n25\n\n// Create an authorization header\n\n26\n\nconst authHeader \\= oauth.toHeader(\n\n27\n\n  oauth.authorize({ url: endpointURL, method: \"POST\" }, token)\n\n30\n\n// Create request options\n\n31\n\nconst requestOptions: RequestInit \\= {\n\n34\n\n    Authorization: authHeader\\[\"Authorization\"\\],\n\n35\n\n    \"user-agent\": \"v2CreateTweetJS\",\n\n36\n\n    \"content-type\": \"application/json\",\n\n37\n\n    accept: \"application/json\",\n\n45\n\n  trigger: eventTrigger({\n\n48\n\n      text: z.string().max(280), // Tweets are limited to 280 characters\n\n51\n\n  run: async (payload, io, ctx) \\=> {\n\n52\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n56\n\n        // Make request using Fetch API\n\n57\n\n        return await fetch(endpointURL, {\n\n59\n\n          body: JSON.stringify(payload),\n\n60\n\n        }).then((response) \\=> response.json());\n\n63\n\n      // Add metadata to improve how the task displays in the logs\n\n64\n\n      { name: \"Tweet X\", icon: \"twitter\" }"
},
{
  "url": "https://trigger.dev/apis/youtube",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/youtube",
    "loadedTime": "2024-03-16T13:42:04.836Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/youtube",
    "title": "YouTube | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "YouTube | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/youtube"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { google } from \"googleapis\";\n5\n// Get your API key here: https://console.developers.google.com/apis/credentials\n6\n// Make sure to enable the YouTube Data API v3 https://console.cloud.google.com/apis/library/youtube.googleapis.com\n7\n// SDK Docs: https://developers.google.com/youtube/v3/quickstart/nodejs\n8\n// Initialize the YouTube API with your API key\n9\nconst youtube = google.youtube({\n11\nauth: process.env.YOUTUBE_API_KEY,\n15\nid: \"youtube-api-search\",\n16\nname: \"YouTube API Search\",\n18\ntrigger: eventTrigger({\n19\nname: \"youtube-search\",\n22\nmaxResults: z.number().optional(),\n25\nrun: async (payload, io, ctx) => {\n26\nconst { q, maxResults } = payload;\n28\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n32\nconst searchResponse = await youtube.search.list({\n34\nmaxResults: maxResults || 10, // Default to 10 results if not provided\n39\n// Process the search results here\n40\nreturn JSON.parse(JSON.stringify(searchResponse.data));\n43\n// Add metadata to improve how the task displays in the logs\n44\n{ name: \"YouTube API Search\", icon: \"youtube\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { google } from \"googleapis\";\n\n5\n\n// Get your API key here: https://console.developers.google.com/apis/credentials\n\n6\n\n// Make sure to enable the YouTube Data API v3 https://console.cloud.google.com/apis/library/youtube.googleapis.com\n\n7\n\n// SDK Docs: https://developers.google.com/youtube/v3/quickstart/nodejs\n\n8\n\n// Initialize the YouTube API with your API key\n\n9\n\nconst youtube \\= google.youtube({\n\n11\n\n  auth: process.env.YOUTUBE\\_API\\_KEY,\n\n15\n\n  id: \"youtube-api-search\",\n\n16\n\n  name: \"YouTube API Search\",\n\n18\n\n  trigger: eventTrigger({\n\n19\n\n    name: \"youtube-search\",\n\n22\n\n      maxResults: z.number().optional(),\n\n25\n\n  run: async (payload, io, ctx) \\=> {\n\n26\n\n    const { q, maxResults } \\= payload;\n\n28\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n32\n\n        const searchResponse \\= await youtube.search.list({\n\n34\n\n          maxResults: maxResults || 10, // Default to 10 results if not provided\n\n39\n\n        // Process the search results here\n\n40\n\n        return JSON.parse(JSON.stringify(searchResponse.data));\n\n43\n\n      // Add metadata to improve how the task displays in the logs\n\n44\n\n      { name: \"YouTube API Search\", icon: \"youtube\" }"
},
{
  "url": "https://trigger.dev/apis/zapier",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/zapier",
    "loadedTime": "2024-03-16T13:42:05.131Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/zapier",
    "title": "Zapier | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Zapier | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/zapier"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n3\n// Create a workflow in Zapier\n4\n// Select Webhooks by Zapier\n6\n// By default, no auth is added, hence look for user-agent: Zapier\n7\n// Add basic auth by piping the username|password\n8\n// Now, look for the authorization header\n9\nconst zapier = client.defineHttpEndpoint({\n13\nverify: async (request) => {\n14\nconst secret = process.env.ZAPIER_TRIGGER_SECRET;\n18\nreason: \"The Zapier secret needs to be set in the environment.\",\n21\nif (secret !== request.headers.get(\"x-trigger-secret\")) {\n24\nreason: \"The secret does not match.\",\n27\nreturn { success: true };\n36\ntrigger: zapier.onRequest(),\n37\nrun: async (request, io, ctx) => {\n38\nconst body = await request.json();\n39\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n3\n\n// Create a workflow in Zapier\n\n4\n\n// Select Webhooks by Zapier\n\n6\n\n// By default, no auth is added, hence look for user-agent: Zapier\n\n7\n\n// Add basic auth by piping the username|password\n\n8\n\n// Now, look for the authorization header\n\n9\n\nconst zapier \\= client.defineHttpEndpoint({\n\n13\n\n  verify: async (request) \\=> {\n\n14\n\n    const secret \\= process.env.ZAPIER\\_TRIGGER\\_SECRET;\n\n18\n\n        reason: \"The Zapier secret needs to be set in the environment.\",\n\n21\n\n    if (secret !== request.headers.get(\"x-trigger-secret\")) {\n\n24\n\n        reason: \"The secret does not match.\",\n\n27\n\n    return { success: true };\n\n36\n\n  trigger: zapier.onRequest(),\n\n37\n\n  run: async (request, io, ctx) \\=> {\n\n38\n\n    const body \\= await request.json();\n\n39\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/zbd",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/zbd",
    "loadedTime": "2024-03-16T13:42:12.482Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/zbd",
    "title": "ZBD | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "ZBD | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/zbd"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { z } from \"zod\";\n4\n// This code integrates the ZBD API to facilitate Bitcoin payments to ZBD usernames.\n5\n// To use this integration, you need to create a ZBD project, which provides a unique API key\n6\n// and a Bitcoin Lightning wallet. With this API key, you can programmatically handle Bitcoin\n7\n// transactions, including receiving funds, making payments, and withdrawing Bitcoin.\n8\n// Learn how to create a project: [Create a project](https://zbd.dev/docs/dashboard/projects/create)\n9\n// Detailed instructions for using the API key: [API Key Usage](https://zbd.dev/docs/dashboard/projects/api)\n12\nid: \"pay-to-zbd-username\",\n13\nname: \"Pay BTC to ZBD username\",\n15\ntrigger: eventTrigger({\n16\nname: \"zbd.pay.username\",\n18\namount: z.number(), // The amount for the Payment in millisatoshis\n20\ndescription: z.string().optional(),\n24\nrun: async (payload, io, ctx) => {\n25\n// Wrap any ZBD API call in io.runTask so it's resumable and displays in logs\n27\n\"Send sats to username\",\n32\napikey: process.env.ZBD_API_KEY!,\n33\n\"Content-Type\": \"application/json\",\n35\nbody: `{\"amount\":\"${payload.amount}\",\"gamertag\":\"${payload.gamertag}\",\"description\":\"${payload.description}\"}`,\n38\nconst response = await fetch(\n39\n`${process.env.ZBD_BASE_URL}/v0/gamertag/send-payment`,\n42\nreturn response.json();\n45\n// Add metadata to improve how the task displays in the logs\n46\n{ name: \"Pay BTC to ZBD Username\", icon: \"zbd\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { z } from \"zod\";\n\n4\n\n// This code integrates the ZBD API to facilitate Bitcoin payments to ZBD usernames.\n\n5\n\n// To use this integration, you need to create a ZBD project, which provides a unique API key\n\n6\n\n// and a Bitcoin Lightning wallet. With this API key, you can programmatically handle Bitcoin\n\n7\n\n// transactions, including receiving funds, making payments, and withdrawing Bitcoin.\n\n8\n\n// Learn how to create a project: \\[Create a project\\](https://zbd.dev/docs/dashboard/projects/create)\n\n9\n\n// Detailed instructions for using the API key: \\[API Key Usage\\](https://zbd.dev/docs/dashboard/projects/api)\n\n12\n\n  id: \"pay-to-zbd-username\",\n\n13\n\n  name: \"Pay BTC to ZBD username\",\n\n15\n\n  trigger: eventTrigger({\n\n16\n\n    name: \"zbd.pay.username\",\n\n18\n\n      amount: z.number(), // The amount for the Payment in millisatoshis\n\n20\n\n      description: z.string().optional(),\n\n24\n\n  run: async (payload, io, ctx) \\=> {\n\n25\n\n    // Wrap any ZBD API call in io.runTask so it's resumable and displays in logs\n\n27\n\n      \"Send sats to username\",\n\n32\n\n            apikey: process.env.ZBD\\_API\\_KEY!,\n\n33\n\n            \"Content-Type\": \"application/json\",\n\n35\n\n          body: \\`{\"amount\":\"${payload.amount}\",\"gamertag\":\"${payload.gamertag}\",\"description\":\"${payload.description}\"}\\`,\n\n38\n\n        const response \\= await fetch(\n\n39\n\n          \\`${process.env.ZBD\\_BASE\\_URL}/v0/gamertag/send-payment\\`,\n\n42\n\n        return response.json();\n\n45\n\n      // Add metadata to improve how the task displays in the logs\n\n46\n\n      { name: \"Pay BTC to ZBD Username\", icon: \"zbd\" }"
},
{
  "url": "https://trigger.dev/apis/notion",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/notion",
    "loadedTime": "2024-03-16T13:42:19.124Z",
    "referrerUrl": "https://trigger.dev/apis",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/notion",
    "title": "Notion | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Notion | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/notion"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { Client } from \"@notionhq/client\";\n5\n// API Reference: https://developers.notion.com/reference/intro\n6\n// Create a new integration and access your token at https://www.notion.so/my-integrations\n7\n// The integration needs to be added as a 'connection' to the page\n8\n// Here is how you do it:\n9\n// 1. Click on three dots at the top right corner of your parent notion page\n10\n// 2. Click on 'Add connection' and choose your integration and confirm\n11\n// 3. Now it will have access to page and all the child pages too\n13\nconst notion = new Client({\n14\nauth: process.env.NOTION_TOKEN!,\n18\nid: \"notion-get-page\",\n19\nname: \"Notion Get Page\",\n21\ntrigger: eventTrigger({\n22\nname: \"notion-get-page\",\n24\npageId: z.string(), // The ID of the Notion page\n27\nrun: async (payload, io, ctx) => {\n28\nconst page = await io.runTask(\n31\n// Retrieve the Notion page\n32\nreturn notion.pages.retrieve({ page_id: payload.pageId });\n35\n// Add metadata to improve how the task displays in the logs\n36\n{ name: \"Get page\", icon: \"notion\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Client } from \"@notionhq/client\";\n\n5\n\n// API Reference: https://developers.notion.com/reference/intro\n\n6\n\n// Create a new integration and access your token at https://www.notion.so/my-integrations\n\n7\n\n// The integration needs to be added as a 'connection' to the page\n\n8\n\n// Here is how you do it:\n\n9\n\n// 1. Click on three dots at the top right corner of your parent notion page\n\n10\n\n// 2. Click on 'Add connection' and choose your integration and confirm\n\n11\n\n// 3. Now it will have access to page and all the child pages too\n\n13\n\nconst notion \\= new Client({\n\n14\n\n  auth: process.env.NOTION\\_TOKEN!,\n\n18\n\n  id: \"notion-get-page\",\n\n19\n\n  name: \"Notion Get Page\",\n\n21\n\n  trigger: eventTrigger({\n\n22\n\n    name: \"notion-get-page\",\n\n24\n\n      pageId: z.string(), // The ID of the Notion page\n\n27\n\n  run: async (payload, io, ctx) \\=> {\n\n28\n\n    const page \\= await io.runTask(\n\n31\n\n        // Retrieve the Notion page\n\n32\n\n        return notion.pages.retrieve({ page\\_id: payload.pageId });\n\n35\n\n      // Add metadata to improve how the task displays in the logs\n\n36\n\n      { name: \"Get page\", icon: \"notion\" }"
},
{
  "url": "https://trigger.dev/apis/asana/examples/get-user-details",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/asana/examples/get-user-details",
    "loadedTime": "2024-03-16T13:42:32.725Z",
    "referrerUrl": "https://trigger.dev/apis/asana",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/asana/examples/get-user-details",
    "title": "Asana | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Asana | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/asana"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { z } from \"zod\";\n4\nconst asana = require(\"asana\");\n6\n// Create a personal access token: https://developers.asana.com/docs/personal-access-token\n7\nconst asanaClient = asana.Client.create().useAccessToken(\n8\nprocess.env.ASANA_ACCESS_TOKEN\n13\nname: \"Asana Get User\",\n15\ntrigger: eventTrigger({\n16\nname: \"asana.get.user\",\n18\n// This can either be the string \"me\", an email, or the GID of a user.\n19\n// You can get your user GID by first logging in to Asana in your browser,\n20\n// then visiting https://app.asana.com/api/1.0/users/me.\n25\nrun: async (payload, io, ctx) => {\n26\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n27\nconst user = await io.runTask(\n30\n// This is the regular Asana SDK\n31\nreturn asanaClient.users.getUser(payload.userGid);\n34\n// Add metadata to improve how the task displays in the logs\n35\n{ name: \"Get Asana User\", icon: \"asana\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { z } from \"zod\";\n\n4\n\nconst asana \\= require(\"asana\");\n\n6\n\n// Create a personal access token: https://developers.asana.com/docs/personal-access-token\n\n7\n\nconst asanaClient \\= asana.Client.create().useAccessToken(\n\n8\n\n  process.env.ASANA\\_ACCESS\\_TOKEN\n\n13\n\n  name: \"Asana Get User\",\n\n15\n\n  trigger: eventTrigger({\n\n16\n\n    name: \"asana.get.user\",\n\n18\n\n      // This can either be the string \"me\", an email, or the GID of a user.\n\n19\n\n      // You can get your user GID by first logging in to Asana in your browser,\n\n20\n\n      // then visiting https://app.asana.com/api/1.0/users/me.\n\n25\n\n  run: async (payload, io, ctx) \\=> {\n\n26\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n27\n\n    const user \\= await io.runTask(\n\n30\n\n        // This is the regular Asana SDK\n\n31\n\n        return asanaClient.users.getUser(payload.userGid);\n\n34\n\n      // Add metadata to improve how the task displays in the logs\n\n35\n\n      { name: \"Get Asana User\", icon: \"asana\" }"
},
{
  "url": "https://trigger.dev/apis/asana/examples/asana-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/asana/examples/asana-http-endpoint",
    "loadedTime": "2024-03-16T13:42:32.326Z",
    "referrerUrl": "https://trigger.dev/apis/asana",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/asana/examples/asana-http-endpoint",
    "title": "Asana | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Asana | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/asana"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, verifyRequestSignature } from '@trigger.dev/sdk';\n3\nconst ASANA_SECRET_KEY = 'ASANA_SECRET';\n5\n// Create an HTTP endpoint to listen to Asana webhooks.\n6\n// (This will create the endpoint URL on the `trigger.dev` dashboard)\n7\n// Create a Asana webhook by providing the endpoint URL and interested resources/events.\n8\n// (use https://developers.asana.com/reference/createwebhook)\n9\nconst asana = client.defineHttpEndpoint({\n13\n// This is needed for the initial webhook handshake.\n14\n// https://developers.asana.com/docs/webhooks-guide#the-webhook-handshake\n16\nskipTriggeringRuns: true,\n20\n'x-hook-secret': [{ $startsWith: '' }],\n23\nhandler: async (req, verify) => {\n24\nconst secret = req.headers.get('x-hook-secret');\n27\nreturn new Response('Unauthorized', { status: 401 });\n30\n// Asana sends the Secret (used to sign webhooks) as part of the initial handshake.\n31\n// This is persisted in a KV store on `trigger.dev` (can be retrieved later).\n32\nawait client.store.env.set(ASANA_SECRET_KEY, secret);\n34\nreturn new Response(undefined, {\n37\n'x-hook-secret': secret,\n42\nverify: async request => {\n43\n// Retrive the stored Secret from KV store.\n44\nconst secret = await client.store.env.get<string>(ASANA_SECRET_KEY);\n47\nreturn { success: false, reason: 'secret not found' };\n50\nreturn await verifyRequestSignature({\n52\nheaderName: 'X-Hook-Signature',\n64\n//create a trigger from the HTTP endpoint\n65\ntrigger: asana.onRequest(),\n66\nrun: async (request, io, ctx) => {\n67\nconst body = await request.json();\n68\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient, verifyRequestSignature } from '@trigger.dev/sdk';\n\n3\n\nconst ASANA\\_SECRET\\_KEY \\= 'ASANA\\_SECRET';\n\n5\n\n// Create an HTTP endpoint to listen to Asana webhooks.\n\n6\n\n// (This will create the endpoint URL on the \\`trigger.dev\\` dashboard)\n\n7\n\n// Create a Asana webhook by providing the endpoint URL and interested resources/events.\n\n8\n\n// (use https://developers.asana.com/reference/createwebhook)\n\n9\n\nconst asana \\= client.defineHttpEndpoint({\n\n13\n\n  // This is needed for the initial webhook handshake.\n\n14\n\n  // https://developers.asana.com/docs/webhooks-guide#the-webhook-handshake\n\n16\n\n    skipTriggeringRuns: true,\n\n20\n\n        'x-hook-secret': \\[{ $startsWith: '' }\\],\n\n23\n\n    handler: async (req, verify) \\=> {\n\n24\n\n      const secret \\= req.headers.get('x-hook-secret');\n\n27\n\n        return new Response('Unauthorized', { status: 401 });\n\n30\n\n      // Asana sends the Secret (used to sign webhooks) as part of the initial handshake.\n\n31\n\n      // This is persisted in a KV store on \\`trigger.dev\\` (can be retrieved later).\n\n32\n\n      await client.store.env.set(ASANA\\_SECRET\\_KEY, secret);\n\n34\n\n      return new Response(undefined, {\n\n37\n\n          'x-hook-secret': secret,\n\n42\n\n  verify: async request \\=> {\n\n43\n\n    // Retrive the stored Secret from KV store.\n\n44\n\n    const secret \\= await client.store.env.get<string\\>(ASANA\\_SECRET\\_KEY);\n\n47\n\n      return { success: false, reason: 'secret not found' };\n\n50\n\n    return await verifyRequestSignature({\n\n52\n\n      headerName: 'X-Hook-Signature',\n\n64\n\n  //create a trigger from the HTTP endpoint\n\n65\n\n  trigger: asana.onRequest(),\n\n66\n\n  run: async (request, io, ctx) \\=> {\n\n67\n\n    const body \\= await request.json();\n\n68\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/airtable/examples/stripe-sub-update-airtable",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/airtable/examples/stripe-sub-update-airtable",
    "loadedTime": "2024-03-16T13:42:41.330Z",
    "referrerUrl": "https://trigger.dev/apis/airtable",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/airtable/examples/stripe-sub-update-airtable",
    "title": "Airtable | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Airtable | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/airtable"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Stripe } from \"@trigger.dev/stripe\";\n3\nimport { Airtable } from \"@trigger.dev/airtable\";\n5\nconst stripe = new Stripe({\n7\napiKey: process.env.STRIPE_API_KEY!,\n10\nconst airtable = new Airtable({\n12\ntoken: process.env.AIRTABLE_TOKEN!,\n15\n//this is the type definition for the table\n16\ntype SubscribedUsers = {\n23\n// This job populates an Airtable table when a new customer subscription is created in Stripe\n25\nid: \"stripe-new-subscription-update-airtable\",\n26\nname: \"On new Stripe subscription update Airtable\",\n32\ntrigger: stripe.onCustomerSubscription(),\n33\nrun: async (payload, io, ctx) => {\n34\n// Adding the type to table<YourTableType>(\"<your table name>\")\n35\n// gives you nice type inference and errors.\n36\n// You can leave it out as well table(\"<your table name>\")\n37\nconst table = io.airtable\n38\n.base(\"<your base id>\")\n39\n.table<SubscribedUsers>(\"<your table name>\");\n42\nconst newRecords = await table.createRecords(\"create records\", [\n44\n// Check the Stripe documents for object info: https://stripe.com/docs/api/subscriptions/object\n47\ninterval: payload.items.data[0].price.recurring?.interval,\n48\ncurrency: payload.items.data[0].price.currency,\n49\n// The unit amount in pence to be charged, represented as a whole integer if possible.\n50\nunitAmount: payload.items.data[0].price.unit_amount ?? undefined,\n55\nawait io.logger.info(\"A new subscription was created.\");",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Stripe } from \"@trigger.dev/stripe\";\n\n3\n\nimport { Airtable } from \"@trigger.dev/airtable\";\n\n5\n\nconst stripe \\= new Stripe({\n\n7\n\n  apiKey: process.env.STRIPE\\_API\\_KEY!,\n\n10\n\nconst airtable \\= new Airtable({\n\n12\n\n  token: process.env.AIRTABLE\\_TOKEN!,\n\n15\n\n//this is the type definition for the table\n\n16\n\ntype SubscribedUsers \\= {\n\n23\n\n// This job populates an Airtable table when a new customer subscription is created in Stripe\n\n25\n\n  id: \"stripe-new-subscription-update-airtable\",\n\n26\n\n  name: \"On new Stripe subscription update Airtable\",\n\n32\n\n  trigger: stripe.onCustomerSubscription(),\n\n33\n\n  run: async (payload, io, ctx) \\=> {\n\n34\n\n    // Adding the type to table<YourTableType>(\"<your table name>\")\n\n35\n\n    // gives you nice type inference and errors.\n\n36\n\n    // You can leave it out as well table(\"<your table name>\")\n\n37\n\n    const table \\= io.airtable\n\n38\n\n      .base(\"<your base id>\")\n\n39\n\n      .table<SubscribedUsers\\>(\"<your table name>\");\n\n42\n\n    const newRecords \\= await table.createRecords(\"create records\", \\[\n\n44\n\n        // Check the Stripe documents for object info: https://stripe.com/docs/api/subscriptions/object\n\n47\n\n          interval: payload.items.data\\[0\\].price.recurring?.interval,\n\n48\n\n          currency: payload.items.data\\[0\\].price.currency,\n\n49\n\n          // The unit amount in pence to be charged, represented as a whole integer if possible.\n\n50\n\n          unitAmount: payload.items.data\\[0\\].price.unit\\_amount ?? undefined,\n\n55\n\n    await io.logger.info(\"A new subscription was created.\");"
},
{
  "url": "https://trigger.dev/apis/airtable/examples/new-airtable-record-from-typeform",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/airtable/examples/new-airtable-record-from-typeform",
    "loadedTime": "2024-03-16T13:42:46.058Z",
    "referrerUrl": "https://trigger.dev/apis/airtable",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/airtable/examples/new-airtable-record-from-typeform",
    "title": "Airtable | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Airtable | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/airtable"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Airtable } from \"@trigger.dev/airtable\";\n3\nimport { Typeform } from \"@trigger.dev/typeform\";\n5\nconst typeform = new Typeform({\n7\ntoken: process.env.TYPEFORM_TOKEN!,\n10\nconst airtable = new Airtable({\n12\ntoken: process.env.AIRTABLE_TOKEN!,\n15\n//this is the type definition for the table\n20\nemailContactEnabled: boolean;\n23\n// This job populates an Airtable table when a new submission is created in Typeform\n25\nid: \"typeform-new-submission-update-airtable\",\n26\nname: \"On new Typeform submission update Airtable\",\n32\ntrigger: typeform.onFormResponse({\n33\n// to get uid & tag instructions can be found here:\n34\n// https://trigger.dev/docs/integrations/apis/typeform#get-notified-of-new-form-responses\n35\nuid: \"<your-form-id>\",\n38\nrun: async (payload, io, ctx) => {\n39\n// You can get your base-id and table-name from airtable\n40\nconst table = io.airtable\n41\n.base(\"<your-base-id>\")\n42\n.table<Submission>(\"<your-table-name>\");\n44\nif (payload.form_response.answers[0].type !== \"text\") {\n45\nthrow new Error(\"The first answer is not a name\");\n47\nconst name = payload.form_response.answers[0].text;\n49\nif (payload.form_response.answers[1].type !== \"email\") {\n50\nthrow new Error(\"The second answer is not an email\");\n52\nconst email = payload.form_response.answers[1].email;\n54\nif (payload.form_response.answers[2].type !== \"choice\") {\n55\nthrow new Error(\"The third answer is not a choice\");\n57\nconst emailContactEnabled =\n58\npayload.form_response.answers[2].choice.label === \"Yes\";\n61\nconst newRecords = await table.createRecords(\"create records\", [\n72\nawait io.logger.info(\"A new form submission was created.\", {",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Airtable } from \"@trigger.dev/airtable\";\n\n3\n\nimport { Typeform } from \"@trigger.dev/typeform\";\n\n5\n\nconst typeform \\= new Typeform({\n\n7\n\n  token: process.env.TYPEFORM\\_TOKEN!,\n\n10\n\nconst airtable \\= new Airtable({\n\n12\n\n  token: process.env.AIRTABLE\\_TOKEN!,\n\n15\n\n//this is the type definition for the table\n\n20\n\n  emailContactEnabled: boolean;\n\n23\n\n// This job populates an Airtable table when a new submission is created in Typeform\n\n25\n\n  id: \"typeform-new-submission-update-airtable\",\n\n26\n\n  name: \"On new Typeform submission update Airtable\",\n\n32\n\n  trigger: typeform.onFormResponse({\n\n33\n\n    // to get uid & tag instructions can be found here:\n\n34\n\n    // https://trigger.dev/docs/integrations/apis/typeform#get-notified-of-new-form-responses\n\n35\n\n    uid: \"<your-form-id>\",\n\n38\n\n  run: async (payload, io, ctx) \\=> {\n\n39\n\n    // You can get your base-id and table-name from airtable\n\n40\n\n    const table \\= io.airtable\n\n41\n\n      .base(\"<your-base-id>\")\n\n42\n\n      .table<Submission\\>(\"<your-table-name>\");\n\n44\n\n    if (payload.form\\_response.answers\\[0\\].type !== \"text\") {\n\n45\n\n      throw new Error(\"The first answer is not a name\");\n\n47\n\n    const name \\= payload.form\\_response.answers\\[0\\].text;\n\n49\n\n    if (payload.form\\_response.answers\\[1\\].type !== \"email\") {\n\n50\n\n      throw new Error(\"The second answer is not an email\");\n\n52\n\n    const email \\= payload.form\\_response.answers\\[1\\].email;\n\n54\n\n    if (payload.form\\_response.answers\\[2\\].type !== \"choice\") {\n\n55\n\n      throw new Error(\"The third answer is not a choice\");\n\n57\n\n    const emailContactEnabled \\=\n\n58\n\n      payload.form\\_response.answers\\[2\\].choice.label \\=== \"Yes\";\n\n61\n\n    const newRecords \\= await table.createRecords(\"create records\", \\[\n\n72\n\n    await io.logger.info(\"A new form submission was created.\", {"
},
{
  "url": "https://trigger.dev/apis/airtable/examples/update-airtable-when-stripe-account-updated",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/airtable/examples/update-airtable-when-stripe-account-updated",
    "loadedTime": "2024-03-16T13:42:49.450Z",
    "referrerUrl": "https://trigger.dev/apis/airtable",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/airtable/examples/update-airtable-when-stripe-account-updated",
    "title": "Airtable | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Airtable | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/airtable"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Stripe } from \"@trigger.dev/stripe\";\n3\nimport { Airtable } from \"@trigger.dev/airtable\";\n5\nconst stripe = new Stripe({\n7\napiKey: process.env.STRIPE_API_KEY!,\n10\nconst airtable = new Airtable({\n12\ntoken: process.env.AIRTABLE_TOKEN!,\n16\nstripe_customer_id?: string;\n21\npayment_intent_id: string;\n25\n\"stripe_customer_id (from Customers)\": string;\n29\nid: \"stripe-new-sale-update-airtable\",\n30\nname: \"On new Stripe sale update Airtable\",\n36\ntrigger: stripe.onPaymentIntentSucceeded(),\n37\nrun: async (payload, io, ctx) => {\n38\nconst customersTable = io.airtable\n39\n.base(\"<your base id>\")\n40\n.table<Customers>(\"<your table name>\");\n42\nconst salesTable = io.airtable\n43\n.base(\"<your base id>\")\n44\n.table<Sales>(\"<your table name>\");\n47\nid: payment_intent_id,\n48\ncustomer: stripe_customer_id,\n53\n// Use the filter formula to find a customer record with the given stripe_customer_id\n54\nconst records = await customersTable.getRecords(\n55\n\"Filter records by stripe_customer_id\",\n57\nfilterByFormula: `{stripe_customer_id} = \"${stripe_customer_id}\"`,\n58\nfields: [\"stripe_customer_id\"],\n63\nif (records && records.length > 0) {\n64\n// There is an existing customer\n65\ncustomerRecordId = records[0].id;\n67\nconst newCustomerRecord = await customersTable.createRecords(\n68\n\"create new customer record\",\n71\nfields: { stripe_customer_id: stripe_customer_id as string },\n75\ncustomerRecordId = newCustomerRecord[0].id;\n78\n// Add sale to the Sales table\n79\nconst newSaleRecord = await salesTable.createRecords(\n80\n\"create new sale record\",\n87\nCustomers: [customerRecordId], // Link to the customer record using its ID",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Stripe } from \"@trigger.dev/stripe\";\n\n3\n\nimport { Airtable } from \"@trigger.dev/airtable\";\n\n5\n\nconst stripe \\= new Stripe({\n\n7\n\n  apiKey: process.env.STRIPE\\_API\\_KEY!,\n\n10\n\nconst airtable \\= new Airtable({\n\n12\n\n  token: process.env.AIRTABLE\\_TOKEN!,\n\n16\n\n  stripe\\_customer\\_id?: string;\n\n21\n\n  payment\\_intent\\_id: string;\n\n25\n\n  \"stripe\\_customer\\_id (from Customers)\": string;\n\n29\n\n  id: \"stripe-new-sale-update-airtable\",\n\n30\n\n  name: \"On new Stripe sale update Airtable\",\n\n36\n\n  trigger: stripe.onPaymentIntentSucceeded(),\n\n37\n\n  run: async (payload, io, ctx) \\=> {\n\n38\n\n    const customersTable \\= io.airtable\n\n39\n\n      .base(\"<your base id>\")\n\n40\n\n      .table<Customers\\>(\"<your table name>\");\n\n42\n\n    const salesTable \\= io.airtable\n\n43\n\n      .base(\"<your base id>\")\n\n44\n\n      .table<Sales\\>(\"<your table name>\");\n\n47\n\n      id: payment\\_intent\\_id,\n\n48\n\n      customer: stripe\\_customer\\_id,\n\n53\n\n    // Use the filter formula to find a customer record with the given stripe\\_customer\\_id\n\n54\n\n    const records \\= await customersTable.getRecords(\n\n55\n\n      \"Filter records by stripe\\_customer\\_id\",\n\n57\n\n        filterByFormula: \\`{stripe\\_customer\\_id} = \"${stripe\\_customer\\_id}\"\\`,\n\n58\n\n        fields: \\[\"stripe\\_customer\\_id\"\\],\n\n63\n\n    if (records && records.length \\> 0) {\n\n64\n\n      // There is an existing customer\n\n65\n\n      customerRecordId \\= records\\[0\\].id;\n\n67\n\n      const newCustomerRecord \\= await customersTable.createRecords(\n\n68\n\n        \"create new customer record\",\n\n71\n\n            fields: { stripe\\_customer\\_id: stripe\\_customer\\_id as string },\n\n75\n\n      customerRecordId \\= newCustomerRecord\\[0\\].id;\n\n78\n\n    // Add sale to the Sales table\n\n79\n\n    const newSaleRecord \\= await salesTable.createRecords(\n\n80\n\n      \"create new sale record\",\n\n87\n\n            Customers: \\[customerRecordId\\], // Link to the customer record using its ID"
},
{
  "url": "https://trigger.dev/apis/novu/examples/novu-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/novu/examples/novu-http-endpoint",
    "loadedTime": "2024-03-16T13:42:56.419Z",
    "referrerUrl": "https://trigger.dev/apis/novu",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/novu/examples/novu-http-endpoint",
    "title": "Novu | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Novu | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/novu"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, verifyRequestSignature } from \"@trigger.dev/sdk\";\n3\n// Go to Novu Dashboard > Integrations Store\n4\n// Click Add > Go with \"Push Webhook\"\n5\n// Set the Webhook URL and Hmac Key (say \"Test\", for example)\n6\n// Go to Workflows -> Add a workflow\n7\n// Use the default trigger and add a push webhook call\n8\n// Enter the subscriberID that'll listen to the channel\n9\n// Run Trigger / Send Notification to trigger the webhook\n10\nconst novu = client.defineHttpEndpoint({\n14\nverify: async (request) => {\n15\nif (!process.env.NOVU_SIGNING_SECRET) {\n16\nreturn { success: false, reason: \"No Novu Signing Secret present.\" };\n18\nreturn await verifyRequestSignature({\n21\nheaderName: \"x-novu-signature\",\n22\nsecret: process.env.NOVU_SIGNING_SECRET,\n32\ntrigger: novu.onRequest(),\n33\nrun: async (request, io, ctx) => {\n34\nconst body = await request.json();\n35\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient, verifyRequestSignature } from \"@trigger.dev/sdk\";\n\n3\n\n// Go to Novu Dashboard > Integrations Store\n\n4\n\n// Click Add > Go with \"Push Webhook\"\n\n5\n\n// Set the Webhook URL and Hmac Key (say \"Test\", for example)\n\n6\n\n// Go to Workflows -> Add a workflow\n\n7\n\n// Use the default trigger and add a push webhook call\n\n8\n\n// Enter the subscriberID that'll listen to the channel\n\n9\n\n// Run Trigger / Send Notification to trigger the webhook\n\n10\n\nconst novu \\= client.defineHttpEndpoint({\n\n14\n\n  verify: async (request) \\=> {\n\n15\n\n    if (!process.env.NOVU\\_SIGNING\\_SECRET) {\n\n16\n\n      return { success: false, reason: \"No Novu Signing Secret present.\" };\n\n18\n\n    return await verifyRequestSignature({\n\n21\n\n      headerName: \"x-novu-signature\",\n\n22\n\n      secret: process.env.NOVU\\_SIGNING\\_SECRET,\n\n32\n\n  trigger: novu.onRequest(),\n\n33\n\n  run: async (request, io, ctx) \\=> {\n\n34\n\n    const body \\= await request.json();\n\n35\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/novu/examples/create-new-subscriber-in-novu",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/novu/examples/create-new-subscriber-in-novu",
    "loadedTime": "2024-03-16T13:43:02.769Z",
    "referrerUrl": "https://trigger.dev/apis/novu",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/novu/examples/create-new-subscriber-in-novu",
    "title": "Novu | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Novu | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/novu"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "2\nimport { Novu } from \"@novu/node\";\n3\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n5\n// Get your API key from https://web.novu.co/settings\n6\nconst novu = new Novu(process.env.NOVU_API_KEY!);\n8\n// Using official SDK kit: https://docs.novu.co/sdks/nodejs\n10\nid: \"create-novu-subscriber\",\n11\nname: \"Create Novu subscriber\",\n13\ntrigger: eventTrigger({\n14\nname: \"create-novu-subscriber\",\n16\nsubscriberId: z.string(),\n17\navatar: z.string().optional(),\n18\nemail: z.string().email().optional(),\n19\nfirstName: z.string().optional(),\n20\nlastName: z.string().optional(),\n21\nlocale: z.string().optional(),\n22\nphone: z.string().optional(),\n23\ndata: z.record(z.string(), z.any()).optional(),\n26\nrun: async (payload, io) => {\n30\nconst subscriber = await novu.subscribers.identify(\n33\navatar: payload.avatar,\n35\nfirstName: payload.firstName,\n36\nlastName: payload.lastName,\n37\nlocale: payload.locale,\n43\nreturn subscriber.data;\n46\n// Add metadata to improve how the task displays in the logs\n47\n{ name: \"Create subscriber\", icon: \"novu\" }",
  "markdown": "2\n\nimport { Novu } from \"@novu/node\";\n\n3\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n5\n\n// Get your API key from https://web.novu.co/settings\n\n6\n\nconst novu \\= new Novu(process.env.NOVU\\_API\\_KEY!);\n\n8\n\n// Using official SDK kit: https://docs.novu.co/sdks/nodejs\n\n10\n\n  id: \"create-novu-subscriber\",\n\n11\n\n  name: \"Create Novu subscriber\",\n\n13\n\n  trigger: eventTrigger({\n\n14\n\n    name: \"create-novu-subscriber\",\n\n16\n\n      subscriberId: z.string(),\n\n17\n\n      avatar: z.string().optional(),\n\n18\n\n      email: z.string().email().optional(),\n\n19\n\n      firstName: z.string().optional(),\n\n20\n\n      lastName: z.string().optional(),\n\n21\n\n      locale: z.string().optional(),\n\n22\n\n      phone: z.string().optional(),\n\n23\n\n      data: z.record(z.string(), z.any()).optional(),\n\n26\n\n  run: async (payload, io) \\=> {\n\n30\n\n        const subscriber \\= await novu.subscribers.identify(\n\n33\n\n            avatar: payload.avatar,\n\n35\n\n            firstName: payload.firstName,\n\n36\n\n            lastName: payload.lastName,\n\n37\n\n            locale: payload.locale,\n\n43\n\n        return subscriber.data;\n\n46\n\n      // Add metadata to improve how the task displays in the logs\n\n47\n\n      { name: \"Create subscriber\", icon: \"novu\" }"
},
{
  "url": "https://trigger.dev/apis/aws/examples/get-user-details",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/aws/examples/get-user-details",
    "loadedTime": "2024-03-16T13:43:07.755Z",
    "referrerUrl": "https://trigger.dev/apis/aws",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/aws/examples/get-user-details",
    "title": "AWS | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "AWS | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/aws"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { z } from \"zod\";\n4\nconst asana = require(\"asana\");\n6\n// Create a personal access token: https://developers.asana.com/docs/personal-access-token\n7\nconst asanaClient = asana.Client.create().useAccessToken(\n8\nprocess.env.ASANA_ACCESS_TOKEN\n13\nname: \"Asana Get User\",\n15\ntrigger: eventTrigger({\n16\nname: \"asana.get.user\",\n18\n// This can either be the string \"me\", an email, or the GID of a user.\n19\n// You can get your user GID by first logging in to Asana in your browser,\n20\n// then visiting https://app.asana.com/api/1.0/users/me.\n25\nrun: async (payload, io, ctx) => {\n26\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n27\nconst user = await io.runTask(\n30\n// This is the regular Asana SDK\n31\nreturn asanaClient.users.getUser(payload.userGid);\n34\n// Add metadata to improve how the task displays in the logs\n35\n{ name: \"Get Asana User\", icon: \"asana\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { z } from \"zod\";\n\n4\n\nconst asana \\= require(\"asana\");\n\n6\n\n// Create a personal access token: https://developers.asana.com/docs/personal-access-token\n\n7\n\nconst asanaClient \\= asana.Client.create().useAccessToken(\n\n8\n\n  process.env.ASANA\\_ACCESS\\_TOKEN\n\n13\n\n  name: \"Asana Get User\",\n\n15\n\n  trigger: eventTrigger({\n\n16\n\n    name: \"asana.get.user\",\n\n18\n\n      // This can either be the string \"me\", an email, or the GID of a user.\n\n19\n\n      // You can get your user GID by first logging in to Asana in your browser,\n\n20\n\n      // then visiting https://app.asana.com/api/1.0/users/me.\n\n25\n\n  run: async (payload, io, ctx) \\=> {\n\n26\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n27\n\n    const user \\= await io.runTask(\n\n30\n\n        // This is the regular Asana SDK\n\n31\n\n        return asanaClient.users.getUser(payload.userGid);\n\n34\n\n      // Add metadata to improve how the task displays in the logs\n\n35\n\n      { name: \"Get Asana User\", icon: \"asana\" }"
},
{
  "url": "https://trigger.dev/apis/aws/examples/aws-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/aws/examples/aws-http-endpoint",
    "loadedTime": "2024-03-16T13:43:11.334Z",
    "referrerUrl": "https://trigger.dev/apis/aws",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/aws/examples/aws-http-endpoint",
    "title": "AWS | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "AWS | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/aws"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n3\n// SNS Message blog https://repost.aws/knowledge-center/sns-lambda-webhooks-chime-slack-teams\n4\n// Create topic in SNS console\n5\n// Create Lambda function\n6\n// Configure Lambda function custom code from the blog and update trigger HTTP endpoint and secret\n9\nconst aws = client.defineHttpEndpoint({\n13\nverify: async (request) => {\n14\nconst secret = request.headers.get(\"x-aws-secret\");\n15\nif (secret === process.env.AWS_WEBHOOK_SECRET) {\n16\nreturn { success: true };\n18\nreturn { success: false, reason: \"Verification failed\" };\n27\n//create a trigger from the HTTP endpoint\n28\ntrigger: aws.onRequest(),\n29\nrun: async (request, io, ctx) => {\n30\nconst body = await request.json();\n31\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n3\n\n// SNS Message blog https://repost.aws/knowledge-center/sns-lambda-webhooks-chime-slack-teams\n\n4\n\n// Create topic in SNS console\n\n5\n\n// Create Lambda function\n\n6\n\n// Configure Lambda function custom code from the blog and update trigger HTTP endpoint and secret\n\n9\n\nconst aws \\= client.defineHttpEndpoint({\n\n13\n\n    verify: async (request) \\=> {\n\n14\n\n    const secret \\= request.headers.get(\"x-aws-secret\");\n\n15\n\n    if (secret \\=== process.env.AWS\\_WEBHOOK\\_SECRET) {\n\n16\n\n      return { success: true };\n\n18\n\n    return { success: false, reason: \"Verification failed\" };\n\n27\n\n  //create a trigger from the HTTP endpoint\n\n28\n\n  trigger: aws.onRequest(),\n\n29\n\n  run: async (request, io, ctx) \\=> {\n\n30\n\n    const body \\= await request.json();\n\n31\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/openai/examples/openai-generate-random-joke",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/openai/examples/openai-generate-random-joke",
    "loadedTime": "2024-03-16T13:43:16.038Z",
    "referrerUrl": "https://trigger.dev/apis/openai",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/openai/examples/openai-generate-random-joke",
    "title": "OpenAI | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "OpenAI | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/openai"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { OpenAI } from \"@trigger.dev/openai\";\n3\nimport { z } from \"zod\";\n5\nconst openai = new OpenAI({\n7\napiKey: process.env.OPENAI_API_KEY!,\n10\n// This Job will use OpenAI GPT-3.5 Turbo to tell you a joke\n12\nid: \"openai-tell-me-a-joke\",\n13\nname: \"OpenAI: tell me a joke\",\n15\ntrigger: eventTrigger({\n18\njokePrompt: z.string(),\n24\nrun: async (payload, io, ctx) => {\n25\nawait io.openai.retrieveModel(\"get-model\", {\n26\nmodel: \"gpt-3.5-turbo\",\n29\nconst models = await io.openai.listModels(\"list-models\");\n31\nconst jokeResult = await io.openai.backgroundCreateChatCompletion(\n32\n\"background-chat-completion\",\n34\nmodel: \"gpt-3.5-turbo\",\n38\ncontent: payload.jokePrompt,\n45\njoke: jokeResult.choices[0]?.message?.content,",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { OpenAI } from \"@trigger.dev/openai\";\n\n3\n\nimport { z } from \"zod\";\n\n5\n\nconst openai \\= new OpenAI({\n\n7\n\n  apiKey: process.env.OPENAI\\_API\\_KEY!,\n\n10\n\n// This Job will use OpenAI GPT-3.5 Turbo to tell you a joke\n\n12\n\n  id: \"openai-tell-me-a-joke\",\n\n13\n\n  name: \"OpenAI: tell me a joke\",\n\n15\n\n  trigger: eventTrigger({\n\n18\n\n      jokePrompt: z.string(),\n\n24\n\n  run: async (payload, io, ctx) \\=> {\n\n25\n\n    await io.openai.retrieveModel(\"get-model\", {\n\n26\n\n      model: \"gpt-3.5-turbo\",\n\n29\n\n    const models \\= await io.openai.listModels(\"list-models\");\n\n31\n\n    const jokeResult \\= await io.openai.backgroundCreateChatCompletion(\n\n32\n\n      \"background-chat-completion\",\n\n34\n\n        model: \"gpt-3.5-turbo\",\n\n38\n\n            content: payload.jokePrompt,\n\n45\n\n      joke: jokeResult.choices\\[0\\]?.message?.content,"
},
{
  "url": "https://trigger.dev/apis/openai/examples/openai-generate-image",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/openai/examples/openai-generate-image",
    "loadedTime": "2024-03-16T13:43:23.028Z",
    "referrerUrl": "https://trigger.dev/apis/openai",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/openai/examples/openai-generate-image",
    "title": "OpenAI | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "OpenAI | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/openai"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { OpenAI } from \"@trigger.dev/openai\";\n3\nimport { z } from \"zod\";\n5\nconst openai = new OpenAI({\n7\napiKey: process.env.OPENAI_API_KEY!,\n10\n// This Job will generate an image from a prompt, using OpenAI's image API\n12\nid: \"openai-generate-image\",\n13\nname: \"OpenAI: generate image from a prompt\",\n15\ntrigger: eventTrigger({\n16\nname: \"openai.images\",\n22\nrun: async (payload, io, ctx) => {\n23\nconst imageResults = await io.openai.createImage(\"image\", {\n24\nprompt: \"A hedgehog wearing a party hat\",\n27\nresponse_format: \"url\",\n31\nimages: imageResults.data?.map((image) => image.url),",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { OpenAI } from \"@trigger.dev/openai\";\n\n3\n\nimport { z } from \"zod\";\n\n5\n\nconst openai \\= new OpenAI({\n\n7\n\n  apiKey: process.env.OPENAI\\_API\\_KEY!,\n\n10\n\n// This Job will generate an image from a prompt, using OpenAI's image API\n\n12\n\n  id: \"openai-generate-image\",\n\n13\n\n  name: \"OpenAI: generate image from a prompt\",\n\n15\n\n  trigger: eventTrigger({\n\n16\n\n    name: \"openai.images\",\n\n22\n\n  run: async (payload, io, ctx) \\=> {\n\n23\n\n    const imageResults \\= await io.openai.createImage(\"image\", {\n\n24\n\n      prompt: \"A hedgehog wearing a party hat\",\n\n27\n\n      response\\_format: \"url\",\n\n31\n\n      images: imageResults.data?.map((image) \\=> image.url),"
},
{
  "url": "https://trigger.dev/apis/openai/examples/slack-openai-summarize-github-commits",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/openai/examples/slack-openai-summarize-github-commits",
    "loadedTime": "2024-03-16T13:43:27.335Z",
    "referrerUrl": "https://trigger.dev/apis/openai",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/openai/examples/slack-openai-summarize-github-commits",
    "title": "OpenAI | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "OpenAI | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/openai"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, cronTrigger } from \"@trigger.dev/sdk\";\n2\nimport { Github } from \"@trigger.dev/github\";\n3\nimport { OpenAI } from \"@trigger.dev/openai\";\n4\nimport { Slack } from \"@trigger.dev/slack\";\n6\nconst github = new Github({\n8\ntoken: process.env.GITHUB_TOKEN!,\n11\nconst openai = new OpenAI({\n13\napiKey: process.env.OPENAI_API_KEY!,\n16\nconst slack = new Slack({ id: \"slack\" });\n18\n// This Job runs at 7am every day using a cron schedule expression.\n20\nid: \"summarize-yesterday-commits-on-slack\",\n21\nname: \"Summarize yesterdays GitHub commits on Slack\",\n23\ntrigger: cronTrigger({\n24\n// Note that the time is in UTC.\n25\n// Converted to cron schedule expression using https://crontab.guru/\n33\nrun: async (payload, io, ctx) => {\n34\n// 1. Get the 'since' and 'until' timestamps\n35\nconst since = payload.lastTimestamp?.toISOString();\n36\nconst until = payload.ts?.toISOString();\n38\n// 2. Get yesterday's commits from GitHub\n39\nconst owner = \"<your-org-name>\";\n40\nconst repo = \"<your-repo-name>\";\n42\nconst { data } = await io.github.runTask(\n43\n\"get-yesterdays-commits\",\n45\nreturn client.rest.repos.listCommits({\n52\n{ name: \"Get Yesterday's Commits\" }\n55\n// 3. Turn the commit data into a shorter format for OpenAI:\n56\nconst formattedCommits = await io.runTask(\"format-commits\", async () => {\n57\nreturn data.map((commit) => {\n59\nauthor: commit.commit.author?.name,\n60\nmessage: commit.commit.message,\n61\ntime: commit.commit.author?.date,\n62\nlink: commit.html_url,\n67\n// 4. Summarize the commits with OpenAI\n68\nconst chatCompletion = await io.openai.createChatCompletion(\n71\nmodel: \"gpt-3.5-turbo\",\n75\ncontent: `You are a expert programmer experienced in GitHub. \n76\nYou are to concisely summarize the GitHub commits in one message. \n77\nReply with a heading message -- 'GitHub Commits for ${repo} yesterday' \n78\n-- followed by a summary of the commits. Use bullet points in your summary \n79\nlist and use appropriate spacing for maximum readability.`,\n83\ncontent: `Here are all of the GitHub commits from yesterday \n84\n(delimited by triple quotes below). Please summarize them like \n85\n\"{user} {message} ({url})\".\\n\\n\"\"\"${JSON.stringify(\n96\nconst response = await io.slack.postMessage(\"post message\", {\n97\nchannel: process.env.SLACK_CHANNEL_ID!,\n98\ntext: chatCompletion.choices[0]?.message?.content || \"No summary found\",",
  "markdown": "1\n\nimport { TriggerClient, cronTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Github } from \"@trigger.dev/github\";\n\n3\n\nimport { OpenAI } from \"@trigger.dev/openai\";\n\n4\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n6\n\nconst github \\= new Github({\n\n8\n\n  token: process.env.GITHUB\\_TOKEN!,\n\n11\n\nconst openai \\= new OpenAI({\n\n13\n\n  apiKey: process.env.OPENAI\\_API\\_KEY!,\n\n16\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n18\n\n// This Job runs at 7am every day using a cron schedule expression.\n\n20\n\n  id: \"summarize-yesterday-commits-on-slack\",\n\n21\n\n  name: \"Summarize yesterdays GitHub commits on Slack\",\n\n23\n\n  trigger: cronTrigger({\n\n24\n\n    // Note that the time is in UTC.\n\n25\n\n    // Converted to cron schedule expression using https://crontab.guru/\n\n33\n\n  run: async (payload, io, ctx) \\=> {\n\n34\n\n    // 1. Get the 'since' and 'until' timestamps\n\n35\n\n    const since \\= payload.lastTimestamp?.toISOString();\n\n36\n\n    const until \\= payload.ts?.toISOString();\n\n38\n\n    // 2. Get yesterday's commits from GitHub\n\n39\n\n    const owner \\= \"<your-org-name>\";\n\n40\n\n    const repo \\= \"<your-repo-name>\";\n\n42\n\n    const { data } \\= await io.github.runTask(\n\n43\n\n      \"get-yesterdays-commits\",\n\n45\n\n        return client.rest.repos.listCommits({\n\n52\n\n      { name: \"Get Yesterday's Commits\" }\n\n55\n\n    // 3. Turn the commit data into a shorter format for OpenAI:\n\n56\n\n    const formattedCommits \\= await io.runTask(\"format-commits\", async () \\=> {\n\n57\n\n      return data.map((commit) \\=> {\n\n59\n\n          author: commit.commit.author?.name,\n\n60\n\n          message: commit.commit.message,\n\n61\n\n          time: commit.commit.author?.date,\n\n62\n\n          link: commit.html\\_url,\n\n67\n\n    // 4. Summarize the commits with OpenAI\n\n68\n\n    const chatCompletion \\= await io.openai.createChatCompletion(\n\n71\n\n        model: \"gpt-3.5-turbo\",\n\n75\n\n            content: \\`You are a expert programmer experienced in GitHub. \n\n76\n\n            You are to concisely summarize the GitHub commits in one message. \n\n77\n\n            Reply with a heading message -- 'GitHub Commits for ${repo} yesterday' \n\n78\n\n            -- followed by a summary of the commits. Use bullet points in your summary \n\n79\n\n            list and use appropriate spacing for maximum readability.\\`,\n\n83\n\n            content: \\`Here are all of the GitHub commits from yesterday \n\n84\n\n            (delimited by triple quotes below). Please summarize them like \n\n85\n\n            \"{user} {message} ({url})\".\\\\n\\\\n\"\"\"${JSON.stringify(\n\n96\n\n    const response \\= await io.slack.postMessage(\"post message\", {\n\n97\n\n      channel: process.env.SLACK\\_CHANNEL\\_ID!,\n\n98\n\n      text: chatCompletion.choices\\[0\\]?.message?.content || \"No summary found\","
},
{
  "url": "https://trigger.dev/apis/openai/examples/openai-generate-blog-post",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/openai/examples/openai-generate-blog-post",
    "loadedTime": "2024-03-16T13:43:35.235Z",
    "referrerUrl": "https://trigger.dev/apis/openai",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/openai/examples/openai-generate-blog-post",
    "title": "OpenAI | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "OpenAI | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/openai"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { SupabaseManagement, Supabase } from \"@trigger.dev/supabase\";\n2\nimport { OpenAI } from \"@trigger.dev/openai\";\n3\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n5\nconst supabaseManagement = new SupabaseManagement({\n6\nid: \"supabase-management\",\n9\nconst openai = new OpenAI({\n11\napiKey: process.env.OPENAI_API_KEY!,\n14\n// Use Supabase integration to run authenticated tasks using the service_role key\n15\nconst supabase = new Supabase({\n17\nsupabaseKey: process.env.SUPABASE_SERVICE_ROLE_KEY!,\n18\nsupabaseUrl: \"https://<project id>.supabase.co\",\n21\n// Pass the generated types to the db instance\n22\nconst db = supabase.db<Database>(\"https://<project id>.supabase.co\");\n25\nid: \"auto-generate-blog-title\",\n26\nname: \"Auto generate blog title\",\n28\n// Subscribe to new blog posts being created\n29\ntrigger: db.onInserted({\n32\n// Define the integrations that this Job will use\n37\nrun: async (payload, io, ctx) => {\n38\nconst result = await io.openai.backgroundCreateChatCompletion(\n41\nmodel: \"gpt-3.5-turbo\",\n45\ncontent: `Suggest some great titles for this blog post: \\n ${payload.record.content}`,\n51\nconst blogTitle = result.choices[0].message.content;\n54\n// Set the title for the blog post\n55\nconst { data, error } = await io.supabase.runTask(\n60\n.update({ title: blogTitle })\n61\n.eq(\"id\", payload.record.id)",
  "markdown": "1\n\nimport { SupabaseManagement, Supabase } from \"@trigger.dev/supabase\";\n\n2\n\nimport { OpenAI } from \"@trigger.dev/openai\";\n\n3\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n5\n\nconst supabaseManagement \\= new SupabaseManagement({\n\n6\n\n  id: \"supabase-management\",\n\n9\n\nconst openai \\= new OpenAI({\n\n11\n\n  apiKey: process.env.OPENAI\\_API\\_KEY!,\n\n14\n\n// Use Supabase integration to run authenticated tasks using the service\\_role key\n\n15\n\nconst supabase \\= new Supabase({\n\n17\n\n  supabaseKey: process.env.SUPABASE\\_SERVICE\\_ROLE\\_KEY!,\n\n18\n\n  supabaseUrl: \"https://<project id>.supabase.co\",\n\n21\n\n// Pass the generated types to the db instance\n\n22\n\nconst db \\= supabase.db<Database\\>(\"https://<project id>.supabase.co\");\n\n25\n\n  id: \"auto-generate-blog-title\",\n\n26\n\n  name: \"Auto generate blog title\",\n\n28\n\n  // Subscribe to new blog posts being created\n\n29\n\n  trigger: db.onInserted({\n\n32\n\n  // Define the integrations that this Job will use\n\n37\n\n  run: async (payload, io, ctx) \\=> {\n\n38\n\n    const result \\= await io.openai.backgroundCreateChatCompletion(\n\n41\n\n        model: \"gpt-3.5-turbo\",\n\n45\n\n            content: \\`Suggest some great titles for this blog post: \\\\n ${payload.record.content}\\`,\n\n51\n\n    const blogTitle \\= result.choices\\[0\\].message.content;\n\n54\n\n      // Set the title for the blog post\n\n55\n\n      const { data, error } \\= await io.supabase.runTask(\n\n60\n\n            .update({ title: blogTitle })\n\n61\n\n            .eq(\"id\", payload.record.id)"
},
{
  "url": "https://trigger.dev/apis/openai/examples/storage-to-ai",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/openai/examples/storage-to-ai",
    "loadedTime": "2024-03-16T13:43:38.430Z",
    "referrerUrl": "https://trigger.dev/apis/openai",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/openai/examples/storage-to-ai",
    "title": "OpenAI | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "OpenAI | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/openai"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { SupabaseManagement, Supabase } from \"@trigger.dev/supabase\";\n2\nimport { OpenAI } from \"@trigger.dev/openai\";\n3\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n5\nconst openai = new OpenAI({\n7\napiKey: process.env.OPENAI_API_KEY!,\n10\n// Use Supabase integration to run authenticated tasks using the service_role key\n11\nconst supabase = new Supabase({\n13\nsupabaseKey: process.env.SUPABASE_SERVICE_ROLE_KEY!,\n14\nsupabaseUrl: \"https://<project id>.supabase.co\",\n17\nconst supabaseManagement = new SupabaseManagement({\n18\nid: \"supabase-management\",\n21\n// Pass the generated types to the db instance\n22\nconst db = supabase.db<Database>(\"https://<project id>.supabase.co\");\n25\nid: \"ai-all-the-things\",\n26\nname: \"AI all the images\",\n28\n// Subscribe to objects being inserted\n29\ntrigger: db.onInserted({\n34\nbucket_id: [\"uploads\"],\n43\n// Define the integrations that this Job will use\n48\nrun: async (payload, io, ctx) => {\n49\n// Assuming the bucket is private, we create a signed url for temporary access\n50\n// Use the native supabase client to get a signed url\n51\nconst { error, data } = await io.supabase.client.storage\n52\n.from(\"example_bucket\")\n53\n.createSignedUrl(payload.record.name, 60);\n59\nconst imageVariation = await io.openai.createImageVariation(\n62\nimage: data.signedUrl,\n64\nresponse_format: \"url\",\n69\n// do something with the imageVariation response",
  "markdown": "1\n\nimport { SupabaseManagement, Supabase } from \"@trigger.dev/supabase\";\n\n2\n\nimport { OpenAI } from \"@trigger.dev/openai\";\n\n3\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n5\n\nconst openai \\= new OpenAI({\n\n7\n\n  apiKey: process.env.OPENAI\\_API\\_KEY!,\n\n10\n\n// Use Supabase integration to run authenticated tasks using the service\\_role key\n\n11\n\nconst supabase \\= new Supabase({\n\n13\n\n  supabaseKey: process.env.SUPABASE\\_SERVICE\\_ROLE\\_KEY!,\n\n14\n\n  supabaseUrl: \"https://<project id>.supabase.co\",\n\n17\n\nconst supabaseManagement \\= new SupabaseManagement({\n\n18\n\n  id: \"supabase-management\",\n\n21\n\n// Pass the generated types to the db instance\n\n22\n\nconst db \\= supabase.db<Database\\>(\"https://<project id>.supabase.co\");\n\n25\n\n  id: \"ai-all-the-things\",\n\n26\n\n  name: \"AI all the images\",\n\n28\n\n  // Subscribe to objects being inserted\n\n29\n\n  trigger: db.onInserted({\n\n34\n\n        bucket\\_id: \\[\"uploads\"\\],\n\n43\n\n  // Define the integrations that this Job will use\n\n48\n\n  run: async (payload, io, ctx) \\=> {\n\n49\n\n    // Assuming the bucket is private, we create a signed url for temporary access\n\n50\n\n    // Use the native supabase client to get a signed url\n\n51\n\n    const { error, data } \\= await io.supabase.client.storage\n\n52\n\n      .from(\"example\\_bucket\")\n\n53\n\n      .createSignedUrl(payload.record.name, 60);\n\n59\n\n    const imageVariation \\= await io.openai.createImageVariation(\n\n62\n\n        image: data.signedUrl,\n\n64\n\n        response\\_format: \"url\",\n\n69\n\n    // do something with the imageVariation response"
},
{
  "url": "https://trigger.dev/apis/brex/examples/create-new-brex-title",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/brex/examples/create-new-brex-title",
    "loadedTime": "2024-03-16T13:43:40.334Z",
    "referrerUrl": "https://trigger.dev/apis/brex",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/brex/examples/create-new-brex-title",
    "title": "Brex | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Brex | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/brex"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n4\n// Docs: https://developer.brex.com/openapi/team_api/#tag/Titles\n5\n// API: https://developer.brex.com/openapi/team_api/#operation/createTitle\n6\nconst endpointURL = `${process.env.BREX_BASE_URL}/titles`; // Replace with the Other Brex API endpoint\n8\n// Create tokens at https://developer.brex.com/docs/quickstart/#1-generate-your-user-token\n9\n// Scopes: Titles: read, write\n10\n// Create request options\n11\nconst requestOptions: RequestInit = {\n14\nAuthorization: `Bearer ${process.env.BREX_API_KEY}`,\n15\n\"Content-Type\": \"application/json\",\n19\n//<> ### This is a title\n20\n//<> **This is a bold comment 1 ** and `this is code`\n22\nid: \"brex-create-title\",\n23\nname: \"Brex Create Title\",\n25\ntrigger: eventTrigger({\n26\nname: \"Brex Create Title\",\n28\n// Name of the title. You can see the all titles in the teams section.\n29\n// https://dashboard.brex.com/p/team/titles\n34\nrun: async (payload, io, ctx) => {\n35\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n39\n// Make a request to the Brex API using the fetch API\n40\nconst response = await fetch(endpointURL, {\n42\nbody: JSON.stringify(payload),\n45\n// Return the response body\n46\nreturn await response.json();\n49\n//<> This is comment 2\n50\n// Add metadata to improve how the task displays in the logs\n51\n{ name: \"Brex Create Title\", icon: \"brex\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n4\n\n// Docs: https://developer.brex.com/openapi/team\\_api/#tag/Titles\n\n5\n\n// API: https://developer.brex.com/openapi/team\\_api/#operation/createTitle\n\n6\n\nconst endpointURL \\= \\`${process.env.BREX\\_BASE\\_URL}/titles\\`; // Replace with the Other Brex API endpoint\n\n8\n\n// Create tokens at https://developer.brex.com/docs/quickstart/#1-generate-your-user-token\n\n9\n\n// Scopes: Titles: read, write\n\n10\n\n// Create request options\n\n11\n\nconst requestOptions: RequestInit \\= {\n\n14\n\n    Authorization: \\`Bearer ${process.env.BREX\\_API\\_KEY}\\`,\n\n15\n\n    \"Content-Type\": \"application/json\",\n\n19\n\n//<> ### This is a title\n\n20\n\n//<> \\*\\*This is a bold comment 1 \\*\\* and \\`this is code\\`\n\n22\n\n  id: \"brex-create-title\",\n\n23\n\n  name: \"Brex Create Title\",\n\n25\n\n  trigger: eventTrigger({\n\n26\n\n    name: \"Brex Create Title\",\n\n28\n\n      // Name of the title. You can see the all titles in the teams section.\n\n29\n\n      // https://dashboard.brex.com/p/team/titles\n\n34\n\n  run: async (payload, io, ctx) \\=> {\n\n35\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n39\n\n        // Make a request to the Brex API using the fetch API\n\n40\n\n        const response \\= await fetch(endpointURL, {\n\n42\n\n          body: JSON.stringify(payload),\n\n45\n\n        // Return the response body\n\n46\n\n        return await response.json();\n\n49\n\n      //<> This is comment 2\n\n50\n\n      // Add metadata to improve how the task displays in the logs\n\n51\n\n      { name: \"Brex Create Title\", icon: \"brex\" }"
},
{
  "url": "https://trigger.dev/apis/brex/examples/brex-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/brex/examples/brex-http-endpoint",
    "loadedTime": "2024-03-16T13:43:48.452Z",
    "referrerUrl": "https://trigger.dev/apis/brex",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/brex/examples/brex-http-endpoint",
    "title": "Brex | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Brex | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/brex"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { createHmac, timingSafeEqual } from \"crypto\";\n3\nimport { Slack } from \"@trigger.dev/slack\";\n5\nconst slack = new Slack({ id: \"slack\" });\n7\n// API key Docs: https://developer.brex.com/docs/authentication/\n8\n// Sign in to dashboard.brex.com as an account admin.\n9\n// Go to Developer > Settings.\n11\n// Add a name for your token and choose level of data access you need for your app; then click Create Token.\n13\n// Webhooks docs: https://developer.brex.com/openapi/webhooks_api/\n15\n// Create an HTTP Endpoint, with the Brex details\n16\nconst brex = client.defineHttpEndpoint({\n20\nverify: async (request) => {\n21\nconst webhook_id = request.headers.get(\"Webhook-Id\");\n22\nconst webhook_signature = request.headers.get(\"Webhook-Signature\");\n23\nconst webhook_timestamp = request.headers.get(\"Webhook-Timestamp\");\n24\nconst body = await request.text();\n26\nif (!webhook_id || !webhook_signature || !webhook_timestamp) {\n27\nreturn { success: false, reason: \"Missing brex headers\" };\n30\nconst signed_content = `${webhook_id}.${webhook_timestamp}.${body}`;\n31\nconst passed_signatures = webhook_signature\n33\n.map((sigString) => sigString.split(\",\")[1]);\n35\nconst response = await fetch(\n36\n`https://platform.brexapis.com/v1/webhooks/secrets`,\n39\n\"Content-Type\": \"application/json\",\n40\nAuthorization: `Bearer ${process.env.BREX_API_KEY}`,\n45\nconst data = await response.json();\n46\nconst secrets = data.map(\n47\n(secretObj: { secret: string; status: string }) => secretObj.secret\n50\nfor (const secret of secrets) {\n51\nconst base64DecodedSecret = Buffer.from(secret, \"base64\");\n52\nconst hmac = createHmac(\"sha256\", base64DecodedSecret);\n53\nconst computed_signature = hmac.update(signed_content).digest();\n55\nfor (const passed_signature of passed_signatures) {\n56\nconst decodedPassedSignature = Buffer.from(passed_signature, \"base64\");\n58\nif (timingSafeEqual(computed_signature, decodedPassedSignature)) {\n59\nreturn { success: true };\n64\nreturn { success: false, reason: \"Invalid brex signature\" };\n68\n// The job sends a Slack message when a user is updated\n74\n// Create a trigger from the HTTP endpoint\n75\ntrigger: brex.onRequest(),\n79\nrun: async (request, io, ctx) => {\n80\nconst body = await request.json();\n81\nawait io.logger.info(`Body`, body);\n83\nswitch (body.event_type) {\n84\ncase \"USER_UPDATED\": {\n85\nawait io.slack.postMessage(\"user-updated\", {\n86\nchannel: process.env.SLACK_CHANNEL!,\n87\ntext: `User updated:\\nUser id: ${\n89\n}\\nUpdated attributes: ${body.updated_attributes.join(\", \")}`,",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { createHmac, timingSafeEqual } from \"crypto\";\n\n3\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n5\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n7\n\n// API key Docs: https://developer.brex.com/docs/authentication/\n\n8\n\n// Sign in to dashboard.brex.com as an account admin.\n\n9\n\n// Go to Developer > Settings.\n\n11\n\n// Add a name for your token and choose level of data access you need for your app; then click Create Token.\n\n13\n\n// Webhooks docs: https://developer.brex.com/openapi/webhooks\\_api/\n\n15\n\n// Create an HTTP Endpoint, with the Brex details\n\n16\n\nconst brex \\= client.defineHttpEndpoint({\n\n20\n\n  verify: async (request) \\=> {\n\n21\n\n    const webhook\\_id \\= request.headers.get(\"Webhook-Id\");\n\n22\n\n    const webhook\\_signature \\= request.headers.get(\"Webhook-Signature\");\n\n23\n\n    const webhook\\_timestamp \\= request.headers.get(\"Webhook-Timestamp\");\n\n24\n\n    const body \\= await request.text();\n\n26\n\n    if (!webhook\\_id || !webhook\\_signature || !webhook\\_timestamp) {\n\n27\n\n      return { success: false, reason: \"Missing brex headers\" };\n\n30\n\n    const signed\\_content \\= \\`${webhook\\_id}.${webhook\\_timestamp}.${body}\\`;\n\n31\n\n    const passed\\_signatures \\= webhook\\_signature\n\n33\n\n      .map((sigString) \\=> sigString.split(\",\")\\[1\\]);\n\n35\n\n    const response \\= await fetch(\n\n36\n\n      \\`https://platform.brexapis.com/v1/webhooks/secrets\\`,\n\n39\n\n          \"Content-Type\": \"application/json\",\n\n40\n\n          Authorization: \\`Bearer ${process.env.BREX\\_API\\_KEY}\\`,\n\n45\n\n    const data \\= await response.json();\n\n46\n\n    const secrets \\= data.map(\n\n47\n\n      (secretObj: { secret: string; status: string }) \\=> secretObj.secret\n\n50\n\n    for (const secret of secrets) {\n\n51\n\n      const base64DecodedSecret \\= Buffer.from(secret, \"base64\");\n\n52\n\n      const hmac \\= createHmac(\"sha256\", base64DecodedSecret);\n\n53\n\n      const computed\\_signature \\= hmac.update(signed\\_content).digest();\n\n55\n\n      for (const passed\\_signature of passed\\_signatures) {\n\n56\n\n        const decodedPassedSignature \\= Buffer.from(passed\\_signature, \"base64\");\n\n58\n\n        if (timingSafeEqual(computed\\_signature, decodedPassedSignature)) {\n\n59\n\n          return { success: true };\n\n64\n\n    return { success: false, reason: \"Invalid brex signature\" };\n\n68\n\n// The job sends a Slack message when a user is updated\n\n74\n\n  // Create a trigger from the HTTP endpoint\n\n75\n\n  trigger: brex.onRequest(),\n\n79\n\n  run: async (request, io, ctx) \\=> {\n\n80\n\n    const body \\= await request.json();\n\n81\n\n    await io.logger.info(\\`Body\\`, body);\n\n83\n\n    switch (body.event\\_type) {\n\n84\n\n      case \"USER\\_UPDATED\": {\n\n85\n\n        await io.slack.postMessage(\"user-updated\", {\n\n86\n\n          channel: process.env.SLACK\\_CHANNEL!,\n\n87\n\n          text: \\`User updated:\\\\nUser id: ${\n\n89\n\n          }\\\\nUpdated attributes: ${body.updated\\_attributes.join(\", \")}\\`,"
},
{
  "url": "https://trigger.dev/apis/pagerduty/examples/pagerduty-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/pagerduty/examples/pagerduty-http-endpoint",
    "loadedTime": "2024-03-16T13:43:50.332Z",
    "referrerUrl": "https://trigger.dev/apis/pagerduty",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/pagerduty/examples/pagerduty-http-endpoint",
    "title": "PagerDuty | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "PagerDuty | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/pagerduty"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport crypto from \"crypto\";\n2\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n4\n// Create an HTTP endpoint to listen to PagerDuty webhooks.\n5\n// (This will create the endpoint URL on the `trigger.dev` dashboard)\n6\n// Create a PagerDuty account (if you don't have one).\n7\n// Go to Integrations -> Generic Webhooks and setup the subscription.\n8\n// Copy the secret shown in popup to PAGERDUTY_WEBHOOK_SIGNING_SECRET in the .env file.\n9\nconst pagerduty = client.defineHttpEndpoint({\n11\nsource: \"pagerduty.com\",\n13\nverify: async (request) => {\n14\nconst bodyText = await request.text();\n15\nconst signatures = request.headers.get(\"X-PagerDuty-Signature\");\n17\nreturn { success: false };\n19\nconst signature = crypto\n20\n.createHmac(\"sha256\", process.env.PAGERDUTY_WEBHOOK_SIGNING_SECRET!)\n23\nconst signatureWithVersion = \"v1=\" + signature;\n24\nconst signatureList = signatures.split(\",\");\n26\nsuccess: signatureList.indexOf(signatureWithVersion) > -1,\n33\nname: \"HTTP PagerDuty\",\n36\ntrigger: pagerduty.onRequest(),\n37\nrun: async (request, io, ctx) => {\n38\nconst body = await request.json();\n39\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport crypto from \"crypto\";\n\n2\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n4\n\n// Create an HTTP endpoint to listen to PagerDuty webhooks.\n\n5\n\n// (This will create the endpoint URL on the \\`trigger.dev\\` dashboard)\n\n6\n\n// Create a PagerDuty account (if you don't have one).\n\n7\n\n// Go to Integrations -> Generic Webhooks and setup the subscription.\n\n8\n\n// Copy the secret shown in popup to PAGERDUTY\\_WEBHOOK\\_SIGNING\\_SECRET in the .env file.\n\n9\n\nconst pagerduty \\= client.defineHttpEndpoint({\n\n11\n\n  source: \"pagerduty.com\",\n\n13\n\n  verify: async (request) \\=> {\n\n14\n\n    const bodyText \\= await request.text();\n\n15\n\n    const signatures \\= request.headers.get(\"X-PagerDuty-Signature\");\n\n17\n\n      return { success: false };\n\n19\n\n    const signature \\= crypto\n\n20\n\n      .createHmac(\"sha256\", process.env.PAGERDUTY\\_WEBHOOK\\_SIGNING\\_SECRET!)\n\n23\n\n    const signatureWithVersion \\= \"v1=\" + signature;\n\n24\n\n    const signatureList \\= signatures.split(\",\");\n\n26\n\n      success: signatureList.indexOf(signatureWithVersion) \\> \\-1,\n\n33\n\n  name: \"HTTP PagerDuty\",\n\n36\n\n  trigger: pagerduty.onRequest(),\n\n37\n\n  run: async (request, io, ctx) \\=> {\n\n38\n\n    const body \\= await request.json();\n\n39\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/pagerduty/examples/pagerduty-install-addon",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/pagerduty/examples/pagerduty-install-addon",
    "loadedTime": "2024-03-16T13:43:58.329Z",
    "referrerUrl": "https://trigger.dev/apis/pagerduty",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/pagerduty/examples/pagerduty-install-addon",
    "title": "PagerDuty | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "PagerDuty | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/pagerduty"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n4\n// Guide to create PagerDuty API key https://support.pagerduty.com/docs/api-access-keys\n5\n// Navigate to integrations > API Access Keys\n6\n// Click on \"Create New API Key\" and give it a description and click on \"Create Key\"\n7\n// Set the PAGERDUTY_API_KEY in the .env file.\n8\nconst endpointURL = `${process.env.PAGERDUTY_BASE_URL}/addons`;\n10\n// Create request options\n11\nconst requestOptions: RequestInit = {\n14\nAuthorization: `Token ${process.env.PAGERDUTY_API_KEY}`,\n15\n\"content-type\": \"application/json\",\n16\nAccept: \"application/vnd.pagerduty+json;version=2\",\n21\nid: \"pagerduty-install-addon\",\n22\nname: \"PagerDuty Install Addon\",\n24\ntrigger: eventTrigger({\n25\nname: \"pagerduty-install-addon\",\n34\nrun: async (payload, io, ctx) => {\n36\naddon: { type, name, src },\n39\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n41\n\"PagerDuty Install Addon\",\n43\n// Make request using Fetch API\n44\nreturn await fetch(endpointURL, {\n46\nbody: JSON.stringify({\n51\n}).then((response) => response.json());\n54\n// Add metadata to improve how the task displays in the logs\n55\n{ name: \"PagerDuty Install Addon\", icon: \"pagerduty\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n4\n\n// Guide to create PagerDuty API key https://support.pagerduty.com/docs/api-access-keys\n\n5\n\n// Navigate to integrations > API Access Keys\n\n6\n\n// Click on \"Create New API Key\" and give it a description and click on \"Create Key\"\n\n7\n\n// Set the PAGERDUTY\\_API\\_KEY in the .env file.\n\n8\n\nconst endpointURL \\= \\`${process.env.PAGERDUTY\\_BASE\\_URL}/addons\\`;\n\n10\n\n// Create request options\n\n11\n\nconst requestOptions: RequestInit \\= {\n\n14\n\n    Authorization: \\`Token ${process.env.PAGERDUTY\\_API\\_KEY}\\`,\n\n15\n\n    \"content-type\": \"application/json\",\n\n16\n\n    Accept: \"application/vnd.pagerduty+json;version=2\",\n\n21\n\n  id: \"pagerduty-install-addon\",\n\n22\n\n  name: \"PagerDuty Install Addon\",\n\n24\n\n  trigger: eventTrigger({\n\n25\n\n    name: \"pagerduty-install-addon\",\n\n34\n\n  run: async (payload, io, ctx) \\=> {\n\n36\n\n      addon: { type, name, src },\n\n39\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n41\n\n      \"PagerDuty Install Addon\",\n\n43\n\n        // Make request using Fetch API\n\n44\n\n        return await fetch(endpointURL, {\n\n46\n\n          body: JSON.stringify({\n\n51\n\n        }).then((response) \\=> response.json());\n\n54\n\n      // Add metadata to improve how the task displays in the logs\n\n55\n\n      { name: \"PagerDuty Install Addon\", icon: \"pagerduty\" }"
},
{
  "url": "https://trigger.dev/apis/caldotcom/examples/cal-slack-meeting-alert",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/caldotcom/examples/cal-slack-meeting-alert",
    "loadedTime": "2024-03-16T13:44:05.267Z",
    "referrerUrl": "https://trigger.dev/apis/caldotcom",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/caldotcom/examples/cal-slack-meeting-alert",
    "title": "Cal.com | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Cal.com | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/caldotcom"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, verifyRequestSignature } from \"@trigger.dev/sdk\";\n2\nimport { Slack } from \"@trigger.dev/slack\";\n4\nconst dateFormatter = new Intl.DateTimeFormat(\"en-US\", {\n9\nconst timeFormatter = new Intl.DateTimeFormat(\"en-US\", {\n13\nconst slack = new Slack({ id: \"slack\" });\n15\n// Create an HTTP Endpoint, with the cal.com details\n16\nconst caldotcom = client.defineHttpEndpoint({\n20\nverify: async (request) => {\n21\nreturn await verifyRequestSignature({\n23\nheaderName: \"X-Cal-Signature-256\",\n24\nsecret: process.env.CALDOTCOM_SECRET!,\n30\n// This job sends a Slack message when meetings are booked or canceled\n36\n// Create a trigger from the HTTP endpoint\n37\ntrigger: caldotcom.onRequest(),\n41\nrun: async (request, io, ctx) => {\n42\nconst body = await request.json();\n43\nawait io.logger.info(`Body`, body);\n45\nconst attendees = body.payload.attendees\n46\n.map((attendee: any) => attendee.email)\n47\n.join(\", \") as string[];\n49\nconst startTime = dateFormatter.format(new Date(body.payload.startTime));\n50\nconst endTime = timeFormatter.format(new Date(body.payload.endTime));\n52\nswitch (body.triggerEvent) {\n53\ncase \"BOOKING_CREATED\": {\n54\nawait io.slack.postMessage(\"booking-created\", {\n55\nchannel: process.env.SLACK_CHANNEL!,\n56\ntext: `Meeting booked:\\n ${attendees} \\n ${startTime}—${endTime}`,\n60\ncase \"BOOKING_CANCELLED\": {\n61\nawait io.slack.postMessage(\"booking-cancelled\", {\n62\nchannel: process.env.SLACK_CHANNEL!,\n63\ntext: `Meeting canceled:\\n ${attendees} \\n ${startTime}—${endTime}`,",
  "markdown": "1\n\nimport { TriggerClient, verifyRequestSignature } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n4\n\nconst dateFormatter \\= new Intl.DateTimeFormat(\"en-US\", {\n\n9\n\nconst timeFormatter \\= new Intl.DateTimeFormat(\"en-US\", {\n\n13\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n15\n\n// Create an HTTP Endpoint, with the cal.com details\n\n16\n\nconst caldotcom \\= client.defineHttpEndpoint({\n\n20\n\n  verify: async (request) \\=> {\n\n21\n\n    return await verifyRequestSignature({\n\n23\n\n      headerName: \"X-Cal-Signature-256\",\n\n24\n\n      secret: process.env.CALDOTCOM\\_SECRET!,\n\n30\n\n// This job sends a Slack message when meetings are booked or canceled\n\n36\n\n  // Create a trigger from the HTTP endpoint\n\n37\n\n  trigger: caldotcom.onRequest(),\n\n41\n\n  run: async (request, io, ctx) \\=> {\n\n42\n\n    const body \\= await request.json();\n\n43\n\n    await io.logger.info(\\`Body\\`, body);\n\n45\n\n    const attendees \\= body.payload.attendees\n\n46\n\n      .map((attendee: any) \\=> attendee.email)\n\n47\n\n      .join(\", \") as string\\[\\];\n\n49\n\n    const startTime \\= dateFormatter.format(new Date(body.payload.startTime));\n\n50\n\n    const endTime \\= timeFormatter.format(new Date(body.payload.endTime));\n\n52\n\n    switch (body.triggerEvent) {\n\n53\n\n      case \"BOOKING\\_CREATED\": {\n\n54\n\n        await io.slack.postMessage(\"booking-created\", {\n\n55\n\n          channel: process.env.SLACK\\_CHANNEL!,\n\n56\n\n          text: \\`Meeting booked:\\\\n ${attendees} \\\\n ${startTime}—${endTime}\\`,\n\n60\n\n      case \"BOOKING\\_CANCELLED\": {\n\n61\n\n        await io.slack.postMessage(\"booking-cancelled\", {\n\n62\n\n          channel: process.env.SLACK\\_CHANNEL!,\n\n63\n\n          text: \\`Meeting canceled:\\\\n ${attendees} \\\\n ${startTime}—${endTime}\\`,"
},
{
  "url": "https://trigger.dev/apis/caldotcom/examples/cal-find-bookings",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/caldotcom/examples/cal-find-bookings",
    "loadedTime": "2024-03-16T13:44:08.019Z",
    "referrerUrl": "https://trigger.dev/apis/caldotcom",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/caldotcom/examples/cal-find-bookings",
    "title": "Cal.com | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Cal.com | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/caldotcom"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n3\n// API reference: https://cal.com/docs/enterprise-features/api/api-reference/\n4\n// If you get the error 'An error occurred while querying the database', this may because you have\n5\n// linked calendars in your account. This is a known Cal.com issue.\n6\n// Please reach out to us on Discord if you need help.\n8\nid: \"cal-dot-com-find-all-bookings\",\n9\nname: \"Cal.com find all bookings\",\n11\ntrigger: eventTrigger({\n12\nname: \"cal.com.find.bookings\",\n14\nrun: async (payload, io, ctx) => {\n15\n// Wrap any Cal.com API call in io.runTask so it's resumable and displays in logs\n19\nconst url = `https://api.cal.com/v1/bookings?apiKey=${process.env.CAL_API_KEY}`;\n20\nconst response = await fetch(url);\n21\nreturn response.json();\n24\n// Add metadata to improve how the task displays in the logs\n25\n{ name: \"Find all bookings\", icon: \"cal\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n3\n\n// API reference: https://cal.com/docs/enterprise-features/api/api-reference/\n\n4\n\n// If you get the error 'An error occurred while querying the database', this may because you have\n\n5\n\n// linked calendars in your account. This is a known Cal.com issue.\n\n6\n\n// Please reach out to us on Discord if you need help.\n\n8\n\n  id: \"cal-dot-com-find-all-bookings\",\n\n9\n\n  name: \"Cal.com find all bookings\",\n\n11\n\n  trigger: eventTrigger({\n\n12\n\n    name: \"cal.com.find.bookings\",\n\n14\n\n  run: async (payload, io, ctx) \\=> {\n\n15\n\n    // Wrap any Cal.com API call in io.runTask so it's resumable and displays in logs\n\n19\n\n        const url \\= \\`https://api.cal.com/v1/bookings?apiKey=${process.env.CAL\\_API\\_KEY}\\`;\n\n20\n\n        const response \\= await fetch(url);\n\n21\n\n        return response.json();\n\n24\n\n      // Add metadata to improve how the task displays in the logs\n\n25\n\n      { name: \"Find all bookings\", icon: \"cal\" }"
},
{
  "url": "https://trigger.dev/apis/resend/examples/resend-send-drip-campaign",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/resend/examples/resend-send-drip-campaign",
    "loadedTime": "2024-03-16T13:44:15.759Z",
    "referrerUrl": "https://trigger.dev/apis/resend",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/resend/examples/resend-send-drip-campaign",
    "title": "Resend | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Resend | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/resend"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, TriggerContext, eventTrigger } from \"@trigger.dev/sdk\";\n7\n} from \"./mocks/reactEmails\";\n8\nimport { Resend } from \"@trigger.dev/resend\";\n9\nimport { z } from \"zod\";\n11\nconst resend = new Resend({\n13\napiKey: process.env.RESEND_API_KEY!,\n16\n// This job sends a drip campaign using Resend\n18\nid: \"resend-drip-campaign\",\n19\nname: \"Resend: email drip campaign\",\n21\ntrigger: eventTrigger({\n22\nname: \"send.drip.campaign\",\n25\n// The 'from' email address must be a verified domain in your Resend account.\n33\nrun: async (payload, io, ctx) => {\n35\ntext: `Hi there, welcome to our community! This is the first email we send you to help you get started.`,\n38\n// Email 1, triggered by an event\n39\nawait io.resend.sendEmail(\"email-1\", {\n42\nsubject: `Thanks for joining Acme Inc`,\n44\nreact: <FirstEmail name={payload.name} text={email1.text} />,\n47\nawait io.wait(\"wait-1-day\", delay(60 * 60 * 24 * 1, ctx));\n50\ntext: `Hi there, welcome to our community! This is the second email we send you to help you get started.`,\n53\n// Email 2, triggered after a day\n54\nawait io.resend.sendEmail(\"email-2\", {\n57\nsubject: `Here are some tips to get started`,\n59\nreact: <SecondEmail name={payload.name} text={email2.text} />,\n62\nawait io.wait(\"wait-4-days\", delay(60 * 60 * 24 * 4, ctx));\n65\ntext: `Hi there, welcome to our community! This is the third email we send you to help you get started.`,\n68\n// Email 3, triggered after 5 days\n69\nawait io.resend.sendEmail(\"email-3\", {\n72\nsubject: `Do you have any questions?`,\n74\nreact: <ThirdEmail name={payload.name} text={email3.text} />,\n77\nawait io.wait(\"wait-26-days\", delay(60 * 60 * 24 * 26, ctx));\n80\ntext: `This is the fourth email designed to re-engage your users after a month.`,\n83\n// Email 4, triggered after 30 days\n84\nawait io.resend.sendEmail(\"email-4\", {\n87\nsubject: `How are you getting on with Acme Inc.?`,\n89\nreact: <MonthLaterEmail name={payload.name} text={email4.text} />,\n94\nfunction delay(seconds: number, context: TriggerContext) {\n95\nif (context.environment.type === \"DEVELOPMENT\" || context.run.isTest) {",
  "markdown": "1\n\nimport { TriggerClient, TriggerContext, eventTrigger } from \"@trigger.dev/sdk\";\n\n7\n\n} from \"./mocks/reactEmails\";\n\n8\n\nimport { Resend } from \"@trigger.dev/resend\";\n\n9\n\nimport { z } from \"zod\";\n\n11\n\nconst resend \\= new Resend({\n\n13\n\n  apiKey: process.env.RESEND\\_API\\_KEY!,\n\n16\n\n// This job sends a drip campaign using Resend\n\n18\n\n  id: \"resend-drip-campaign\",\n\n19\n\n  name: \"Resend: email drip campaign\",\n\n21\n\n  trigger: eventTrigger({\n\n22\n\n    name: \"send.drip.campaign\",\n\n25\n\n      // The 'from' email address must be a verified domain in your Resend account.\n\n33\n\n  run: async (payload, io, ctx) \\=> {\n\n35\n\n      text: \\`Hi there, welcome to our community! This is the first email we send you to help you get started.\\`,\n\n38\n\n    // Email 1, triggered by an event\n\n39\n\n    await io.resend.sendEmail(\"email-1\", {\n\n42\n\n      subject: \\`Thanks for joining Acme Inc\\`,\n\n44\n\n      react: <FirstEmail name\\={payload.name} text\\={email1.text} /\\>,\n\n47\n\n    await io.wait(\"wait-1-day\", delay(60 \\* 60 \\* 24 \\* 1, ctx));\n\n50\n\n      text: \\`Hi there, welcome to our community! This is the second email we send you to help you get started.\\`,\n\n53\n\n    // Email 2, triggered after a day\n\n54\n\n    await io.resend.sendEmail(\"email-2\", {\n\n57\n\n      subject: \\`Here are some tips to get started\\`,\n\n59\n\n      react: <SecondEmail name\\={payload.name} text\\={email2.text} /\\>,\n\n62\n\n    await io.wait(\"wait-4-days\", delay(60 \\* 60 \\* 24 \\* 4, ctx));\n\n65\n\n      text: \\`Hi there, welcome to our community! This is the third email we send you to help you get started.\\`,\n\n68\n\n    // Email 3, triggered after 5 days\n\n69\n\n    await io.resend.sendEmail(\"email-3\", {\n\n72\n\n      subject: \\`Do you have any questions?\\`,\n\n74\n\n      react: <ThirdEmail name\\={payload.name} text\\={email3.text} /\\>,\n\n77\n\n    await io.wait(\"wait-26-days\", delay(60 \\* 60 \\* 24 \\* 26, ctx));\n\n80\n\n      text: \\`This is the fourth email designed to re-engage your users after a month.\\`,\n\n83\n\n    // Email 4, triggered after 30 days\n\n84\n\n    await io.resend.sendEmail(\"email-4\", {\n\n87\n\n      subject: \\`How are you getting on with Acme Inc.?\\`,\n\n89\n\n      react: <MonthLaterEmail name\\={payload.name} text\\={email4.text} /\\>,\n\n94\n\nfunction delay(seconds: number, context: TriggerContext) {\n\n95\n\n  if (context.environment.type \\=== \"DEVELOPMENT\" || context.run.isTest) {"
},
{
  "url": "https://trigger.dev/apis/resend/examples/send-react-email",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/resend/examples/send-react-email",
    "loadedTime": "2024-03-16T13:44:23.465Z",
    "referrerUrl": "https://trigger.dev/apis/resend",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/resend/examples/send-react-email",
    "title": "Resend | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Resend | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/resend"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { Resend } from \"@trigger.dev/resend\";\n3\nimport { z } from \"zod\";\n6\nimport { Html } from \"@react-email/html\";\n7\nimport { Head } from \"@react-email/head\";\n8\nimport { Text } from \"@react-email/text\";\n9\nimport { Button } from \"@react-email/button\";\n10\nimport { Section } from \"@react-email/section\";\n11\nimport { Preview } from \"@react-email/preview\";\n12\nimport { Container } from \"@react-email/container\";\n14\nconst resend = new Resend({\n16\napiKey: process.env.RESEND_API_KEY!,\n23\npadding: \"20px 0 48px\",\n33\nborder: \"solid 1px #dedede\",\n35\ntextAlign: \"center\" as const,\n40\ntextAlign: \"left\" as const,\n46\nbackgroundColor: \"#28a745\",\n49\nborderRadius: \"0.2em\",\n50\ntextAlign: \"center\" as const,\n53\nfunction BasicEmail({ name, text }: { name: string; text: string }) {\n57\n<Preview>Welcome to Acme Inc!</Preview>\n58\n<Container style={container}>\n59\n<Section style={section}>\n60\n<Text>Hey {name}!</Text>\n62\n<Button style={button} pY={4} pX={4} href=\"https://acmecompany.inc/\">\n71\n// This job sends a basic email built using React and Typescript\n73\nid: \"resend-send-react-email\",\n74\nname: \"Resend: send react email\",\n76\ntrigger: eventTrigger({\n83\n// The 'from' email address must be a verified domain in your Resend account.\n90\nrun: async (payload, io, ctx) => {\n91\nawait io.resend.sendEmail(\"send-email\", {\n93\nsubject: payload.subject,\n96\n// BasicEmail is the custom React component that will be used to style the email\n97\nreact: <BasicEmail name={payload.name} text={payload.text} />,",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Resend } from \"@trigger.dev/resend\";\n\n3\n\nimport { z } from \"zod\";\n\n6\n\nimport { Html } from \"@react-email/html\";\n\n7\n\nimport { Head } from \"@react-email/head\";\n\n8\n\nimport { Text } from \"@react-email/text\";\n\n9\n\nimport { Button } from \"@react-email/button\";\n\n10\n\nimport { Section } from \"@react-email/section\";\n\n11\n\nimport { Preview } from \"@react-email/preview\";\n\n12\n\nimport { Container } from \"@react-email/container\";\n\n14\n\nconst resend \\= new Resend({\n\n16\n\n  apiKey: process.env.RESEND\\_API\\_KEY!,\n\n23\n\n  padding: \"20px 0 48px\",\n\n33\n\n  border: \"solid 1px #dedede\",\n\n35\n\n  textAlign: \"center\" as const,\n\n40\n\n  textAlign: \"left\" as const,\n\n46\n\n  backgroundColor: \"#28a745\",\n\n49\n\n  borderRadius: \"0.2em\",\n\n50\n\n  textAlign: \"center\" as const,\n\n53\n\nfunction BasicEmail({ name, text }: { name: string; text: string }) {\n\n57\n\n      <Preview\\>Welcome to Acme Inc!</Preview\\>\n\n58\n\n      <Container style\\={container}\\>\n\n59\n\n        <Section style\\={section}\\>\n\n60\n\n          <Text\\>Hey {name}!</Text\\>\n\n62\n\n          <Button style\\={button} pY\\={4} pX\\={4} href\\=\"https://acmecompany.inc/\"\\>\n\n71\n\n// This job sends a basic email built using React and Typescript\n\n73\n\n  id: \"resend-send-react-email\",\n\n74\n\n  name: \"Resend: send react email\",\n\n76\n\n  trigger: eventTrigger({\n\n83\n\n      // The 'from' email address must be a verified domain in your Resend account.\n\n90\n\n  run: async (payload, io, ctx) \\=> {\n\n91\n\n    await io.resend.sendEmail(\"send-email\", {\n\n93\n\n      subject: payload.subject,\n\n96\n\n      // BasicEmail is the custom React component that will be used to style the email\n\n97\n\n      react: <BasicEmail name\\={payload.name} text\\={payload.text} /\\>,"
},
{
  "url": "https://trigger.dev/apis/resend/examples/resend-send-basic-email",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/resend/examples/resend-send-basic-email",
    "loadedTime": "2024-03-16T13:44:28.172Z",
    "referrerUrl": "https://trigger.dev/apis/resend",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/resend/examples/resend-send-basic-email",
    "title": "Resend | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Resend | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/resend"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { Resend } from \"@trigger.dev/resend\";\n3\nimport { z } from \"zod\";\n5\nconst resend = new Resend({\n7\napiKey: process.env.RESEND_API_KEY!,\n10\n// This job sends a basic email to a 'to' email address, a 'subject', a 'text' field and a 'from' email address.\n12\nid: \"resend-send-basic-email\",\n13\nname: \"Resend: send basic email\",\n15\ntrigger: eventTrigger({\n18\nto: z.union([z.string(), z.array(z.string())]),\n21\n// The 'from' email address must be a verified domain in your Resend account.\n28\nrun: async (payload, io, ctx) => {\n29\nawait io.resend.sendEmail(\"send-email\", {\n31\nsubject: payload.subject,",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Resend } from \"@trigger.dev/resend\";\n\n3\n\nimport { z } from \"zod\";\n\n5\n\nconst resend \\= new Resend({\n\n7\n\n  apiKey: process.env.RESEND\\_API\\_KEY!,\n\n10\n\n// This job sends a basic email to a 'to' email address, a 'subject', a 'text' field and a 'from' email address.\n\n12\n\n  id: \"resend-send-basic-email\",\n\n13\n\n  name: \"Resend: send basic email\",\n\n15\n\n  trigger: eventTrigger({\n\n18\n\n      to: z.union(\\[z.string(), z.array(z.string())\\]),\n\n21\n\n      // The 'from' email address must be a verified domain in your Resend account.\n\n28\n\n  run: async (payload, io, ctx) \\=> {\n\n29\n\n    await io.resend.sendEmail(\"send-email\", {\n\n31\n\n      subject: payload.subject,"
},
{
  "url": "https://trigger.dev/apis/resend/examples/welcome-email-campaign",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/resend/examples/welcome-email-campaign",
    "loadedTime": "2024-03-16T13:44:33.262Z",
    "referrerUrl": "https://trigger.dev/apis/resend",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/resend/examples/welcome-email-campaign",
    "title": "Resend | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Resend | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/resend"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { SupabaseManagement } from \"@trigger.dev/supabase\";\n2\nimport { Database } from \"./mocks/supabase-types\";\n3\nimport { Resend } from \"@trigger.dev/resend\";\n4\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n6\n// Use OAuth to authenticate with Supabase Management API\n7\nconst supabaseManagement = new SupabaseManagement({\n8\nid: \"supabase-management\",\n11\nconst db = supabaseManagement.db<Database>(\n12\n// process.env.NEXT_PUBLIC_SUPABASE_URL! // Use if using standard Supabase domain\n13\nprocess.env.SUPABASE_REFERENCE_ID! // Use if using a Supabase custom domain\n16\nconst resend = new Resend({\n18\napiKey: process.env.RESEND_API_KEY!,\n21\n// This job triggers when a Supabase user confirms their email address\n23\nid: \"welcome-email-campaign\",\n24\nname: \"Welcome Email Campaign\",\n26\ntrigger: db.onUpdated({\n27\n// This job triggers when there is an update in the 'users' table of the 'auth' schema.\n28\n// Specifically, it watches for a change in the 'email_confirmed_at' field from null (unconfirmed email)\n29\n// to a timestamp (confirmed email).\n34\nemail_confirmed_at: [{ $isNull: true }],\n37\nemail_confirmed_at: [{ $isNull: false }],\n44\nrun: async (payload, io, ctx) => {\n45\nif (!payload.record.email) {\n50\nctx.run.isTest || ctx.environment.type === \"DEVELOPMENT\";\n52\n// Only wait for 10 seconds when running as a test or in the development environment\n53\nawait io.wait(\"wait-1\", isTestOrDev ? 10 : 60 * 60); // 1 hour\n55\nconst email1 = await io.resend.sendEmail(\"email-1\", {\n56\nto: payload.record.email,\n57\nsubject: `Thanks for joining Acme Inc`,\n58\ntext: `Hi there, welcome to our community! This is the first email we send you to help you get started.`,\n59\nfrom: process.env.RESEND_FROM_EMAIL!,\n62\nawait io.wait(\"wait-2\", isTestOrDev ? 10 : 60 * 60 * 12); // 12 hours\n64\nconst email2 = await io.resend.sendEmail(\"email-2\", {\n65\nto: payload.record.email,\n66\nsubject: `Here are some tips to get started`,\n67\ntext: `Hi there, welcome to our community! This is the second email we send you to help you get started.`,\n68\nfrom: process.env.RESEND_FROM_EMAIL!,\n71\nawait io.wait(\"wait-3\", isTestOrDev ? 10 : 60 * 60 * 24); // 24 hours\n73\nconst email3 = await io.resend.sendEmail(\"email-3\", {\n74\nto: payload.record.email,\n75\nsubject: \"Do you have any questions?\",\n76\ntext: `Hi there, welcome to our community! This is the third email we send you to help you get started.`,\n77\nfrom: process.env.RESEND_FROM_EMAIL!,",
  "markdown": "1\n\nimport { SupabaseManagement } from \"@trigger.dev/supabase\";\n\n2\n\nimport { Database } from \"./mocks/supabase-types\";\n\n3\n\nimport { Resend } from \"@trigger.dev/resend\";\n\n4\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n6\n\n// Use OAuth to authenticate with Supabase Management API\n\n7\n\nconst supabaseManagement \\= new SupabaseManagement({\n\n8\n\n  id: \"supabase-management\",\n\n11\n\nconst db \\= supabaseManagement.db<Database\\>(\n\n12\n\n  // process.env.NEXT\\_PUBLIC\\_SUPABASE\\_URL! // Use if using standard Supabase domain\n\n13\n\n  process.env.SUPABASE\\_REFERENCE\\_ID! // Use if using a Supabase custom domain\n\n16\n\nconst resend \\= new Resend({\n\n18\n\n  apiKey: process.env.RESEND\\_API\\_KEY!,\n\n21\n\n// This job triggers when a Supabase user confirms their email address\n\n23\n\n  id: \"welcome-email-campaign\",\n\n24\n\n  name: \"Welcome Email Campaign\",\n\n26\n\n  trigger: db.onUpdated({\n\n27\n\n    // This job triggers when there is an update in the 'users' table of the 'auth' schema.\n\n28\n\n    // Specifically, it watches for a change in the 'email\\_confirmed\\_at' field from null (unconfirmed email)\n\n29\n\n    // to a timestamp (confirmed email).\n\n34\n\n        email\\_confirmed\\_at: \\[{ $isNull: true }\\],\n\n37\n\n        email\\_confirmed\\_at: \\[{ $isNull: false }\\],\n\n44\n\n  run: async (payload, io, ctx) \\=> {\n\n45\n\n    if (!payload.record.email) {\n\n50\n\n      ctx.run.isTest || ctx.environment.type \\=== \"DEVELOPMENT\";\n\n52\n\n    // Only wait for 10 seconds when running as a test or in the development environment\n\n53\n\n    await io.wait(\"wait-1\", isTestOrDev ? 10 : 60 \\* 60); // 1 hour\n\n55\n\n    const email1 \\= await io.resend.sendEmail(\"email-1\", {\n\n56\n\n      to: payload.record.email,\n\n57\n\n      subject: \\`Thanks for joining Acme Inc\\`,\n\n58\n\n      text: \\`Hi there, welcome to our community! This is the first email we send you to help you get started.\\`,\n\n59\n\n      from: process.env.RESEND\\_FROM\\_EMAIL!,\n\n62\n\n    await io.wait(\"wait-2\", isTestOrDev ? 10 : 60 \\* 60 \\* 12); // 12 hours\n\n64\n\n    const email2 \\= await io.resend.sendEmail(\"email-2\", {\n\n65\n\n      to: payload.record.email,\n\n66\n\n      subject: \\`Here are some tips to get started\\`,\n\n67\n\n      text: \\`Hi there, welcome to our community! This is the second email we send you to help you get started.\\`,\n\n68\n\n      from: process.env.RESEND\\_FROM\\_EMAIL!,\n\n71\n\n    await io.wait(\"wait-3\", isTestOrDev ? 10 : 60 \\* 60 \\* 24); // 24 hours\n\n73\n\n    const email3 \\= await io.resend.sendEmail(\"email-3\", {\n\n74\n\n      to: payload.record.email,\n\n75\n\n      subject: \"Do you have any questions?\",\n\n76\n\n      text: \\`Hi there, welcome to our community! This is the third email we send you to help you get started.\\`,\n\n77\n\n      from: process.env.RESEND\\_FROM\\_EMAIL!,"
},
{
  "url": "https://trigger.dev/apis/salesforce/examples/salesforce-create-contact",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/salesforce/examples/salesforce-create-contact",
    "loadedTime": "2024-03-16T13:44:42.656Z",
    "referrerUrl": "https://trigger.dev/apis/salesforce",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/salesforce/examples/salesforce-create-contact",
    "title": "Salesforce | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Salesforce | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/salesforce"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n3\nimport jsforce from \"jsforce\";\n5\n// Create a Salesforce account: https://developer.salesforce.com/signup\n6\n// jsforce SDK: https://developer.salesforce.com/docs/platform/functions/guide/develop.html#use-salesforce-apis\n7\n// Salesforce only provides API access for the following editions: Enterprise, Unlimited, Developer or Performance Editions\n8\n// Salesforce connection instance\n9\nconst conn = new jsforce.Connection({\n10\nloginUrl: process.env.SF_LOGIN_URL,\n15\nprocess.env.SF_USERNAME!,\n16\nprocess.env.SF_PASSWORD! + process.env.SF_TOKEN!, // Get your token from https://help.salesforce.com/articleView?id=user_security_token.htm&type=5\n17\n(error, userInfo) => {\n19\nreturn console.error(error);\n21\nconsole.log(\"Salesforce login successful. User ID: \" + userInfo.id);\n27\nid: \"salesforce-create-contact\",\n28\nname: \"Salesforce create contact\",\n30\ntrigger: eventTrigger({\n31\nname: \"salesforce-create-contact\",\n37\nrun: async (payload, io, ctx) => {\n38\nconst { Name, Website } = payload;\n40\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n42\n\"Salesforce create contact\",\n44\n// Create a new record in Salesforce\n45\nawait conn.sobject(\"Account\").create({ Name, Website }, (err, ret) => {\n46\nif (err || !ret.success) {\n47\nreturn console.error(err, ret);\n49\nconsole.log(\"Created record id : \" + ret.id);\n53\n// Add metadata to improve how the task displays in the logs\n54\n{ name: \"Salesforce create contact\", icon: \"salesforce\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n3\n\nimport jsforce from \"jsforce\";\n\n5\n\n// Create a Salesforce account: https://developer.salesforce.com/signup\n\n6\n\n// jsforce SDK: https://developer.salesforce.com/docs/platform/functions/guide/develop.html#use-salesforce-apis\n\n7\n\n// Salesforce only provides API access for the following editions: Enterprise,  Unlimited, Developer or Performance Editions\n\n8\n\n// Salesforce connection instance\n\n9\n\nconst conn \\= new jsforce.Connection({\n\n10\n\n  loginUrl: process.env.SF\\_LOGIN\\_URL,\n\n15\n\n  process.env.SF\\_USERNAME!,\n\n16\n\n  process.env.SF\\_PASSWORD! + process.env.SF\\_TOKEN!, // Get your token from https://help.salesforce.com/articleView?id=user\\_security\\_token.htm&type=5\n\n17\n\n  (error, userInfo) \\=> {\n\n19\n\n      return console.error(error);\n\n21\n\n      console.log(\"Salesforce login successful. User ID: \" + userInfo.id);\n\n27\n\n  id: \"salesforce-create-contact\",\n\n28\n\n  name: \"Salesforce create contact\",\n\n30\n\n  trigger: eventTrigger({\n\n31\n\n    name: \"salesforce-create-contact\",\n\n37\n\n  run: async (payload, io, ctx) \\=> {\n\n38\n\n    const { Name, Website } \\= payload;\n\n40\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n42\n\n      \"Salesforce create contact\",\n\n44\n\n        // Create a new record in Salesforce\n\n45\n\n        await conn.sobject(\"Account\").create({ Name, Website }, (err, ret) \\=> {\n\n46\n\n          if (err || !ret.success) {\n\n47\n\n            return console.error(err, ret);\n\n49\n\n          console.log(\"Created record id : \" + ret.id);\n\n53\n\n      // Add metadata to improve how the task displays in the logs\n\n54\n\n      { name: \"Salesforce create contact\", icon: \"salesforce\" }"
},
{
  "url": "https://trigger.dev/apis/discord/examples/discord-bot-send-message",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/discord/examples/discord-bot-send-message",
    "loadedTime": "2024-03-16T13:44:45.461Z",
    "referrerUrl": "https://trigger.dev/apis/discord",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/discord/examples/discord-bot-send-message",
    "title": "Discord | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Discord | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/discord"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { REST } from \"@discordjs/rest\";\n2\nimport { API } from \"@discordjs/core\";\n3\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n6\n// SDK: https://discord.js.org/docs/packages/core/1.0.1\n7\n// To get the Discord bot token follow the instructions here:\n8\n// https://discord.com/developers/docs/getting-started\n9\n// Bot needs to be added to a server to be able to send messages.\n10\n// Oauth URL generator to add the bot to a server. Scopes: bot, send messages\n11\n// Create REST and WebSocket managers directly\n12\nconst rest = new REST({ version: \"10\" }).setToken(\n13\nprocess.env.DISCORD_BOT_TOKEN!\n16\n// Create a client to emit relevant events.\n17\nconst discordApi = new API(rest);\n20\nid: \"discord-send-message\",\n21\nname: \"Discord send message\",\n23\ntrigger: eventTrigger({\n24\nname: \"discord-send-message\",\n26\n// To get the channel ID, right click on the channel and click \"Copy ID\".\n27\n// NB: You need to enable developer mode in Discord settings.\n28\nchannelId: z.string(),\n29\ncontent: z.string(), // The message content\n32\nrun: async (payload, io, ctx) => {\n33\nconst { channelId, content } = payload;\n35\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n37\n\"Discord send message\",\n39\n// See more https://discord.js.org/docs/packages/core/1.0.1/ChannelsAPI:Class\n40\nconst channelsAPI = discordApi.channels;\n41\nawait channelsAPI.createMessage(channelId, { content });\n44\n// Add metadata to the task to improve how it displays in the logs\n45\n{ name: \"Discord send message\", icon: \"discord\" }",
  "markdown": "1\n\nimport { REST } from \"@discordjs/rest\";\n\n2\n\nimport { API } from \"@discordjs/core\";\n\n3\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n6\n\n// SDK: https://discord.js.org/docs/packages/core/1.0.1\n\n7\n\n// To get the Discord bot token follow the instructions here:\n\n8\n\n// https://discord.com/developers/docs/getting-started\n\n9\n\n// Bot needs to be added to a server to be able to send messages.\n\n10\n\n// Oauth URL generator to add the bot to a server. Scopes: bot, send messages\n\n11\n\n// Create REST and WebSocket managers directly\n\n12\n\nconst rest \\= new REST({ version: \"10\" }).setToken(\n\n13\n\n  process.env.DISCORD\\_BOT\\_TOKEN!\n\n16\n\n// Create a client to emit relevant events.\n\n17\n\nconst discordApi \\= new API(rest);\n\n20\n\n  id: \"discord-send-message\",\n\n21\n\n  name: \"Discord send message\",\n\n23\n\n  trigger: eventTrigger({\n\n24\n\n    name: \"discord-send-message\",\n\n26\n\n      // To get the channel ID, right click on the channel and click \"Copy ID\".\n\n27\n\n      // NB: You need to enable developer mode in Discord settings.\n\n28\n\n      channelId: z.string(),\n\n29\n\n      content: z.string(), // The message content\n\n32\n\n  run: async (payload, io, ctx) \\=> {\n\n33\n\n    const { channelId, content } \\= payload;\n\n35\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n37\n\n      \"Discord send message\",\n\n39\n\n        // See more https://discord.js.org/docs/packages/core/1.0.1/ChannelsAPI:Class\n\n40\n\n        const channelsAPI \\= discordApi.channels;\n\n41\n\n        await channelsAPI.createMessage(channelId, { content });\n\n44\n\n      // Add metadata to the task to improve how it displays in the logs\n\n45\n\n      { name: \"Discord send message\", icon: \"discord\" }"
},
{
  "url": "https://trigger.dev/apis/salesforce/examples/salesforce-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/salesforce/examples/salesforce-http-endpoint",
    "loadedTime": "2024-03-16T13:44:46.263Z",
    "referrerUrl": "https://trigger.dev/apis/salesforce",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/salesforce/examples/salesforce-http-endpoint",
    "title": "Salesforce | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Salesforce | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/salesforce"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, verifyRequestSignature } from \"@trigger.dev/sdk\";\n3\n// Create an HTTP Endpoint to listen to Salesforce webhooks\n4\n// (This will create the endpoint URL and Secret on the `trigger.dev` dashboard)\n5\n// Salesforce does not have built-in webhooks. `Object Triggers` and `Callouts` can be used to simulate them.\n6\n// Setup the `Trigger` on the required Object. The `Callout` has to be marked async in order to work.\n7\n// The `Callout` has to execute an HTTP request to the endpoint URL on the dashboard with the necessary data.\n8\n// It has to compute a Hmac sign for the webhook body using the Secret from `trigger.dev` dashboard.\n9\n// Set the `SF_WEBHOOK_SIGNING_SECRET` (Secret) in the .env file.\n10\nconst salesforce = client.defineHttpEndpoint({\n12\nsource: \"salesforce.com\",\n14\nverify: async (request) => {\n15\nreturn await verifyRequestSignature({\n17\nheaderName: \"X-SF-Signature-256\",\n18\nsecret: process.env.SF_WEBHOOK_SIGNING_SECRET!,\n25\nid: \"http-salesforce\",\n26\nname: \"HTTP Salesforce\",\n29\n// Create a trigger from the HTTP endpoint\n30\ntrigger: salesforce.onRequest(),\n31\nrun: async (request, io, ctx) => {\n32\nconst body = await request.json();\n33\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient, verifyRequestSignature } from \"@trigger.dev/sdk\";\n\n3\n\n// Create an HTTP Endpoint to listen to Salesforce webhooks\n\n4\n\n// (This will create the endpoint URL and Secret on the \\`trigger.dev\\` dashboard)\n\n5\n\n// Salesforce does not have built-in webhooks. \\`Object Triggers\\` and \\`Callouts\\` can be used to simulate them.\n\n6\n\n// Setup the \\`Trigger\\` on the required Object. The \\`Callout\\` has to be marked async in order to work.\n\n7\n\n// The \\`Callout\\` has to execute an HTTP request to the endpoint URL on the dashboard with the necessary data.\n\n8\n\n// It has to compute a Hmac sign for the webhook body using the Secret from \\`trigger.dev\\` dashboard.\n\n9\n\n// Set the \\`SF\\_WEBHOOK\\_SIGNING\\_SECRET\\` (Secret) in the .env file.\n\n10\n\nconst salesforce \\= client.defineHttpEndpoint({\n\n12\n\n  source: \"salesforce.com\",\n\n14\n\n  verify: async (request) \\=> {\n\n15\n\n    return await verifyRequestSignature({\n\n17\n\n      headerName: \"X-SF-Signature-256\",\n\n18\n\n      secret: process.env.SF\\_WEBHOOK\\_SIGNING\\_SECRET!,\n\n25\n\n  id: \"http-salesforce\",\n\n26\n\n  name: \"HTTP Salesforce\",\n\n29\n\n  // Create a trigger from the HTTP endpoint\n\n30\n\n  trigger: salesforce.onRequest(),\n\n31\n\n  run: async (request, io, ctx) \\=> {\n\n32\n\n    const body \\= await request.json();\n\n33\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/segment/examples/segment-get-source-information",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/segment/examples/segment-get-source-information",
    "loadedTime": "2024-03-16T13:45:01.233Z",
    "referrerUrl": "https://trigger.dev/apis/segment",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/segment/examples/segment-get-source-information",
    "title": "Segment | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Segment | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/segment"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n3\nimport * as PublicAPI from \"@segment/public-api-sdk-typescript\";\n5\n// Guide to create a segment public api: https://segment.com/docs/api/public-api/\n6\n// You need to upgrade your account to a team account or business to get access to the public API.\n7\nconst publicAPI = PublicAPI.configureApis(\n8\nprocess.env.SEGMENT_PUBLIC_API_KEY!\n12\nid: \"segment-get-source\",\n13\nname: \"Segment Get Source\",\n15\ntrigger: eventTrigger({\n16\nname: \"segment-get-source\",\n21\nrun: async (payload, io, ctx) => {\n22\nconst { sourceId } = payload;\n24\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n28\nconst source = await publicAPI.sources.getSource(sourceId);\n29\nreturn JSON.parse(JSON.stringify(source));\n32\n// Add metadata to improve how the task displays in the logs\n33\n{ name: \"segment get source\", icon: \"segment\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n3\n\nimport \\* as PublicAPI from \"@segment/public-api-sdk-typescript\";\n\n5\n\n// Guide to create a segment public api: https://segment.com/docs/api/public-api/\n\n6\n\n// You need to upgrade your account to a team account or business to get access to the public API.\n\n7\n\nconst publicAPI \\= PublicAPI.configureApis(\n\n8\n\n  process.env.SEGMENT\\_PUBLIC\\_API\\_KEY!\n\n12\n\n  id: \"segment-get-source\",\n\n13\n\n  name: \"Segment Get Source\",\n\n15\n\n  trigger: eventTrigger({\n\n16\n\n    name: \"segment-get-source\",\n\n21\n\n  run: async (payload, io, ctx) \\=> {\n\n22\n\n    const { sourceId } \\= payload;\n\n24\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n28\n\n        const source \\= await publicAPI.sources.getSource(sourceId);\n\n29\n\n        return JSON.parse(JSON.stringify(source));\n\n32\n\n      // Add metadata to improve how the task displays in the logs\n\n33\n\n      { name: \"segment get source\", icon: \"segment\" }"
},
{
  "url": "https://trigger.dev/apis/discord/examples/discord-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/discord/examples/discord-http-endpoint",
    "loadedTime": "2024-03-16T13:45:01.937Z",
    "referrerUrl": "https://trigger.dev/apis/discord",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/discord/examples/discord-http-endpoint",
    "title": "Discord | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Discord | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/discord"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport nacl from \"tweetnacl\";\n2\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n4\nconst verifyRequestSignature = async (request: Request): Promise<any[]> => {\n5\nconst body = await request.text();\n6\nconst jsonBody = JSON.parse(body);\n7\nconst signature = request.headers.get(\"x-signature-ed25519\");\n8\nconst timestamp = request.headers.get(\"x-signature-timestamp\");\n9\nconst discordKey = process.env.DISCORD_APPLICATION_KEY;\n10\nif (!discordKey || !signature || !timestamp) return [false, jsonBody];\n12\nnacl.sign.detached.verify(\n13\nBuffer.from(timestamp + body),\n14\nBuffer.from(signature, \"hex\"),\n15\nBuffer.from(discordKey, \"hex\")\n21\nconst discord = client.defineHttpEndpoint({\n23\nsource: \"discord.com\",\n25\n// This is only needed for APIs like Discord which don't setup the webhook until you pass the test\n27\n// Don't trigger runs if they match this filter\n28\nskipTriggeringRuns: true,\n32\nhandler: async (request) => {\n33\nconst success = await verifyRequestSignature(request);\n34\n// If Discord signature and timestamp don't match, return 401\n35\nif (!success[0]) return new Response(\"Unauthorized\", { status: 401 });\n36\n// If successful, get the Interaction Type sent by Discord of the request\n37\nconst { type } = success[1];\n38\n// If it's type 1, it's a PING from discord, just respond with the type as is\n39\nif (Number(type) === 1)\n40\nreturn new Response(JSON.stringify({ type }), {\n41\nheaders: { \"Content-Type\": \"application/json\" },\n43\n// If it's type 2, it's a Slash Command from Discord, respond with what you want to be replied\n44\nif (Number(type) === 2)\n49\ncontent: `Hello, New!`,\n52\n{ headers: { \"Content-Type\": \"application/json\" } }\n54\n// If not either of the above types, just return a 400\n55\nreturn new Response(JSON.stringify({ error: \"bad request\" }), {\n60\nverify: async (request) => {\n61\nconst success = await verifyRequestSignature(request);\n62\nif (success[0]) return { success: success[0] };\n63\nreturn { success: false, reason: \"Failed ed25519 verification\" };\n67\n// A job that runs when the HTTP endpoint is called from Discord\n73\n// Create a trigger from the HTTP endpoint\n74\ntrigger: discord.onRequest(),\n75\nrun: async (request, io, ctx) => {\n76\nconst body = await request.json();\n77\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport nacl from \"tweetnacl\";\n\n2\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n4\n\nconst verifyRequestSignature \\= async (request: Request): Promise<any\\[\\]\\> \\=> {\n\n5\n\n  const body \\= await request.text();\n\n6\n\n  const jsonBody \\= JSON.parse(body);\n\n7\n\n  const signature \\= request.headers.get(\"x-signature-ed25519\");\n\n8\n\n  const timestamp \\= request.headers.get(\"x-signature-timestamp\");\n\n9\n\n  const discordKey \\= process.env.DISCORD\\_APPLICATION\\_KEY;\n\n10\n\n  if (!discordKey || !signature || !timestamp) return \\[false, jsonBody\\];\n\n12\n\n    nacl.sign.detached.verify(\n\n13\n\n      Buffer.from(timestamp + body),\n\n14\n\n      Buffer.from(signature, \"hex\"),\n\n15\n\n      Buffer.from(discordKey, \"hex\")\n\n21\n\nconst discord \\= client.defineHttpEndpoint({\n\n23\n\n  source: \"discord.com\",\n\n25\n\n  // This is only needed for APIs like Discord which don't setup the webhook until you pass the test\n\n27\n\n    // Don't trigger runs if they match this filter\n\n28\n\n    skipTriggeringRuns: true,\n\n32\n\n    handler: async (request) \\=> {\n\n33\n\n      const success \\= await verifyRequestSignature(request);\n\n34\n\n      // If Discord signature and timestamp don't match, return 401\n\n35\n\n      if (!success\\[0\\]) return new Response(\"Unauthorized\", { status: 401 });\n\n36\n\n      // If successful, get the Interaction Type sent by Discord of the request\n\n37\n\n      const { type } \\= success\\[1\\];\n\n38\n\n      // If it's type 1, it's a PING from discord, just respond with the type as is\n\n39\n\n      if (Number(type) \\=== 1)\n\n40\n\n        return new Response(JSON.stringify({ type }), {\n\n41\n\n          headers: { \"Content-Type\": \"application/json\" },\n\n43\n\n      // If it's type 2, it's a Slash Command from Discord, respond with what you want to be replied\n\n44\n\n      if (Number(type) \\=== 2)\n\n49\n\n              content: \\`Hello, New!\\`,\n\n52\n\n          { headers: { \"Content-Type\": \"application/json\" } }\n\n54\n\n      // If not either of the above types, just return a 400\n\n55\n\n      return new Response(JSON.stringify({ error: \"bad request\" }), {\n\n60\n\n  verify: async (request) \\=> {\n\n61\n\n    const success \\= await verifyRequestSignature(request);\n\n62\n\n    if (success\\[0\\]) return { success: success\\[0\\] };\n\n63\n\n    return { success: false, reason: \"Failed ed25519 verification\" };\n\n67\n\n// A job that runs when the HTTP endpoint is called from Discord\n\n73\n\n  // Create a trigger from the HTTP endpoint\n\n74\n\n  trigger: discord.onRequest(),\n\n75\n\n  run: async (request, io, ctx) \\=> {\n\n76\n\n    const body \\= await request.json();\n\n77\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/segment/examples/segment-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/segment/examples/segment-http-endpoint",
    "loadedTime": "2024-03-16T13:45:10.279Z",
    "referrerUrl": "https://trigger.dev/apis/segment",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/segment/examples/segment-http-endpoint",
    "title": "Segment | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Segment | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/segment"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport crypto from \"crypto\";\n4\n// Create an HTTP Endpoint, with the Segment details\n5\nconst segment = client.defineHttpEndpoint({\n9\nverify: async (request) => {\n10\nconst signature = request.headers.get(\"X-Signature\");\n13\nreturn { success: false, reason: \"Missing header\" };\n16\nconst body = await request.text();\n17\nconst bodyDigest = crypto\n18\n.createHmac(\"sha1\", process.env.SEGMENT_WEBHOOK_SIGNING_SECRET!)\n22\nif (signature !== bodyDigest) {\n23\nreturn { success: false, reason: \"Failed sha1 verification\" };\n26\nreturn { success: true };\n35\n// Create a trigger from the HTTP endpoint\n36\ntrigger: segment.onRequest(),\n37\nrun: async (request, io, ctx) => {\n38\nconst body = await request.json();\n39\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport crypto from \"crypto\";\n\n4\n\n// Create an HTTP Endpoint, with the Segment details\n\n5\n\nconst segment \\= client.defineHttpEndpoint({\n\n9\n\n  verify: async (request) \\=> {\n\n10\n\n    const signature \\= request.headers.get(\"X-Signature\");\n\n13\n\n      return { success: false, reason: \"Missing header\" };\n\n16\n\n    const body \\= await request.text();\n\n17\n\n    const bodyDigest \\= crypto\n\n18\n\n      .createHmac(\"sha1\", process.env.SEGMENT\\_WEBHOOK\\_SIGNING\\_SECRET!)\n\n22\n\n    if (signature !== bodyDigest) {\n\n23\n\n      return { success: false, reason: \"Failed sha1 verification\" };\n\n26\n\n    return { success: true };\n\n35\n\n  // Create a trigger from the HTTP endpoint\n\n36\n\n  trigger: segment.onRequest(),\n\n37\n\n  run: async (request, io, ctx) \\=> {\n\n38\n\n    const body \\= await request.json();\n\n39\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/github/examples/github-star-to-slack",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/github/examples/github-star-to-slack",
    "loadedTime": "2024-03-16T13:45:17.428Z",
    "referrerUrl": "https://trigger.dev/apis/github",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/github/examples/github-star-to-slack",
    "title": "GitHub | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "GitHub | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/github"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Github, events } from \"@trigger.dev/github\";\n3\nimport { Slack } from \"@trigger.dev/slack\";\n5\nconst github = new Github({ id: \"github\" });\n6\nconst slack = new Slack({ id: \"slack\" });\n8\n// This Job will run when a star is added or removed from the triggerdotdev/trigger.dev repo\n10\nid: \"github-new-star-to-slack\",\n11\nname: \"GitHub: new star to slack\",\n13\ntrigger: github.triggers.repo({\n15\nowner: \"<your-org-name>\",\n16\nrepo: \"<your-repo-name>\",\n21\nrun: async (payload, io, ctx) => {\n22\nawait io.slack.postMessage(\"post message\", {\n23\nchannel: process.env.SLACK_CHANNEL_ID!,\n24\ntext: `New GitHub star from ${payload.sender.html_url}, ${payload.sender.name}. Your new GitHub star count is ${payload.repository.stargazers_count}.`,",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Github, events } from \"@trigger.dev/github\";\n\n3\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n5\n\nconst github \\= new Github({ id: \"github\" });\n\n6\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n8\n\n// This Job will run when a star is added or removed from the triggerdotdev/trigger.dev repo\n\n10\n\n  id: \"github-new-star-to-slack\",\n\n11\n\n  name: \"GitHub: new star to slack\",\n\n13\n\n  trigger: github.triggers.repo({\n\n15\n\n    owner: \"<your-org-name>\",\n\n16\n\n    repo: \"<your-repo-name>\",\n\n21\n\n  run: async (payload, io, ctx) \\=> {\n\n22\n\n    await io.slack.postMessage(\"post message\", {\n\n23\n\n      channel: process.env.SLACK\\_CHANNEL\\_ID!,\n\n24\n\n      text: \\`New GitHub star from ${payload.sender.html\\_url}, ${payload.sender.name}. Your new GitHub star count is ${payload.repository.stargazers\\_count}.\\`,"
},
{
  "url": "https://trigger.dev/apis/github/examples/linear-ticket-on-github-pr",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/github/examples/linear-ticket-on-github-pr",
    "loadedTime": "2024-03-16T13:45:24.226Z",
    "referrerUrl": "https://trigger.dev/apis/github",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/github/examples/linear-ticket-on-github-pr",
    "title": "GitHub | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "GitHub | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/github"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Github, events } from \"@trigger.dev/github\";\n3\nimport { Linear } from \"@trigger.dev/linear\";\n4\nimport { Slack } from \"@trigger.dev/slack\";\n6\nconst linear = new Linear({\n8\napiKey: process.env.LINEAR_API_KEY!,\n10\nconst slack = new Slack({ id: \"slack\" });\n12\nconst github = new Github({ id: \"github\" });\n15\nid: \"linear-create-issue-on-github-pr\",\n16\nname: \"Create a Linear issue when a pull request is opened on a GitHub repo\",\n18\ntrigger: github.triggers.repo({\n19\nevent: events.onPullRequest,\n20\nowner: \"<your-org-name>\",\n21\nrepo: \"<your-repo-name>\",\n28\nrun: async (payload, io, ctx) => {\n29\nconst pullRequestTitle = payload.pull_request.title;\n30\nconst pullRequestURL = payload.pull_request.issue_url;\n31\nconst pullRequestAuthorURL = payload.sender.html_url;\n32\nconst pullRequestDescription = payload.pull_request.body;\n34\nconst issue = await io.linear.createIssue(\"create issue\", {\n35\ntitle: pullRequestTitle,\n36\ndescription: pullRequestDescription,\n37\n// To get your Team id from within Linear, hit CMD+K and \"Copy model UUID\"\n38\nteamId: \"<your-team-uuid>\",\n41\nawait io.slack.postMessage(\"post message\", {\n42\n// Set the Slack channel ID (not name) in your environment variables\n43\nchannel: process.env.SLACK_CHANNEL_ID!,\n44\ntext: `⚡️ New pull request, \"${pullRequestTitle}\", ${pullRequestURL},\n45\n\\n created by 👨‍💻 \"${pullRequestAuthorURL}\"\n46\n\\n New issue has been created in Linear: ${issue?.url}.`,",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Github, events } from \"@trigger.dev/github\";\n\n3\n\nimport { Linear } from \"@trigger.dev/linear\";\n\n4\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n6\n\nconst linear \\= new Linear({\n\n8\n\n  apiKey: process.env.LINEAR\\_API\\_KEY!,\n\n10\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n12\n\nconst github \\= new Github({ id: \"github\" });\n\n15\n\n  id: \"linear-create-issue-on-github-pr\",\n\n16\n\n  name: \"Create a Linear issue when a pull request is opened on a GitHub repo\",\n\n18\n\n  trigger: github.triggers.repo({\n\n19\n\n    event: events.onPullRequest,\n\n20\n\n    owner: \"<your-org-name>\",\n\n21\n\n    repo: \"<your-repo-name>\",\n\n28\n\n  run: async (payload, io, ctx) \\=> {\n\n29\n\n    const pullRequestTitle \\= payload.pull\\_request.title;\n\n30\n\n    const pullRequestURL \\= payload.pull\\_request.issue\\_url;\n\n31\n\n    const pullRequestAuthorURL \\= payload.sender.html\\_url;\n\n32\n\n    const pullRequestDescription \\= payload.pull\\_request.body;\n\n34\n\n    const issue \\= await io.linear.createIssue(\"create issue\", {\n\n35\n\n      title: pullRequestTitle,\n\n36\n\n      description: pullRequestDescription,\n\n37\n\n      // To get your Team id from within Linear, hit CMD+K and \"Copy model UUID\"\n\n38\n\n      teamId: \"<your-team-uuid>\",\n\n41\n\n    await io.slack.postMessage(\"post message\", {\n\n42\n\n      // Set the Slack channel ID (not name) in your environment variables\n\n43\n\n      channel: process.env.SLACK\\_CHANNEL\\_ID!,\n\n44\n\n      text: \\`⚡️ New pull request, \"${pullRequestTitle}\", ${pullRequestURL},\n\n45\n\n            \\\\n created by 👨‍💻 \"${pullRequestAuthorURL}\"\n\n46\n\n            \\\\n New issue has been created in Linear: ${issue?.url}.\\`,"
},
{
  "url": "https://trigger.dev/apis/github/examples/github-issue-reminder",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/github/examples/github-issue-reminder",
    "loadedTime": "2024-03-16T13:45:28.449Z",
    "referrerUrl": "https://trigger.dev/apis/github",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/github/examples/github-issue-reminder",
    "title": "GitHub | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "GitHub | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/github"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Github, events } from \"@trigger.dev/github\";\n3\nimport { Slack } from \"@trigger.dev/slack\";\n5\nconst github = new Github({ id: \"github\" });\n6\nconst slack = new Slack({ id: \"slack\" });\n8\n// Sends a Slack message to a channel if a GitHub issue is left open for 24 hours\n10\nid: \"github-new-issue-reminder\",\n11\nname: \"GitHub: new issue reminder\",\n13\ntrigger: github.triggers.repo({\n14\nevent: events.onIssueOpened,\n15\nowner: \"<your-org-name>\",\n16\nrepo: \"<your-repo-name>\",\n22\nrun: async (payload, io, ctx) => {\n24\nctx.environment.type === \"DEVELOPMENT\" ? 3 : 60 * 60 * 24;\n25\nawait io.wait(\"wait 24 hours\", delayDuration);\n27\nconst issue = await io.github.getIssue(\"get issue\", {\n28\nowner: payload.repository.owner.login,\n29\nrepo: payload.repository.name,\n30\nissueNumber: payload.issue.number,\n33\nif (issue.updated_at === payload.issue.updated_at) {\n34\nconst assigneeResult = await io.github.addIssueAssignees(\"add assignee\", {\n35\nowner: payload.repository.owner.login,\n36\nrepo: payload.repository.name,\n37\nissueNumber: payload.issue.number,\n38\nassignees: [payload.sender.login],\n41\nawait io.slack.postMessage(\"send reminder\", {\n42\nchannel: process.env.SLACK_CHANNEL_ID!,\n43\ntext: `Issue ${payload.issue.title} is still open. I've assigned it to ${payload.sender.login}.\\n${issue.html_url}`,",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Github, events } from \"@trigger.dev/github\";\n\n3\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n5\n\nconst github \\= new Github({ id: \"github\" });\n\n6\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n8\n\n// Sends a Slack message to a channel if a GitHub issue is left open for 24 hours\n\n10\n\n  id: \"github-new-issue-reminder\",\n\n11\n\n  name: \"GitHub: new issue reminder\",\n\n13\n\n  trigger: github.triggers.repo({\n\n14\n\n    event: events.onIssueOpened,\n\n15\n\n    owner: \"<your-org-name>\",\n\n16\n\n    repo: \"<your-repo-name>\",\n\n22\n\n  run: async (payload, io, ctx) \\=> {\n\n24\n\n      ctx.environment.type \\=== \"DEVELOPMENT\" ? 3 : 60 \\* 60 \\* 24;\n\n25\n\n    await io.wait(\"wait 24 hours\", delayDuration);\n\n27\n\n    const issue \\= await io.github.getIssue(\"get issue\", {\n\n28\n\n      owner: payload.repository.owner.login,\n\n29\n\n      repo: payload.repository.name,\n\n30\n\n      issueNumber: payload.issue.number,\n\n33\n\n    if (issue.updated\\_at \\=== payload.issue.updated\\_at) {\n\n34\n\n      const assigneeResult \\= await io.github.addIssueAssignees(\"add assignee\", {\n\n35\n\n        owner: payload.repository.owner.login,\n\n36\n\n        repo: payload.repository.name,\n\n37\n\n        issueNumber: payload.issue.number,\n\n38\n\n        assignees: \\[payload.sender.login\\],\n\n41\n\n      await io.slack.postMessage(\"send reminder\", {\n\n42\n\n        channel: process.env.SLACK\\_CHANNEL\\_ID!,\n\n43\n\n        text: \\`Issue ${payload.issue.title} is still open. I've assigned it to ${payload.sender.login}.\\\\n${issue.html\\_url}\\`,"
},
{
  "url": "https://trigger.dev/apis/github/examples/github-custom-label",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/github/examples/github-custom-label",
    "loadedTime": "2024-03-16T13:45:32.944Z",
    "referrerUrl": "https://trigger.dev/apis/github",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/github/examples/github-custom-label",
    "title": "GitHub | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "GitHub | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/github"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Github, events } from \"@trigger.dev/github\";\n4\nconst github = new Github({ id: \"github\" });\n6\n// This Job will run when a new issue is opened on a repo you have admin rights to\n7\n// Once created, it will add a 'Bug' label to the issue\n9\nid: \"github-new-issue-opened\",\n10\nname: \"GitHub: new issue opened\",\n12\nintegrations: { github: github },\n13\ntrigger: github.triggers.repo({\n14\nevent: events.onIssueOpened,\n15\nowner: \"<your-org-name>\",\n16\nrepo: \"<your-repo-name>\",\n18\nrun: async (payload, io, ctx) => {\n19\nawait io.github.addIssueLabels(\"add label\", {\n20\nowner: payload.repository.owner.login,\n21\nrepo: payload.repository.name,\n22\nissueNumber: payload.issue.number,\n25\nreturn { payload, ctx };",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Github, events } from \"@trigger.dev/github\";\n\n4\n\nconst github \\= new Github({ id: \"github\" });\n\n6\n\n// This Job will run when a new issue is opened on a repo you have admin rights to\n\n7\n\n// Once created, it will add a 'Bug' label to the issue\n\n9\n\n  id: \"github-new-issue-opened\",\n\n10\n\n  name: \"GitHub: new issue opened\",\n\n12\n\n  integrations: { github: github },\n\n13\n\n  trigger: github.triggers.repo({\n\n14\n\n    event: events.onIssueOpened,\n\n15\n\n    owner: \"<your-org-name>\",\n\n16\n\n    repo: \"<your-repo-name>\",\n\n18\n\n  run: async (payload, io, ctx) \\=> {\n\n19\n\n    await io.github.addIssueLabels(\"add label\", {\n\n20\n\n      owner: payload.repository.owner.login,\n\n21\n\n      repo: payload.repository.name,\n\n22\n\n      issueNumber: payload.issue.number,\n\n25\n\n    return { payload, ctx };"
},
{
  "url": "https://trigger.dev/apis/github/examples/slack-openai-summarize-github-commits",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/github/examples/slack-openai-summarize-github-commits",
    "loadedTime": "2024-03-16T13:45:39.830Z",
    "referrerUrl": "https://trigger.dev/apis/github",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/github/examples/slack-openai-summarize-github-commits",
    "title": "GitHub | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "GitHub | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/github"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, cronTrigger } from \"@trigger.dev/sdk\";\n2\nimport { Github } from \"@trigger.dev/github\";\n3\nimport { OpenAI } from \"@trigger.dev/openai\";\n4\nimport { Slack } from \"@trigger.dev/slack\";\n6\nconst github = new Github({\n8\ntoken: process.env.GITHUB_TOKEN!,\n11\nconst openai = new OpenAI({\n13\napiKey: process.env.OPENAI_API_KEY!,\n16\nconst slack = new Slack({ id: \"slack\" });\n18\n// This Job runs at 7am every day using a cron schedule expression.\n20\nid: \"summarize-yesterday-commits-on-slack\",\n21\nname: \"Summarize yesterdays GitHub commits on Slack\",\n23\ntrigger: cronTrigger({\n24\n// Note that the time is in UTC.\n25\n// Converted to cron schedule expression using https://crontab.guru/\n33\nrun: async (payload, io, ctx) => {\n34\n// 1. Get the 'since' and 'until' timestamps\n35\nconst since = payload.lastTimestamp?.toISOString();\n36\nconst until = payload.ts?.toISOString();\n38\n// 2. Get yesterday's commits from GitHub\n39\nconst owner = \"<your-org-name>\";\n40\nconst repo = \"<your-repo-name>\";\n42\nconst { data } = await io.github.runTask(\n43\n\"get-yesterdays-commits\",\n45\nreturn client.rest.repos.listCommits({\n52\n{ name: \"Get Yesterday's Commits\" }\n55\n// 3. Turn the commit data into a shorter format for OpenAI:\n56\nconst formattedCommits = await io.runTask(\"format-commits\", async () => {\n57\nreturn data.map((commit) => {\n59\nauthor: commit.commit.author?.name,\n60\nmessage: commit.commit.message,\n61\ntime: commit.commit.author?.date,\n62\nlink: commit.html_url,\n67\n// 4. Summarize the commits with OpenAI\n68\nconst chatCompletion = await io.openai.createChatCompletion(\n71\nmodel: \"gpt-3.5-turbo\",\n75\ncontent: `You are a expert programmer experienced in GitHub. \n76\nYou are to concisely summarize the GitHub commits in one message. \n77\nReply with a heading message -- 'GitHub Commits for ${repo} yesterday' \n78\n-- followed by a summary of the commits. Use bullet points in your summary \n79\nlist and use appropriate spacing for maximum readability.`,\n83\ncontent: `Here are all of the GitHub commits from yesterday \n84\n(delimited by triple quotes below). Please summarize them like \n85\n\"{user} {message} ({url})\".\\n\\n\"\"\"${JSON.stringify(\n96\nconst response = await io.slack.postMessage(\"post message\", {\n97\nchannel: process.env.SLACK_CHANNEL_ID!,\n98\ntext: chatCompletion.choices[0]?.message?.content || \"No summary found\",",
  "markdown": "1\n\nimport { TriggerClient, cronTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Github } from \"@trigger.dev/github\";\n\n3\n\nimport { OpenAI } from \"@trigger.dev/openai\";\n\n4\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n6\n\nconst github \\= new Github({\n\n8\n\n  token: process.env.GITHUB\\_TOKEN!,\n\n11\n\nconst openai \\= new OpenAI({\n\n13\n\n  apiKey: process.env.OPENAI\\_API\\_KEY!,\n\n16\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n18\n\n// This Job runs at 7am every day using a cron schedule expression.\n\n20\n\n  id: \"summarize-yesterday-commits-on-slack\",\n\n21\n\n  name: \"Summarize yesterdays GitHub commits on Slack\",\n\n23\n\n  trigger: cronTrigger({\n\n24\n\n    // Note that the time is in UTC.\n\n25\n\n    // Converted to cron schedule expression using https://crontab.guru/\n\n33\n\n  run: async (payload, io, ctx) \\=> {\n\n34\n\n    // 1. Get the 'since' and 'until' timestamps\n\n35\n\n    const since \\= payload.lastTimestamp?.toISOString();\n\n36\n\n    const until \\= payload.ts?.toISOString();\n\n38\n\n    // 2. Get yesterday's commits from GitHub\n\n39\n\n    const owner \\= \"<your-org-name>\";\n\n40\n\n    const repo \\= \"<your-repo-name>\";\n\n42\n\n    const { data } \\= await io.github.runTask(\n\n43\n\n      \"get-yesterdays-commits\",\n\n45\n\n        return client.rest.repos.listCommits({\n\n52\n\n      { name: \"Get Yesterday's Commits\" }\n\n55\n\n    // 3. Turn the commit data into a shorter format for OpenAI:\n\n56\n\n    const formattedCommits \\= await io.runTask(\"format-commits\", async () \\=> {\n\n57\n\n      return data.map((commit) \\=> {\n\n59\n\n          author: commit.commit.author?.name,\n\n60\n\n          message: commit.commit.message,\n\n61\n\n          time: commit.commit.author?.date,\n\n62\n\n          link: commit.html\\_url,\n\n67\n\n    // 4. Summarize the commits with OpenAI\n\n68\n\n    const chatCompletion \\= await io.openai.createChatCompletion(\n\n71\n\n        model: \"gpt-3.5-turbo\",\n\n75\n\n            content: \\`You are a expert programmer experienced in GitHub. \n\n76\n\n            You are to concisely summarize the GitHub commits in one message. \n\n77\n\n            Reply with a heading message -- 'GitHub Commits for ${repo} yesterday' \n\n78\n\n            -- followed by a summary of the commits. Use bullet points in your summary \n\n79\n\n            list and use appropriate spacing for maximum readability.\\`,\n\n83\n\n            content: \\`Here are all of the GitHub commits from yesterday \n\n84\n\n            (delimited by triple quotes below). Please summarize them like \n\n85\n\n            \"{user} {message} ({url})\".\\\\n\\\\n\"\"\"${JSON.stringify(\n\n96\n\n    const response \\= await io.slack.postMessage(\"post message\", {\n\n97\n\n      channel: process.env.SLACK\\_CHANNEL\\_ID!,\n\n98\n\n      text: chatCompletion.choices\\[0\\]?.message?.content || \"No summary found\","
},
{
  "url": "https://trigger.dev/apis/sendgrid/examples/sendgrid-send-basic-email",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/sendgrid/examples/sendgrid-send-basic-email",
    "loadedTime": "2024-03-16T13:45:47.719Z",
    "referrerUrl": "https://trigger.dev/apis/sendgrid",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/sendgrid/examples/sendgrid-send-basic-email",
    "title": "SendGrid | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "SendGrid | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/sendgrid"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { SendGrid } from \"@trigger.dev/sendgrid\";\n3\nimport { z } from \"zod\";\n6\nconst sendgrid = new SendGrid({\n8\napiKey: process.env.SENDGRID_API_KEY!,\n11\n// This job sends a basic email to a 'to' email address, a 'subject', a 'text' field and a 'from' email address.\n13\nid: \"sendgrid-send-basic-email\",\n14\nname: \"SendGrid: send basic email\",\n16\ntrigger: eventTrigger({\n22\n// The 'from' email address must be a verified domain in your SendGrid account.\n29\nrun: async (payload, io, ctx) => {\n30\nawait io.sendgrid.sendEmail(\"send-email\", {\n33\nsubject: payload.subject,",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { SendGrid } from \"@trigger.dev/sendgrid\";\n\n3\n\nimport { z } from \"zod\";\n\n6\n\nconst sendgrid \\= new SendGrid({\n\n8\n\n  apiKey: process.env.SENDGRID\\_API\\_KEY!,\n\n11\n\n// This job sends a basic email to a 'to' email address, a 'subject', a 'text' field and a 'from' email address.\n\n13\n\n  id: \"sendgrid-send-basic-email\",\n\n14\n\n  name: \"SendGrid: send basic email\",\n\n16\n\n  trigger: eventTrigger({\n\n22\n\n      // The 'from' email address must be a verified domain in your SendGrid account.\n\n29\n\n  run: async (payload, io, ctx) \\=> {\n\n30\n\n    await io.sendgrid.sendEmail(\"send-email\", {\n\n33\n\n      subject: payload.subject,"
},
{
  "url": "https://trigger.dev/apis/sendgrid/examples/sendgrid-send-activity-summary",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/sendgrid/examples/sendgrid-send-activity-summary",
    "loadedTime": "2024-03-16T13:45:48.440Z",
    "referrerUrl": "https://trigger.dev/apis/sendgrid",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/sendgrid/examples/sendgrid-send-activity-summary",
    "title": "SendGrid | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "SendGrid | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/sendgrid"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, cronTrigger } from \"@trigger.dev/sdk\";\n2\nimport { SendGrid } from \"@trigger.dev/sendgrid\";\n3\nimport { Slack } from \"@trigger.dev/slack\";\n4\nimport { weeklySummaryDb } from \"./mocks/db\";\n5\nimport { weeklySummaryEmail } from \"./mocks/emails\";\n7\nconst sendgrid = new SendGrid({\n9\napiKey: process.env.SENDGRID_API_KEY!,\n12\nconst slack = new Slack({ id: \"slack\" });\n14\n// This Job sends a weekly summary email to users who have\n15\n// summariesEnabled = true, and then posts the total numbers to Slack.\n17\nid: \"weekly-user-activity-summary\",\n18\nname: \"Weekly user activity summary\",\n20\nintegrations: { sendgrid, slack },\n21\ntrigger: cronTrigger({\n22\n// Send every Friday at 4pm\n25\nrun: async (payload, io, ctx) => {\n26\nconst users = await weeklySummaryDb.getUsers();\n31\nfor (const user of users) {\n32\nif (user.summariesEnabled) {\n33\nawait io.sendgrid.sendEmail(`Weekly summary for ${user.id}`, {\n35\n// The 'from' email must be a verified domain in your SendGrid account.\n36\nfrom: \"hello@acme.inc\",\n37\nsubject: \"Your weekly summary\",\n38\nhtml: weeklySummaryEmail(user),\n46\nawait io.slack.postMessage(\"Notify team\", {\n47\ntext: `Weekly summary sent to ${sentCount} users and not sent to ${notSentCount} users`,\n48\n// This has to be a channel ID, not a channel name\n49\nchannel: \"YOUR_CHANNEL_ID\",",
  "markdown": "1\n\nimport { TriggerClient, cronTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { SendGrid } from \"@trigger.dev/sendgrid\";\n\n3\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n4\n\nimport { weeklySummaryDb } from \"./mocks/db\";\n\n5\n\nimport { weeklySummaryEmail } from \"./mocks/emails\";\n\n7\n\nconst sendgrid \\= new SendGrid({\n\n9\n\n  apiKey: process.env.SENDGRID\\_API\\_KEY!,\n\n12\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n14\n\n// This Job sends a weekly summary email to users who have\n\n15\n\n// summariesEnabled = true, and then posts the total numbers to Slack.\n\n17\n\n  id: \"weekly-user-activity-summary\",\n\n18\n\n  name: \"Weekly user activity summary\",\n\n20\n\n  integrations: { sendgrid, slack },\n\n21\n\n  trigger: cronTrigger({\n\n22\n\n    // Send every Friday at 4pm\n\n25\n\n  run: async (payload, io, ctx) \\=> {\n\n26\n\n    const users \\= await weeklySummaryDb.getUsers();\n\n31\n\n    for (const user of users) {\n\n32\n\n      if (user.summariesEnabled) {\n\n33\n\n        await io.sendgrid.sendEmail(\\`Weekly summary for ${user.id}\\`, {\n\n35\n\n          // The 'from' email must be a verified domain in your SendGrid account.\n\n36\n\n          from: \"hello@acme.inc\",\n\n37\n\n          subject: \"Your weekly summary\",\n\n38\n\n          html: weeklySummaryEmail(user),\n\n46\n\n    await io.slack.postMessage(\"Notify team\", {\n\n47\n\n      text: \\`Weekly summary sent to ${sentCount} users and not sent to ${notSentCount} users\\`,\n\n48\n\n      // This has to be a channel ID, not a channel name\n\n49\n\n      channel: \"YOUR\\_CHANNEL\\_ID\","
},
{
  "url": "https://trigger.dev/apis/sendgrid/examples/slack-sendgrid-send-activity-summary",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/sendgrid/examples/slack-sendgrid-send-activity-summary",
    "loadedTime": "2024-03-16T13:45:57.038Z",
    "referrerUrl": "https://trigger.dev/apis/sendgrid",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/sendgrid/examples/slack-sendgrid-send-activity-summary",
    "title": "SendGrid | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "SendGrid | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/sendgrid"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, cronTrigger } from \"@trigger.dev/sdk\";\n2\nimport { SendGrid } from \"@trigger.dev/sendgrid\";\n3\nimport { Slack } from \"@trigger.dev/slack\";\n4\nimport { weeklySummaryDb } from \"./mocks/db\";\n5\nimport { weeklySummaryEmail } from \"./mocks/emails\";\n7\nconst sendgrid = new SendGrid({\n9\napiKey: process.env.SENDGRID_API_KEY!,\n12\nconst slack = new Slack({ id: \"slack\" });\n14\n// This Job sends a weekly summary email to users who have\n15\n// summariesEnabled = true, and then posts the total numbers to Slack.\n17\nid: \"weekly-user-activity-summary\",\n18\nname: \"Weekly user activity summary\",\n20\nintegrations: { sendgrid, slack },\n21\ntrigger: cronTrigger({\n22\n// Send every Friday at 4pm\n25\nrun: async (payload, io, ctx) => {\n26\nconst users = await weeklySummaryDb.getUsers();\n31\nfor (const user of users) {\n32\nif (user.summariesEnabled) {\n33\nawait io.sendgrid.sendEmail(`Weekly summary for ${user.id}`, {\n35\n// The 'from' email must be a verified domain in your SendGrid account.\n36\nfrom: \"hello@acme.inc\",\n37\nsubject: \"Your weekly summary\",\n38\nhtml: weeklySummaryEmail(user),\n46\nawait io.slack.postMessage(\"Notify team\", {\n47\ntext: `Weekly summary sent to ${sentCount} users and not sent to ${notSentCount} users`,\n48\n// This has to be a channel ID, not a channel name\n49\nchannel: \"YOUR_CHANNEL_ID\",",
  "markdown": "1\n\nimport { TriggerClient, cronTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { SendGrid } from \"@trigger.dev/sendgrid\";\n\n3\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n4\n\nimport { weeklySummaryDb } from \"./mocks/db\";\n\n5\n\nimport { weeklySummaryEmail } from \"./mocks/emails\";\n\n7\n\nconst sendgrid \\= new SendGrid({\n\n9\n\n  apiKey: process.env.SENDGRID\\_API\\_KEY!,\n\n12\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n14\n\n// This Job sends a weekly summary email to users who have\n\n15\n\n// summariesEnabled = true, and then posts the total numbers to Slack.\n\n17\n\n  id: \"weekly-user-activity-summary\",\n\n18\n\n  name: \"Weekly user activity summary\",\n\n20\n\n  integrations: { sendgrid, slack },\n\n21\n\n  trigger: cronTrigger({\n\n22\n\n    // Send every Friday at 4pm\n\n25\n\n  run: async (payload, io, ctx) \\=> {\n\n26\n\n    const users \\= await weeklySummaryDb.getUsers();\n\n31\n\n    for (const user of users) {\n\n32\n\n      if (user.summariesEnabled) {\n\n33\n\n        await io.sendgrid.sendEmail(\\`Weekly summary for ${user.id}\\`, {\n\n35\n\n          // The 'from' email must be a verified domain in your SendGrid account.\n\n36\n\n          from: \"hello@acme.inc\",\n\n37\n\n          subject: \"Your weekly summary\",\n\n38\n\n          html: weeklySummaryEmail(user),\n\n46\n\n    await io.slack.postMessage(\"Notify team\", {\n\n47\n\n      text: \\`Weekly summary sent to ${sentCount} users and not sent to ${notSentCount} users\\`,\n\n48\n\n      // This has to be a channel ID, not a channel name\n\n49\n\n      channel: \"YOUR\\_CHANNEL\\_ID\","
},
{
  "url": "https://trigger.dev/apis/gmail/examples/send-email-with-gmail",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/gmail/examples/send-email-with-gmail",
    "loadedTime": "2024-03-16T13:46:04.084Z",
    "referrerUrl": "https://trigger.dev/apis/gmail",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/gmail/examples/send-email-with-gmail",
    "title": "Gmail | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Gmail | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/gmail"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { google } from \"googleapis\";\n3\nimport { JWT } from \"google-auth-library\";\n6\n// NB: This job only works if you have a Google Workspace account\n8\n// Create a service account and project: https://cloud.google.com/iam/docs/service-account-overview\n9\n// Create a JWT (JSON Web Token) authentication instance for Google APIs.\n10\n// https://cloud.google.com/nodejs/docs/reference/google-auth-library/latest/google-auth-library/jwt\n12\nemail: process.env.GOOGLE_CLIENT_EMAIL, // The email associated with the service account\n13\nkey: process.env.GOOGLE_PRIVATE_KEY!.split(String.raw`\\n`).join(\"\\n\"), // The service account private key\n14\nscopes: [\"https://www.googleapis.com/auth/gmail.send\"], // The desired scope for sending Gmail emails\n17\n// In order to send an email from a user's account, you must enable Gmail API Domain-Wide Delegation of Authority:\n18\n// 1. Google Admin Console: Go to your Google Admin Console.\n19\n// 2. Security Settings: Navigate to Security > API controls.\n20\n// 3. Manage Domain-Wide Delegation: In the \"Domain wide delegation\" panel, click on \"Manage Domain-Wide Delegation\".\n21\n// 4. Add Service Account: Click on \"Add new\" and provide:\n22\n// 4a. Client ID: This is the Service Account's Client ID, which can be found in your Google Cloud Console under the Service Account's details.\n23\n// 4b. OAuth Scopes: Enter https://www.googleapis.com/auth/gmail.send to grant send permissions via Gmail.\n24\n// 5. Click on \"Authorize\".\n26\n// Replace with the email of the user you're impersonating (the user that will send the email)\n27\nauth.subject = process.env.GOOGLE_IMPERSONATION_EMAIL;\n29\n// Initialize the Gmail API\n30\nconst gmail = google.gmail({ version: \"v1\", auth });\n33\nid: \"send-gmail-email\",\n34\nname: \"Send an email from Gmail\",\n36\ntrigger: eventTrigger({\n37\nname: \"send-gmail-email\",\n44\nrun: async (payload, io, ctx) => {\n45\nconst { to, subject, message } = payload;\n47\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n51\n// Create the email message\n52\nconst email = `To: ${to}\\r\\nSubject: ${subject}\\r\\n\\r\\n${message}`;\n54\nconst res = await gmail.users.messages.send({\n57\nraw: Buffer.from(email).toString(\"base64\"),\n61\nconsole.log(\"Message sent: \", res.data);\n64\n// Add metadata to improve how the task displays in the logs\n65\n{ name: \"Send Gmail\", icon: \"google\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { google } from \"googleapis\";\n\n3\n\nimport { JWT } from \"google-auth-library\";\n\n6\n\n// NB: This job only works if you have a Google Workspace account\n\n8\n\n// Create a service account and project: https://cloud.google.com/iam/docs/service-account-overview\n\n9\n\n// Create a JWT (JSON Web Token) authentication instance for Google APIs.\n\n10\n\n// https://cloud.google.com/nodejs/docs/reference/google-auth-library/latest/google-auth-library/jwt\n\n12\n\n  email: process.env.GOOGLE\\_CLIENT\\_EMAIL, // The email associated with the service account\n\n13\n\n  key: process.env.GOOGLE\\_PRIVATE\\_KEY!.split(String.raw\\`\\\\n\\`).join(\"\\\\n\"), // The service account private key\n\n14\n\n  scopes: \\[\"https://www.googleapis.com/auth/gmail.send\"\\], // The desired scope for sending Gmail emails\n\n17\n\n// In order to send an email from a user's account, you must enable Gmail API Domain-Wide Delegation of Authority:\n\n18\n\n// 1. Google Admin Console: Go to your Google Admin Console.\n\n19\n\n// 2. Security Settings: Navigate to Security > API controls.\n\n20\n\n// 3. Manage Domain-Wide Delegation: In the \"Domain wide delegation\" panel, click on \"Manage Domain-Wide Delegation\".\n\n21\n\n// 4. Add Service Account: Click on \"Add new\" and provide:\n\n22\n\n//  4a. Client ID: This is the Service Account's Client ID, which can be found in your Google Cloud Console under the Service Account's details.\n\n23\n\n//  4b. OAuth Scopes: Enter https://www.googleapis.com/auth/gmail.send to grant send permissions via Gmail.\n\n24\n\n// 5. Click on \"Authorize\".\n\n26\n\n// Replace with the email of the user you're impersonating (the user that will send the email)\n\n27\n\nauth.subject \\= process.env.GOOGLE\\_IMPERSONATION\\_EMAIL;\n\n29\n\n// Initialize the Gmail API\n\n30\n\nconst gmail \\= google.gmail({ version: \"v1\", auth });\n\n33\n\n  id: \"send-gmail-email\",\n\n34\n\n  name: \"Send an email from Gmail\",\n\n36\n\n  trigger: eventTrigger({\n\n37\n\n    name: \"send-gmail-email\",\n\n44\n\n  run: async (payload, io, ctx) \\=> {\n\n45\n\n    const { to, subject, message } \\= payload;\n\n47\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n51\n\n        // Create the email message\n\n52\n\n        const email \\= \\`To: ${to}\\\\r\\\\nSubject: ${subject}\\\\r\\\\n\\\\r\\\\n${message}\\`;\n\n54\n\n        const res \\= await gmail.users.messages.send({\n\n57\n\n            raw: Buffer.from(email).toString(\"base64\"),\n\n61\n\n        console.log(\"Message sent: \", res.data);\n\n64\n\n      // Add metadata to improve how the task displays in the logs\n\n65\n\n      { name: \"Send Gmail\", icon: \"google\" }"
},
{
  "url": "https://trigger.dev/apis/gmail/examples/gmail-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/gmail/examples/gmail-http-endpoint",
    "loadedTime": "2024-03-16T13:46:11.825Z",
    "referrerUrl": "https://trigger.dev/apis/gmail",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/gmail/examples/gmail-http-endpoint",
    "title": "Gmail | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Gmail | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/gmail"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n4\n// Push Notification https://developers.google.com/gmail/api/guides/push\n5\n// Verification response https://cloud.google.com/pubsub/docs/authenticate-push-subscriptions\n7\n// Create Google Cloud Project https://console.cloud.google.com/projectcreate\n8\n// Enable Gmail API https://console.cloud.google.com/apis/library/gmail.googleapis.com\n9\n// Create gmail service account https://console.cloud.google.com/iam-admin/serviceaccounts\n10\n// Create Topic https://console.cloud.google.com/cloudpubsub/topicList and note down the topic name\n11\n// Create Subscription with the trigger endpoint. Delivery type: Push. Enable authentication and add the gmail service account email if need access grant.\n12\n// Add publish privileges to Topics: Click on the topic 3 dot (more actions) -> View permissions -> Add Principal -> New principals:\n13\n// gmail-api-push@system.gserviceaccount.com and set Role: Pub/Sub Publisher\n16\n// Open postman and setting up watch request https://developers.google.com/gmail/api/guides/push#watch_request\n17\n// Set authorization type OAuth 2.0\n18\n// Set Auth URL https://accounts.google.com/o/oauth2/auth\n19\n// Set Access Token URL https://accounts.google.com/o/oauth2/token\n20\n// Set scope https://www.googleapis.com/auth/gmail.modify\n21\n// Create OAuth client https://console.cloud.google.com/apis/credentials\n22\n// Set application type: Web application and add redirect URL https://oauth.pstmn.io/v1/callback\n23\n// Get OAuth client ID and secret and set to postman and click get access token and save.\n24\n// Now send the watch request.\n26\n// Create an HTTP Endpoint, with the gmail details\n27\nexport const gmail = client.defineHttpEndpoint({\n32\nverify: async (request) => {\n33\n// Getting bearer token from request\n34\nconst bearer = request.headers.get(\"Authorization\");\n36\nreturn { success: false, reason: \"No bearer token\" };\n38\nconst tokens = bearer.match(/Bearer (.*)/);\n39\nif (!tokens || tokens.length < 2) {\n40\nreturn { success: false, reason: \"Invalid bearer token\" };\n42\nconst token = tokens[1];\n45\nconst data = await fetch(\n46\n`https://oauth2.googleapis.com/tokeninfo?id_token=${token}`\n48\nconst payload = await data.json();\n49\nif (payload.email === process.env.GMAIL_SERVICE_ACCOUNT_EMAIL) {\n50\nreturn { success: true };\n53\nreturn { success: false, reason: \"Invalid token\" };\n62\n// Create a trigger from the HTTP endpoint\n63\ntrigger: gmail.onRequest(),\n64\nrun: async (request, io, ctx) => {\n65\nconst body = await request.json();\n66\nconst message = Buffer.from(body.message.data, \"base64\").toString(\"utf-8\");\n67\nawait io.logger.info(`Body`, JSON.parse(message));",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n4\n\n// Push Notification https://developers.google.com/gmail/api/guides/push\n\n5\n\n// Verification response https://cloud.google.com/pubsub/docs/authenticate-push-subscriptions\n\n7\n\n// Create Google Cloud Project https://console.cloud.google.com/projectcreate\n\n8\n\n// Enable Gmail API https://console.cloud.google.com/apis/library/gmail.googleapis.com\n\n9\n\n// Create gmail service account https://console.cloud.google.com/iam-admin/serviceaccounts\n\n10\n\n// Create Topic https://console.cloud.google.com/cloudpubsub/topicList and note down the topic name\n\n11\n\n// Create Subscription with the trigger endpoint. Delivery type: Push. Enable authentication and add the gmail service account email if need access grant.\n\n12\n\n// Add publish privileges to Topics: Click on the topic 3 dot (more actions) -> View permissions -> Add Principal -> New principals:\n\n13\n\n// gmail-api-push@system.gserviceaccount.com and set Role: Pub/Sub Publisher\n\n16\n\n// Open postman and setting up watch request https://developers.google.com/gmail/api/guides/push#watch\\_request\n\n17\n\n// Set authorization type OAuth 2.0\n\n18\n\n// Set Auth URL https://accounts.google.com/o/oauth2/auth\n\n19\n\n// Set Access Token URL https://accounts.google.com/o/oauth2/token\n\n20\n\n// Set scope https://www.googleapis.com/auth/gmail.modify\n\n21\n\n// Create OAuth client https://console.cloud.google.com/apis/credentials\n\n22\n\n// Set application type: Web application and add redirect URL https://oauth.pstmn.io/v1/callback\n\n23\n\n// Get OAuth client ID and secret and set to postman and click get access token and save.\n\n24\n\n// Now send the watch request.\n\n26\n\n// Create an HTTP Endpoint, with the gmail details\n\n27\n\nexport const gmail \\= client.defineHttpEndpoint({\n\n32\n\n  verify: async (request) \\=> {\n\n33\n\n    // Getting bearer token from request\n\n34\n\n    const bearer \\= request.headers.get(\"Authorization\");\n\n36\n\n      return { success: false, reason: \"No bearer token\" };\n\n38\n\n    const tokens \\= bearer.match(/Bearer (.\\*)/);\n\n39\n\n    if (!tokens || tokens.length < 2) {\n\n40\n\n      return { success: false, reason: \"Invalid bearer token\" };\n\n42\n\n    const token \\= tokens\\[1\\];\n\n45\n\n    const data \\= await fetch(\n\n46\n\n      \\`https://oauth2.googleapis.com/tokeninfo?id\\_token=${token}\\`\n\n48\n\n    const payload \\= await data.json();\n\n49\n\n    if (payload.email \\=== process.env.GMAIL\\_SERVICE\\_ACCOUNT\\_EMAIL) {\n\n50\n\n      return { success: true };\n\n53\n\n    return { success: false, reason: \"Invalid token\" };\n\n62\n\n  // Create a trigger from the HTTP endpoint\n\n63\n\n  trigger: gmail.onRequest(),\n\n64\n\n  run: async (request, io, ctx) \\=> {\n\n65\n\n    const body \\= await request.json();\n\n66\n\n    const message \\= Buffer.from(body.message.data, \"base64\").toString(\"utf-8\");\n\n67\n\n    await io.logger.info(\\`Body\\`, JSON.parse(message));"
},
{
  "url": "https://trigger.dev/apis/slack/examples/github-star-to-slack",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/slack/examples/github-star-to-slack",
    "loadedTime": "2024-03-16T13:46:12.951Z",
    "referrerUrl": "https://trigger.dev/apis/slack",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/slack/examples/github-star-to-slack",
    "title": "Slack | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Slack | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/slack"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Github, events } from \"@trigger.dev/github\";\n3\nimport { Slack } from \"@trigger.dev/slack\";\n5\nconst github = new Github({ id: \"github\" });\n6\nconst slack = new Slack({ id: \"slack\" });\n8\n// This Job will run when a star is added or removed from the triggerdotdev/trigger.dev repo\n10\nid: \"github-new-star-to-slack\",\n11\nname: \"GitHub: new star to slack\",\n13\ntrigger: github.triggers.repo({\n15\nowner: \"<your-org-name>\",\n16\nrepo: \"<your-repo-name>\",\n21\nrun: async (payload, io, ctx) => {\n22\nawait io.slack.postMessage(\"post message\", {\n23\nchannel: process.env.SLACK_CHANNEL_ID!,\n24\ntext: `New GitHub star from ${payload.sender.html_url}, ${payload.sender.name}. Your new GitHub star count is ${payload.repository.stargazers_count}.`,",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Github, events } from \"@trigger.dev/github\";\n\n3\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n5\n\nconst github \\= new Github({ id: \"github\" });\n\n6\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n8\n\n// This Job will run when a star is added or removed from the triggerdotdev/trigger.dev repo\n\n10\n\n  id: \"github-new-star-to-slack\",\n\n11\n\n  name: \"GitHub: new star to slack\",\n\n13\n\n  trigger: github.triggers.repo({\n\n15\n\n    owner: \"<your-org-name>\",\n\n16\n\n    repo: \"<your-repo-name>\",\n\n21\n\n  run: async (payload, io, ctx) \\=> {\n\n22\n\n    await io.slack.postMessage(\"post message\", {\n\n23\n\n      channel: process.env.SLACK\\_CHANNEL\\_ID!,\n\n24\n\n      text: \\`New GitHub star from ${payload.sender.html\\_url}, ${payload.sender.name}. Your new GitHub star count is ${payload.repository.stargazers\\_count}.\\`,"
},
{
  "url": "https://trigger.dev/apis/slack/examples/github-issue-reminder",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/slack/examples/github-issue-reminder",
    "loadedTime": "2024-03-16T13:46:19.438Z",
    "referrerUrl": "https://trigger.dev/apis/slack",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/slack/examples/github-issue-reminder",
    "title": "Slack | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Slack | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/slack"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Github, events } from \"@trigger.dev/github\";\n3\nimport { Slack } from \"@trigger.dev/slack\";\n5\nconst github = new Github({ id: \"github\" });\n6\nconst slack = new Slack({ id: \"slack\" });\n8\n// Sends a Slack message to a channel if a GitHub issue is left open for 24 hours\n10\nid: \"github-new-issue-reminder\",\n11\nname: \"GitHub: new issue reminder\",\n13\ntrigger: github.triggers.repo({\n14\nevent: events.onIssueOpened,\n15\nowner: \"<your-org-name>\",\n16\nrepo: \"<your-repo-name>\",\n22\nrun: async (payload, io, ctx) => {\n24\nctx.environment.type === \"DEVELOPMENT\" ? 3 : 60 * 60 * 24;\n25\nawait io.wait(\"wait 24 hours\", delayDuration);\n27\nconst issue = await io.github.getIssue(\"get issue\", {\n28\nowner: payload.repository.owner.login,\n29\nrepo: payload.repository.name,\n30\nissueNumber: payload.issue.number,\n33\nif (issue.updated_at === payload.issue.updated_at) {\n34\nconst assigneeResult = await io.github.addIssueAssignees(\"add assignee\", {\n35\nowner: payload.repository.owner.login,\n36\nrepo: payload.repository.name,\n37\nissueNumber: payload.issue.number,\n38\nassignees: [payload.sender.login],\n41\nawait io.slack.postMessage(\"send reminder\", {\n42\nchannel: process.env.SLACK_CHANNEL_ID!,\n43\ntext: `Issue ${payload.issue.title} is still open. I've assigned it to ${payload.sender.login}.\\n${issue.html_url}`,",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Github, events } from \"@trigger.dev/github\";\n\n3\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n5\n\nconst github \\= new Github({ id: \"github\" });\n\n6\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n8\n\n// Sends a Slack message to a channel if a GitHub issue is left open for 24 hours\n\n10\n\n  id: \"github-new-issue-reminder\",\n\n11\n\n  name: \"GitHub: new issue reminder\",\n\n13\n\n  trigger: github.triggers.repo({\n\n14\n\n    event: events.onIssueOpened,\n\n15\n\n    owner: \"<your-org-name>\",\n\n16\n\n    repo: \"<your-repo-name>\",\n\n22\n\n  run: async (payload, io, ctx) \\=> {\n\n24\n\n      ctx.environment.type \\=== \"DEVELOPMENT\" ? 3 : 60 \\* 60 \\* 24;\n\n25\n\n    await io.wait(\"wait 24 hours\", delayDuration);\n\n27\n\n    const issue \\= await io.github.getIssue(\"get issue\", {\n\n28\n\n      owner: payload.repository.owner.login,\n\n29\n\n      repo: payload.repository.name,\n\n30\n\n      issueNumber: payload.issue.number,\n\n33\n\n    if (issue.updated\\_at \\=== payload.issue.updated\\_at) {\n\n34\n\n      const assigneeResult \\= await io.github.addIssueAssignees(\"add assignee\", {\n\n35\n\n        owner: payload.repository.owner.login,\n\n36\n\n        repo: payload.repository.name,\n\n37\n\n        issueNumber: payload.issue.number,\n\n38\n\n        assignees: \\[payload.sender.login\\],\n\n41\n\n      await io.slack.postMessage(\"send reminder\", {\n\n42\n\n        channel: process.env.SLACK\\_CHANNEL\\_ID!,\n\n43\n\n        text: \\`Issue ${payload.issue.title} is still open. I've assigned it to ${payload.sender.login}.\\\\n${issue.html\\_url}\\`,"
},
{
  "url": "https://trigger.dev/apis/slack/examples/slack-openai-summarize-github-commits",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/slack/examples/slack-openai-summarize-github-commits",
    "loadedTime": "2024-03-16T13:46:27.945Z",
    "referrerUrl": "https://trigger.dev/apis/slack",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/slack/examples/slack-openai-summarize-github-commits",
    "title": "Slack | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Slack | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/slack"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, cronTrigger } from \"@trigger.dev/sdk\";\n2\nimport { Github } from \"@trigger.dev/github\";\n3\nimport { OpenAI } from \"@trigger.dev/openai\";\n4\nimport { Slack } from \"@trigger.dev/slack\";\n6\nconst github = new Github({\n8\ntoken: process.env.GITHUB_TOKEN!,\n11\nconst openai = new OpenAI({\n13\napiKey: process.env.OPENAI_API_KEY!,\n16\nconst slack = new Slack({ id: \"slack\" });\n18\n// This Job runs at 7am every day using a cron schedule expression.\n20\nid: \"summarize-yesterday-commits-on-slack\",\n21\nname: \"Summarize yesterdays GitHub commits on Slack\",\n23\ntrigger: cronTrigger({\n24\n// Note that the time is in UTC.\n25\n// Converted to cron schedule expression using https://crontab.guru/\n33\nrun: async (payload, io, ctx) => {\n34\n// 1. Get the 'since' and 'until' timestamps\n35\nconst since = payload.lastTimestamp?.toISOString();\n36\nconst until = payload.ts?.toISOString();\n38\n// 2. Get yesterday's commits from GitHub\n39\nconst owner = \"<your-org-name>\";\n40\nconst repo = \"<your-repo-name>\";\n42\nconst { data } = await io.github.runTask(\n43\n\"get-yesterdays-commits\",\n45\nreturn client.rest.repos.listCommits({\n52\n{ name: \"Get Yesterday's Commits\" }\n55\n// 3. Turn the commit data into a shorter format for OpenAI:\n56\nconst formattedCommits = await io.runTask(\"format-commits\", async () => {\n57\nreturn data.map((commit) => {\n59\nauthor: commit.commit.author?.name,\n60\nmessage: commit.commit.message,\n61\ntime: commit.commit.author?.date,\n62\nlink: commit.html_url,\n67\n// 4. Summarize the commits with OpenAI\n68\nconst chatCompletion = await io.openai.createChatCompletion(\n71\nmodel: \"gpt-3.5-turbo\",\n75\ncontent: `You are a expert programmer experienced in GitHub. \n76\nYou are to concisely summarize the GitHub commits in one message. \n77\nReply with a heading message -- 'GitHub Commits for ${repo} yesterday' \n78\n-- followed by a summary of the commits. Use bullet points in your summary \n79\nlist and use appropriate spacing for maximum readability.`,\n83\ncontent: `Here are all of the GitHub commits from yesterday \n84\n(delimited by triple quotes below). Please summarize them like \n85\n\"{user} {message} ({url})\".\\n\\n\"\"\"${JSON.stringify(\n96\nconst response = await io.slack.postMessage(\"post message\", {\n97\nchannel: process.env.SLACK_CHANNEL_ID!,\n98\ntext: chatCompletion.choices[0]?.message?.content || \"No summary found\",",
  "markdown": "1\n\nimport { TriggerClient, cronTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Github } from \"@trigger.dev/github\";\n\n3\n\nimport { OpenAI } from \"@trigger.dev/openai\";\n\n4\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n6\n\nconst github \\= new Github({\n\n8\n\n  token: process.env.GITHUB\\_TOKEN!,\n\n11\n\nconst openai \\= new OpenAI({\n\n13\n\n  apiKey: process.env.OPENAI\\_API\\_KEY!,\n\n16\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n18\n\n// This Job runs at 7am every day using a cron schedule expression.\n\n20\n\n  id: \"summarize-yesterday-commits-on-slack\",\n\n21\n\n  name: \"Summarize yesterdays GitHub commits on Slack\",\n\n23\n\n  trigger: cronTrigger({\n\n24\n\n    // Note that the time is in UTC.\n\n25\n\n    // Converted to cron schedule expression using https://crontab.guru/\n\n33\n\n  run: async (payload, io, ctx) \\=> {\n\n34\n\n    // 1. Get the 'since' and 'until' timestamps\n\n35\n\n    const since \\= payload.lastTimestamp?.toISOString();\n\n36\n\n    const until \\= payload.ts?.toISOString();\n\n38\n\n    // 2. Get yesterday's commits from GitHub\n\n39\n\n    const owner \\= \"<your-org-name>\";\n\n40\n\n    const repo \\= \"<your-repo-name>\";\n\n42\n\n    const { data } \\= await io.github.runTask(\n\n43\n\n      \"get-yesterdays-commits\",\n\n45\n\n        return client.rest.repos.listCommits({\n\n52\n\n      { name: \"Get Yesterday's Commits\" }\n\n55\n\n    // 3. Turn the commit data into a shorter format for OpenAI:\n\n56\n\n    const formattedCommits \\= await io.runTask(\"format-commits\", async () \\=> {\n\n57\n\n      return data.map((commit) \\=> {\n\n59\n\n          author: commit.commit.author?.name,\n\n60\n\n          message: commit.commit.message,\n\n61\n\n          time: commit.commit.author?.date,\n\n62\n\n          link: commit.html\\_url,\n\n67\n\n    // 4. Summarize the commits with OpenAI\n\n68\n\n    const chatCompletion \\= await io.openai.createChatCompletion(\n\n71\n\n        model: \"gpt-3.5-turbo\",\n\n75\n\n            content: \\`You are a expert programmer experienced in GitHub. \n\n76\n\n            You are to concisely summarize the GitHub commits in one message. \n\n77\n\n            Reply with a heading message -- 'GitHub Commits for ${repo} yesterday' \n\n78\n\n            -- followed by a summary of the commits. Use bullet points in your summary \n\n79\n\n            list and use appropriate spacing for maximum readability.\\`,\n\n83\n\n            content: \\`Here are all of the GitHub commits from yesterday \n\n84\n\n            (delimited by triple quotes below). Please summarize them like \n\n85\n\n            \"{user} {message} ({url})\".\\\\n\\\\n\"\"\"${JSON.stringify(\n\n96\n\n    const response \\= await io.slack.postMessage(\"post message\", {\n\n97\n\n      channel: process.env.SLACK\\_CHANNEL\\_ID!,\n\n98\n\n      text: chatCompletion.choices\\[0\\]?.message?.content || \"No summary found\","
},
{
  "url": "https://trigger.dev/apis/slack/examples/daily-linear-issues-slack-alert",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/slack/examples/daily-linear-issues-slack-alert",
    "loadedTime": "2024-03-16T13:46:28.742Z",
    "referrerUrl": "https://trigger.dev/apis/slack",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/slack/examples/daily-linear-issues-slack-alert",
    "title": "Slack | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Slack | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/slack"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, cronTrigger } from \"@trigger.dev/sdk\";\n2\nimport { Linear } from \"@trigger.dev/linear\";\n3\nimport { Slack } from \"@trigger.dev/slack\";\n4\nimport { get } from \"http\";\n6\nconst linear = new Linear({\n8\napiKey: process.env.LINEAR_API_KEY!,\n11\nconst slack = new Slack({ id: \"slack\" });\n14\nid: \"linear-issues-daily-slack-alert\",\n15\nname: \"Daily Slack alert for Linear issues\",\n21\ntrigger: cronTrigger({\n22\n// Note that the time is in UTC.\n23\n// Converted to cron schedule expression using https://crontab.guru/\n24\ncron: \"0 9 * * 1,2,3,4,5\",\n27\nrun: async (payload, io, ctx) => {\n28\nconst inProgressIssues = await io.linear.issues(\"get-in-progress-issues\", {\n29\n// Only get the first 20 issues\n34\n// To get your Team id from within Linear, hit CMD+K and \"Copy model UUID\"\n35\neq: \"<your-team-uuid>\",\n40\neq: \"<assignee-email-address>\",\n51\nawait io.slack.postMessage(\"post message\", {\n52\nchannel: process.env.SLACK_CHANNEL_ID!,\n53\n// Include text for notifications and blocks to get a rich Slack message in the channel\n54\ntext: `You have ${inProgressIssues.nodes.length} 'In Progress' issues in Linear!`,\n55\n// Create rich Slack messages with the Block Kit builder https://app.slack.com/block-kit-builder/\n56\nblocks: inProgressIssues.nodes.flatMap((issue) => [\n61\ntext: `⏳ *${issue.title}*`,\n70\nvalue: \"click_me_123\",\n72\naction_id: \"button-action\",",
  "markdown": "1\n\nimport { TriggerClient, cronTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Linear } from \"@trigger.dev/linear\";\n\n3\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n4\n\nimport { get } from \"http\";\n\n6\n\nconst linear \\= new Linear({\n\n8\n\n  apiKey: process.env.LINEAR\\_API\\_KEY!,\n\n11\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n14\n\n  id: \"linear-issues-daily-slack-alert\",\n\n15\n\n  name: \"Daily Slack alert for Linear issues\",\n\n21\n\n  trigger: cronTrigger({\n\n22\n\n    // Note that the time is in UTC.\n\n23\n\n    // Converted to cron schedule expression using https://crontab.guru/\n\n24\n\n    cron: \"0 9 \\* \\* 1,2,3,4,5\",\n\n27\n\n  run: async (payload, io, ctx) \\=> {\n\n28\n\n    const inProgressIssues \\= await io.linear.issues(\"get-in-progress-issues\", {\n\n29\n\n      //  Only get the first 20 issues\n\n34\n\n            // To get your Team id from within Linear, hit CMD+K and \"Copy model UUID\"\n\n35\n\n            eq: \"<your-team-uuid>\",\n\n40\n\n            eq: \"<assignee-email-address>\",\n\n51\n\n    await io.slack.postMessage(\"post message\", {\n\n52\n\n      channel: process.env.SLACK\\_CHANNEL\\_ID!,\n\n53\n\n      // Include text for notifications and blocks to get a rich Slack message in the channel\n\n54\n\n      text: \\`You have ${inProgressIssues.nodes.length} 'In Progress' issues in Linear!\\`,\n\n55\n\n      // Create rich Slack messages with the Block Kit builder https://app.slack.com/block-kit-builder/\n\n56\n\n      blocks: inProgressIssues.nodes.flatMap((issue) \\=> \\[\n\n61\n\n            text: \\`⏳ \\*${issue.title}\\*\\`,\n\n70\n\n            value: \"click\\_me\\_123\",\n\n72\n\n            action\\_id: \"button-action\","
},
{
  "url": "https://trigger.dev/apis/slack/examples/slack-sendgrid-send-activity-summary",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/slack/examples/slack-sendgrid-send-activity-summary",
    "loadedTime": "2024-03-16T13:46:38.150Z",
    "referrerUrl": "https://trigger.dev/apis/slack",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/slack/examples/slack-sendgrid-send-activity-summary",
    "title": "Slack | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Slack | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/slack"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, cronTrigger } from \"@trigger.dev/sdk\";\n2\nimport { SendGrid } from \"@trigger.dev/sendgrid\";\n3\nimport { Slack } from \"@trigger.dev/slack\";\n4\nimport { weeklySummaryDb } from \"./mocks/db\";\n5\nimport { weeklySummaryEmail } from \"./mocks/emails\";\n7\nconst sendgrid = new SendGrid({\n9\napiKey: process.env.SENDGRID_API_KEY!,\n12\nconst slack = new Slack({ id: \"slack\" });\n14\n// This Job sends a weekly summary email to users who have\n15\n// summariesEnabled = true, and then posts the total numbers to Slack.\n17\nid: \"weekly-user-activity-summary\",\n18\nname: \"Weekly user activity summary\",\n20\nintegrations: { sendgrid, slack },\n21\ntrigger: cronTrigger({\n22\n// Send every Friday at 4pm\n25\nrun: async (payload, io, ctx) => {\n26\nconst users = await weeklySummaryDb.getUsers();\n31\nfor (const user of users) {\n32\nif (user.summariesEnabled) {\n33\nawait io.sendgrid.sendEmail(`Weekly summary for ${user.id}`, {\n35\n// The 'from' email must be a verified domain in your SendGrid account.\n36\nfrom: \"hello@acme.inc\",\n37\nsubject: \"Your weekly summary\",\n38\nhtml: weeklySummaryEmail(user),\n46\nawait io.slack.postMessage(\"Notify team\", {\n47\ntext: `Weekly summary sent to ${sentCount} users and not sent to ${notSentCount} users`,\n48\n// This has to be a channel ID, not a channel name\n49\nchannel: \"YOUR_CHANNEL_ID\",",
  "markdown": "1\n\nimport { TriggerClient, cronTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { SendGrid } from \"@trigger.dev/sendgrid\";\n\n3\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n4\n\nimport { weeklySummaryDb } from \"./mocks/db\";\n\n5\n\nimport { weeklySummaryEmail } from \"./mocks/emails\";\n\n7\n\nconst sendgrid \\= new SendGrid({\n\n9\n\n  apiKey: process.env.SENDGRID\\_API\\_KEY!,\n\n12\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n14\n\n// This Job sends a weekly summary email to users who have\n\n15\n\n// summariesEnabled = true, and then posts the total numbers to Slack.\n\n17\n\n  id: \"weekly-user-activity-summary\",\n\n18\n\n  name: \"Weekly user activity summary\",\n\n20\n\n  integrations: { sendgrid, slack },\n\n21\n\n  trigger: cronTrigger({\n\n22\n\n    // Send every Friday at 4pm\n\n25\n\n  run: async (payload, io, ctx) \\=> {\n\n26\n\n    const users \\= await weeklySummaryDb.getUsers();\n\n31\n\n    for (const user of users) {\n\n32\n\n      if (user.summariesEnabled) {\n\n33\n\n        await io.sendgrid.sendEmail(\\`Weekly summary for ${user.id}\\`, {\n\n35\n\n          // The 'from' email must be a verified domain in your SendGrid account.\n\n36\n\n          from: \"hello@acme.inc\",\n\n37\n\n          subject: \"Your weekly summary\",\n\n38\n\n          html: weeklySummaryEmail(user),\n\n46\n\n    await io.slack.postMessage(\"Notify team\", {\n\n47\n\n      text: \\`Weekly summary sent to ${sentCount} users and not sent to ${notSentCount} users\\`,\n\n48\n\n      // This has to be a channel ID, not a channel name\n\n49\n\n      channel: \"YOUR\\_CHANNEL\\_ID\","
},
{
  "url": "https://trigger.dev/apis/snyk/examples/snyk-get-user-details",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/snyk/examples/snyk-get-user-details",
    "loadedTime": "2024-03-16T13:46:39.337Z",
    "referrerUrl": "https://trigger.dev/apis/snyk",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/snyk/examples/snyk-get-user-details",
    "title": "Snyk | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Snyk | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/snyk"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n4\n// Replace this URL with the actual API endpoint you want to call in Snyk\n5\n// https://docs.snyk.io/snyk-api/authentication-for-api\n6\nconst endpointURL = `${process.env.SNYK_BASE_URL}/user/me`;\n7\nconst createOrgEndpontUrl = `${process.env.SNYK_BASE_URL}/org`;\n9\n// Create request options\n10\nconst requestOptions: RequestInit = {\n12\n\"Content-Type\": \"application/json; charset=utf-8\",\n13\n// You can find your token in your General Account Settings on\n14\n// https://snyk.io/account/. See Authentication for API details.\n15\nAuthorization: `${process.env.SNYK_AUTH_TOKEN}`,\n20\nid: \"snyk-get-my-user-details\",\n21\nname: \"Snyk get my user details\",\n23\ntrigger: eventTrigger({\n24\nname: \"snyk-get-profile\",\n26\nrun: async (payload, io, ctx) => {\n27\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n29\n\"Get Snyk me user details\",\n31\nconst response = await fetch(endpointURL, {\n36\n// Return the response body\n37\nconst res = await response.json();\n41\n// Add metadata to improve how the task displays in the logs\n42\n{ name: \"get snyk me user details\", icon: \"snyk\" }\n47\n// Create organization in Snyk\n50\n// id: \"snyk-create-org\",\n51\n// name: \"Snyk create new organization\",\n53\n// trigger: eventTrigger({\n54\n// name: \"snyk-add-org\",\n57\n// groupId: z.string(),\n58\n// sourceOrgId: z.string(),\n61\n// run: async (payload, io, ctx) => {\n62\n// // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n64\n// \"Create Organization\",\n66\n// // Make request using Fetch API\n67\n// const response = await fetch(createOrgEndpontUrl, {\n70\n// body: JSON.stringify(payload),\n73\n// // Return the response body\n74\n// const res = await response.json();\n78\n// // Add metadata to improve how the task displays in the logs\n79\n// { name: \"create new organization in snyk\", icon: \"snyk\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n4\n\n// Replace this URL with the actual API endpoint you want to call in Snyk\n\n5\n\n// https://docs.snyk.io/snyk-api/authentication-for-api\n\n6\n\nconst endpointURL \\= \\`${process.env.SNYK\\_BASE\\_URL}/user/me\\`;\n\n7\n\nconst createOrgEndpontUrl \\= \\`${process.env.SNYK\\_BASE\\_URL}/org\\`;\n\n9\n\n// Create request options\n\n10\n\nconst requestOptions: RequestInit \\= {\n\n12\n\n    \"Content-Type\": \"application/json; charset=utf-8\",\n\n13\n\n    // You can find your token in your General Account Settings on\n\n14\n\n    // https://snyk.io/account/. See Authentication for API details.\n\n15\n\n    Authorization: \\`${process.env.SNYK\\_AUTH\\_TOKEN}\\`,\n\n20\n\n  id: \"snyk-get-my-user-details\",\n\n21\n\n  name: \"Snyk get my user details\",\n\n23\n\n  trigger: eventTrigger({\n\n24\n\n    name: \"snyk-get-profile\",\n\n26\n\n  run: async (payload, io, ctx) \\=> {\n\n27\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n29\n\n      \"Get Snyk me user details\",\n\n31\n\n        const response \\= await fetch(endpointURL, {\n\n36\n\n        // Return the response body\n\n37\n\n        const res \\= await response.json();\n\n41\n\n      // Add metadata to improve how the task displays in the logs\n\n42\n\n      { name: \"get snyk me user details\", icon: \"snyk\" }\n\n47\n\n// Create organization in Snyk\n\n50\n\n//   id: \"snyk-create-org\",\n\n51\n\n//   name: \"Snyk create new organization\",\n\n53\n\n//   trigger: eventTrigger({\n\n54\n\n//     name: \"snyk-add-org\",\n\n57\n\n//       groupId: z.string(),\n\n58\n\n//       sourceOrgId: z.string(),\n\n61\n\n//   run: async (payload, io, ctx) => {\n\n62\n\n//     // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n64\n\n//       \"Create Organization\",\n\n66\n\n//         // Make request using Fetch API\n\n67\n\n//         const response = await fetch(createOrgEndpontUrl, {\n\n70\n\n//           body: JSON.stringify(payload),\n\n73\n\n//         // Return the response body\n\n74\n\n//         const res = await response.json();\n\n78\n\n//       // Add metadata to improve how the task displays in the logs\n\n79\n\n//       { name: \"create new organization in snyk\", icon: \"snyk\" }"
},
{
  "url": "https://trigger.dev/apis/snyk/examples/snyk-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/snyk/examples/snyk-http-endpoint",
    "loadedTime": "2024-03-16T13:46:46.617Z",
    "referrerUrl": "https://trigger.dev/apis/snyk",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/snyk/examples/snyk-http-endpoint",
    "title": "Snyk | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Snyk | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/snyk"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, verifyRequestSignature } from \"@trigger.dev/sdk\";\n3\n// Create an HTTP endpoint to listen to Snyk webhooks\n4\n// (This will create the endpoint URL & Secret on the `trigger.dev` dashboard)\n5\n// Create a Snyk webhook by providing the endpoint URL & Secret (Copy from the dashboard) in the request body.\n6\n// Use https://snyk.docs.apiary.io/#reference/webhooks/webhook-collection/create-a-webhook?console=1\n7\n// Set the `SNYK_WEBHOOK_SIGNING_SECRET` (Secret) in the .env file.\n8\nconst snyk = client.defineHttpEndpoint({\n12\nverify: async (request) => {\n13\nreturn await verifyRequestSignature({\n15\nheaderName: \"x-hub-signature\",\n16\nsecret: process.env.SNYK_WEBHOOK_SIGNING_SECRET!,\n27\ntrigger: snyk.onRequest(),\n28\nrun: async (request, io, ctx) => {\n29\nconst body = await request.json();\n30\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient, verifyRequestSignature } from \"@trigger.dev/sdk\";\n\n3\n\n// Create an HTTP endpoint to listen to Snyk webhooks\n\n4\n\n// (This will create the endpoint URL & Secret on the \\`trigger.dev\\` dashboard)\n\n5\n\n// Create a Snyk webhook by providing the endpoint URL & Secret (Copy from the dashboard) in the request body.\n\n6\n\n// Use https://snyk.docs.apiary.io/#reference/webhooks/webhook-collection/create-a-webhook?console=1\n\n7\n\n// Set the \\`SNYK\\_WEBHOOK\\_SIGNING\\_SECRET\\` (Secret) in the .env file.\n\n8\n\nconst snyk \\= client.defineHttpEndpoint({\n\n12\n\n  verify: async (request) \\=> {\n\n13\n\n    return await verifyRequestSignature({\n\n15\n\n      headerName: \"x-hub-signature\",\n\n16\n\n      secret: process.env.SNYK\\_WEBHOOK\\_SIGNING\\_SECRET!,\n\n27\n\n  trigger: snyk.onRequest(),\n\n28\n\n  run: async (request, io, ctx) \\=> {\n\n29\n\n    const body \\= await request.json();\n\n30\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/googledrive/examples/update-google-drive-filename",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/googledrive/examples/update-google-drive-filename",
    "loadedTime": "2024-03-16T13:46:53.733Z",
    "referrerUrl": "https://trigger.dev/apis/googledrive",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/googledrive/examples/update-google-drive-filename",
    "title": "Google Drive | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Google Drive | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/googledrive"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { google } from \"googleapis\";\n3\nimport { JWT } from \"google-auth-library\";\n6\n// Create a service account and project: https://cloud.google.com/iam/docs/service-account-overview\n7\n// Create a JWT (JSON Web Token) authentication instance for Google APIs.\n8\n// https://cloud.google.com/nodejs/docs/reference/google-auth-library/latest/google-auth-library/jwt\n10\nemail: process.env.GOOGLE_CLIENT_EMAIL, // The email associated with the service account\n11\nkey: process.env.GOOGLE_PRIVATE_KEY!.split(String.raw`\\n`).join(\"\\n\"), // The private key associated with the service account\n12\nscopes: \"https://www.googleapis.com/auth/drive\", // The desired scope for accessing Google Drive\n15\n// Initialize the Google Drive API\n16\n// You have to enable the Google Drive API https://console.cloud.google.com/apis/\n17\nconst drive = google.drive({ version: \"v2\", auth });\n20\nid: \"google-drive-file-rename\",\n21\nname: \"Google drive file rename\",\n23\ntrigger: eventTrigger({\n24\nname: \"google-drive-file-rename\",\n26\n// The fileId is a unique identifier found in the Google Drive sharing link.\n27\n// E.g.: https://drive.google.com/file/d/FILE_ID/view\n32\nrun: async (payload, io, ctx) => {\n33\nconst { fileId, newName } = payload;\n35\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n37\n\"Google Drive File Rename\",\n39\n// NB: You must share the Google Drive file with the service account.\n40\nawait drive.files.update({\n48\n// Add metadata to improve how the task displays in the logs\n49\n{ name: \"Google drive file rename\", icon: \"google\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { google } from \"googleapis\";\n\n3\n\nimport { JWT } from \"google-auth-library\";\n\n6\n\n// Create a service account and project: https://cloud.google.com/iam/docs/service-account-overview\n\n7\n\n// Create a JWT (JSON Web Token) authentication instance for Google APIs.\n\n8\n\n// https://cloud.google.com/nodejs/docs/reference/google-auth-library/latest/google-auth-library/jwt\n\n10\n\n  email: process.env.GOOGLE\\_CLIENT\\_EMAIL, // The email associated with the service account\n\n11\n\n  key: process.env.GOOGLE\\_PRIVATE\\_KEY!.split(String.raw\\`\\\\n\\`).join(\"\\\\n\"), // The private key associated with the service account\n\n12\n\n  scopes: \"https://www.googleapis.com/auth/drive\", // The desired scope for accessing Google Drive\n\n15\n\n// Initialize the Google Drive API\n\n16\n\n// You have to enable the Google Drive API https://console.cloud.google.com/apis/\n\n17\n\nconst drive \\= google.drive({ version: \"v2\", auth });\n\n20\n\n  id: \"google-drive-file-rename\",\n\n21\n\n  name: \"Google drive file rename\",\n\n23\n\n  trigger: eventTrigger({\n\n24\n\n    name: \"google-drive-file-rename\",\n\n26\n\n      // The fileId is a unique identifier found in the Google Drive sharing link.\n\n27\n\n      // E.g.: https://drive.google.com/file/d/FILE\\_ID/view\n\n32\n\n  run: async (payload, io, ctx) \\=> {\n\n33\n\n    const { fileId, newName } \\= payload;\n\n35\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n37\n\n      \"Google Drive File Rename\",\n\n39\n\n        // NB: You must share the Google Drive file with the service account.\n\n40\n\n        await drive.files.update({\n\n48\n\n      // Add metadata to improve how the task displays in the logs\n\n49\n\n      { name: \"Google drive file rename\", icon: \"google\" }"
},
{
  "url": "https://trigger.dev/apis/googledrive/examples/google-drive-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/googledrive/examples/google-drive-http-endpoint",
    "loadedTime": "2024-03-16T13:47:02.217Z",
    "referrerUrl": "https://trigger.dev/apis/googledrive",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/googledrive/examples/google-drive-http-endpoint",
    "title": "Google Drive | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Google Drive | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/googledrive"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n3\n// Docs: https://developers.google.com/drive/api/guides/push\n5\n// Create a channel to receive notifications from google drive API\n6\n// By making a POST request to https://www.googleapis.com/drive/v3/files/fileId/watch endpoint (replace fileId with your file id)\n7\n// With authorization header and body as:\n8\n// ID is a unique string, which will be used to identify the channel\n10\n// Address is the endpoint URL, where the notifications will be sent\n11\n// Token is a Secret string, which will be used to verify the request\n12\n// Get endpoint URL and Secret from the `trigger.dev` dashboard\n14\n// Set the GOOGLE_DRIVE_CHANNEL_TOKEN (Secret) in the .env file.\n16\n// Create an HTTP Endpoint, with the Google Drive details\n17\nexport const drive = client.defineHttpEndpoint({\n19\ntitle: \"Google Drive\",\n20\nsource: \"drive.google.com\",\n23\nskipTriggeringRuns: true,\n26\n\"x-goog-resource-state\": [{ $startsWith: \"sync\" }],\n29\nhandler: async (req, verify) => {\n30\nreturn new Response(\"OK\", { status: 200 });\n33\nverify: async (request) => {\n35\nrequest.headers.get(\"x-goog-channel-token\") ===\n36\nprocess.env.GOOGLE_DRIVE_CHANNEL_TOKEN\n38\nreturn { success: true };\n43\nreason: \"Invalid token\",\n49\nid: \"http-google-drive\",\n50\nname: \"HTTP Google Drive\",\n53\n// Create a trigger from the HTTP endpoint\n54\ntrigger: drive.onRequest(),\n55\nrun: async (request, io, ctx) => {\n56\nawait io.logger.info(`Body`, {\n57\nresourceId: request.headers.get(\"x-goog-resource-id\"),\n58\nresourceUri: request.headers.get(\"x-goog-resource-uri\"),\n59\nresourceState: request.headers.get(\"x-goog-resource-state\"),",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n3\n\n// Docs: https://developers.google.com/drive/api/guides/push\n\n5\n\n// Create a channel to receive notifications from google drive API\n\n6\n\n// By making a POST request to https://www.googleapis.com/drive/v3/files/fileId/watch endpoint (replace fileId with your file id)\n\n7\n\n// With authorization header and body as:\n\n8\n\n// ID is a unique string, which will be used to identify the channel\n\n10\n\n// Address is the endpoint URL, where the notifications will be sent\n\n11\n\n// Token is a Secret string, which will be used to verify the request\n\n12\n\n// Get endpoint URL and Secret from the \\`trigger.dev\\` dashboard\n\n14\n\n// Set the GOOGLE\\_DRIVE\\_CHANNEL\\_TOKEN (Secret) in the .env file.\n\n16\n\n// Create an HTTP Endpoint, with the Google Drive details\n\n17\n\nexport const drive \\= client.defineHttpEndpoint({\n\n19\n\n  title: \"Google Drive\",\n\n20\n\n  source: \"drive.google.com\",\n\n23\n\n    skipTriggeringRuns: true,\n\n26\n\n        \"x-goog-resource-state\": \\[{ $startsWith: \"sync\" }\\],\n\n29\n\n    handler: async (req, verify) \\=> {\n\n30\n\n      return new Response(\"OK\", { status: 200 });\n\n33\n\n  verify: async (request) \\=> {\n\n35\n\n      request.headers.get(\"x-goog-channel-token\") \\===\n\n36\n\n      process.env.GOOGLE\\_DRIVE\\_CHANNEL\\_TOKEN\n\n38\n\n      return { success: true };\n\n43\n\n      reason: \"Invalid token\",\n\n49\n\n  id: \"http-google-drive\",\n\n50\n\n  name: \"HTTP Google Drive\",\n\n53\n\n  // Create a trigger from the HTTP endpoint\n\n54\n\n  trigger: drive.onRequest(),\n\n55\n\n  run: async (request, io, ctx) \\=> {\n\n56\n\n    await io.logger.info(\\`Body\\`, {\n\n57\n\n      resourceId: request.headers.get(\"x-goog-resource-id\"),\n\n58\n\n      resourceUri: request.headers.get(\"x-goog-resource-uri\"),\n\n59\n\n      resourceState: request.headers.get(\"x-goog-resource-state\"),"
},
{
  "url": "https://trigger.dev/apis/googlesheets/examples/insert-data-into-google-sheets",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/googlesheets/examples/insert-data-into-google-sheets",
    "loadedTime": "2024-03-16T13:47:04.423Z",
    "referrerUrl": "https://trigger.dev/apis/googlesheets",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/googlesheets/examples/insert-data-into-google-sheets",
    "title": "Google Sheets | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Google Sheets | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/googlesheets"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { config } from \"dotenv\";\n2\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n3\nimport { google } from \"googleapis\";\n4\nimport { JWT } from \"google-auth-library\";\n7\n// Create a service account and project: https://cloud.google.com/iam/docs/service-account-overview\n8\n// Create a JWT (JSON Web Token) authentication instance for Google APIs.\n9\n// https://cloud.google.com/nodejs/docs/reference/google-auth-library/latest/google-auth-library/jwt\n11\nemail: process.env.GOOGLE_CLIENT_EMAIL, // The email associated with the service account\n12\nkey: process.env.GOOGLE_PRIVATE_KEY!.split(String.raw`\\n`).join(\"\\n\"), // The private key associated with the service account\n13\nscopes: \"https://www.googleapis.com/auth/spreadsheets\", // The desired scope for accessing Google Sheets\n16\n// You have to enable the Google Sheets API: https://console.cloud.google.com/apis/\n17\nconst sheets = google.sheets({ version: \"v4\", auth });\n20\nid: \"google-sheets-append\",\n21\nname: \"Google Sheets Append\",\n23\ntrigger: eventTrigger({\n24\nname: \"google-sheets\",\n27\ngithubUrl: z.string(),\n28\nrange: z.string().optional(),\n31\nrun: async (payload, io, ctx) => {\n32\nconst { fullName, githubUrl, range } = payload;\n34\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n36\n\"Google Sheets append row\",\n38\nconst sheetsData = [[fullName, githubUrl]];\n40\nconst sheetsAPI = sheets.spreadsheets.values;\n42\nawait sheetsAPI.append({\n43\n// NB: You must share your Google Sheet with your service account email\n44\nspreadsheetId: process.env.SPREADSHEET_ID,\n45\n// Set a spreadsheet range\n47\nvalueInputOption: \"USER_ENTERED\",\n48\ninsertDataOption: \"INSERT_ROWS\",\n55\n// Add metadata to improve how the task displays in the logs\n56\n{ name: \"Google Sheets append\", icon: \"google\" }",
  "markdown": "1\n\nimport { config } from \"dotenv\";\n\n2\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n3\n\nimport { google } from \"googleapis\";\n\n4\n\nimport { JWT } from \"google-auth-library\";\n\n7\n\n// Create a service account and project: https://cloud.google.com/iam/docs/service-account-overview\n\n8\n\n// Create a JWT (JSON Web Token) authentication instance for Google APIs.\n\n9\n\n// https://cloud.google.com/nodejs/docs/reference/google-auth-library/latest/google-auth-library/jwt\n\n11\n\n  email: process.env.GOOGLE\\_CLIENT\\_EMAIL, // The email associated with the service account\n\n12\n\n  key: process.env.GOOGLE\\_PRIVATE\\_KEY!.split(String.raw\\`\\\\n\\`).join(\"\\\\n\"), // The private key associated with the service account\n\n13\n\n  scopes: \"https://www.googleapis.com/auth/spreadsheets\", // The desired scope for accessing Google Sheets\n\n16\n\n// You have to enable the Google Sheets API: https://console.cloud.google.com/apis/\n\n17\n\nconst sheets \\= google.sheets({ version: \"v4\", auth });\n\n20\n\n  id: \"google-sheets-append\",\n\n21\n\n  name: \"Google Sheets Append\",\n\n23\n\n  trigger: eventTrigger({\n\n24\n\n    name: \"google-sheets\",\n\n27\n\n      githubUrl: z.string(),\n\n28\n\n      range: z.string().optional(),\n\n31\n\n  run: async (payload, io, ctx) \\=> {\n\n32\n\n    const { fullName, githubUrl, range } \\= payload;\n\n34\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n36\n\n      \"Google Sheets append row\",\n\n38\n\n        const sheetsData \\= \\[\\[fullName, githubUrl\\]\\];\n\n40\n\n        const sheetsAPI \\= sheets.spreadsheets.values;\n\n42\n\n        await sheetsAPI.append({\n\n43\n\n          // NB: You must share your Google Sheet with your service account email\n\n44\n\n          spreadsheetId: process.env.SPREADSHEET\\_ID,\n\n45\n\n          // Set a spreadsheet range\n\n47\n\n          valueInputOption: \"USER\\_ENTERED\",\n\n48\n\n          insertDataOption: \"INSERT\\_ROWS\",\n\n55\n\n      // Add metadata to improve how the task displays in the logs\n\n56\n\n      { name: \"Google Sheets append\", icon: \"google\" }"
},
{
  "url": "https://trigger.dev/apis/googlesheets/examples/google-sheets-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/googlesheets/examples/google-sheets-http-endpoint",
    "loadedTime": "2024-03-16T13:47:12.140Z",
    "referrerUrl": "https://trigger.dev/apis/googlesheets",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/googlesheets/examples/google-sheets-http-endpoint",
    "title": "Google Sheets | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Google Sheets | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/googlesheets"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n3\n// Apps Script Docs: https://developers.google.com/apps-script/reference\n4\n// Triggers Docs: https://developers.google.com/apps-script/guides/triggers\n6\n// Go to https://docs.google.com/spreadsheets\n7\n// Open a spreadsheet or create a new one\n8\n// Click on Extensions > Apps Script\n10\n// Add the following code to the script editor:\n12\n// function pushNotification(e) {\n13\n// // get endpoint url and secret key from trigger.dev dashboard\n18\n// 'message': 'Google Sheets event',\n19\n// 'details': e // This contains information about the edit event\n22\n// var payload = JSON.stringify(payloadData);\n26\n// 'contentType': 'application/json',\n28\n// 'x-webhook-secret': secretKey\n33\n// UrlFetchApp.fetch(url, options);\n36\n// Save the script and click on the clock icon (Triggers) in the sidebar to open the Triggers page\n37\n// Click on Add Trigger, which will open a dialog box\n38\n// Choose pushNotification as the function to run\n39\n// Select event type, e.g. On open, On edit, On change etc.\n42\n// Set the GOOGLE_SHEETS_WEBHOOK_SECRET (Secret) in the .env file.\n44\n// Create an HTTP Endpoint, with the Google Sheets details\n45\nconst sheets = client.defineHttpEndpoint({\n47\nsource: \"sheets.google.com\",\n49\nverify: async (request) => {\n50\nconst secret = process.env.GOOGLE_SHEETS_WEBHOOK_SECRET;\n51\nif (!secret) return { success: false, reason: \"Missing Secret\" };\n52\nif (request.headers.get(\"x-webhook-secret\") === secret)\n53\nreturn { success: true };\n54\nreturn { success: false, reason: \"Webhook Secret Match Failed\" };\n59\nid: \"http-google-sheets\",\n60\nname: \"HTTP Google Sheets\",\n63\n// Create a trigger from the HTTP endpoint\n64\ntrigger: sheets.onRequest(),\n65\nrun: async (request, io, ctx) => {\n66\nconst body = await request.json();\n67\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n3\n\n// Apps Script Docs: https://developers.google.com/apps-script/reference\n\n4\n\n// Triggers Docs: https://developers.google.com/apps-script/guides/triggers\n\n6\n\n// Go to https://docs.google.com/spreadsheets\n\n7\n\n// Open a spreadsheet or create a new one\n\n8\n\n// Click on Extensions > Apps Script\n\n10\n\n// Add the following code to the script editor:\n\n12\n\n// function pushNotification(e) {\n\n13\n\n//   // get endpoint url and secret key from trigger.dev dashboard\n\n18\n\n//     'message': 'Google Sheets event',\n\n19\n\n//     'details': e // This contains information about the edit event\n\n22\n\n//   var payload = JSON.stringify(payloadData);\n\n26\n\n//     'contentType': 'application/json',\n\n28\n\n//       'x-webhook-secret': secretKey\n\n33\n\n//   UrlFetchApp.fetch(url, options);\n\n36\n\n// Save the script and click on the clock icon (Triggers) in the sidebar to open the Triggers page\n\n37\n\n// Click on Add Trigger, which will open a dialog box\n\n38\n\n// Choose pushNotification as the function to run\n\n39\n\n// Select event type, e.g. On open, On edit, On change etc.\n\n42\n\n// Set the GOOGLE\\_SHEETS\\_WEBHOOK\\_SECRET (Secret) in the .env file.\n\n44\n\n// Create an HTTP Endpoint, with the Google Sheets details\n\n45\n\nconst sheets \\= client.defineHttpEndpoint({\n\n47\n\n  source: \"sheets.google.com\",\n\n49\n\n  verify: async (request) \\=> {\n\n50\n\n    const secret \\= process.env.GOOGLE\\_SHEETS\\_WEBHOOK\\_SECRET;\n\n51\n\n    if (!secret) return { success: false, reason: \"Missing Secret\" };\n\n52\n\n    if (request.headers.get(\"x-webhook-secret\") \\=== secret)\n\n53\n\n      return { success: true };\n\n54\n\n    return { success: false, reason: \"Webhook Secret Match Failed\" };\n\n59\n\n  id: \"http-google-sheets\",\n\n60\n\n  name: \"HTTP Google Sheets\",\n\n63\n\n  // Create a trigger from the HTTP endpoint\n\n64\n\n  trigger: sheets.onRequest(),\n\n65\n\n  run: async (request, io, ctx) \\=> {\n\n66\n\n    const body \\= await request.json();\n\n67\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/hubspot/examples/hubspot-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/hubspot/examples/hubspot-http-endpoint",
    "loadedTime": "2024-03-16T13:47:20.918Z",
    "referrerUrl": "https://trigger.dev/apis/hubspot",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/hubspot/examples/hubspot-http-endpoint",
    "title": "HubSpot | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "HubSpot | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/hubspot"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { createHash } from \"crypto\";\n4\n// Go to your normal HubSpot account\n5\n// Create a private app in Settings > Integrations > Private apps\n6\n// With scopes: 'crm.objects.contacts.read', 'crm.objects.contacts.write'\n7\n// And add your trigger webhooks url in target url.\n8\n// Create subscription for contact creation and deletion\n9\n// Copy your client secret from the Auth tab and paste it in the .env file\n10\n// Create an HTTP Endpoint, with the HubSpot details\n11\nconst hubspot = client.defineHttpEndpoint({\n13\nsource: \"hubspot.com\",\n15\nverify: async (request) => {\n16\nconst bodyText = await request.text();\n17\nconst source_string = process.env.HUBSPOT_SECRET! + bodyText;\n18\nconst hash = createHash(\"sha256\").update(source_string).digest(\"hex\");\n19\nconst reqHash = request.headers.get(\"X-HubSpot-Signature\");\n20\nconst success = hash === reqHash;\n21\nif (success) return { success };\n22\nreturn { success: false, reason: \"Failed sha256 verification\" };\n26\n// Job that runs when the HTTP endpoint is called from HubSpot\n27\n// When a contact is created or deleted\n33\n// Create a trigger from the HTTP endpoint\n34\ntrigger: hubspot.onRequest(),\n35\nrun: async (request, io, ctx) => {\n36\nconst body = await request.json();\n37\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { createHash } from \"crypto\";\n\n4\n\n// Go to your normal HubSpot account\n\n5\n\n// Create a private app in Settings > Integrations > Private apps\n\n6\n\n// With scopes: 'crm.objects.contacts.read', 'crm.objects.contacts.write'\n\n7\n\n// And add your trigger webhooks url in target url.\n\n8\n\n// Create subscription for contact creation and deletion\n\n9\n\n// Copy your client secret from the Auth tab and paste it in the .env file\n\n10\n\n// Create an HTTP Endpoint, with the HubSpot details\n\n11\n\nconst hubspot \\= client.defineHttpEndpoint({\n\n13\n\n  source: \"hubspot.com\",\n\n15\n\n  verify: async (request) \\=> {\n\n16\n\n    const bodyText \\= await request.text();\n\n17\n\n    const source\\_string \\= process.env.HUBSPOT\\_SECRET! + bodyText;\n\n18\n\n    const hash \\= createHash(\"sha256\").update(source\\_string).digest(\"hex\");\n\n19\n\n    const reqHash \\= request.headers.get(\"X-HubSpot-Signature\");\n\n20\n\n    const success \\= hash \\=== reqHash;\n\n21\n\n    if (success) return { success };\n\n22\n\n    return { success: false, reason: \"Failed sha256 verification\" };\n\n26\n\n// Job that runs when the HTTP endpoint is called from HubSpot\n\n27\n\n// When a contact is created or deleted\n\n33\n\n  // Create a trigger from the HTTP endpoint\n\n34\n\n  trigger: hubspot.onRequest(),\n\n35\n\n  run: async (request, io, ctx) \\=> {\n\n36\n\n    const body \\= await request.json();\n\n37\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/hubspot/examples/create-contact-in-hubspot",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/hubspot/examples/create-contact-in-hubspot",
    "loadedTime": "2024-03-16T13:47:21.466Z",
    "referrerUrl": "https://trigger.dev/apis/hubspot",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/hubspot/examples/create-contact-in-hubspot",
    "title": "HubSpot | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "HubSpot | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/hubspot"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { Client } from \"@hubspot/api-client\";\n5\n// SDK: https://github.com/hubspot/hubspot-api-nodejs\n6\n// API Reference: https://developers.hubspot.com/docs/api/overview\n7\n// Create an private app in HubSpot and get access token : https://developers.hubspot.com/docs/api/private-apps\n8\nconst hubspot = new Client({ accessToken: process.env.HUBSPOT_ACCESS_TOKEN });\n11\nid: \"hubspot-create-contact\",\n12\nname: \"HubSpot Create Contact\",\n14\ntrigger: eventTrigger({\n15\nname: \"hubspot-create-contact\",\n17\nfirstname: z.string(),\n19\nemail: z.string().email(),\n22\nrun: async (payload, io, ctx) => {\n23\nconst { firstname, lastname, email } = payload;\n26\n\"Create HubSpot Contact\",\n28\n// Create a contact in HubSpot\n29\nawait hubspot.crm.contacts.basicApi.create({\n30\nproperties: { firstname, lastname, email },\n31\nassociations: [], // Optional\n35\n// Add metadata to improve how the task displays in the logs\n36\n{ name: \"Create HubSpot Contact\", icon: \"hubspot\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Client } from \"@hubspot/api-client\";\n\n5\n\n// SDK: https://github.com/hubspot/hubspot-api-nodejs\n\n6\n\n// API Reference: https://developers.hubspot.com/docs/api/overview\n\n7\n\n// Create an private app in HubSpot and get access token : https://developers.hubspot.com/docs/api/private-apps\n\n8\n\nconst hubspot \\= new Client({ accessToken: process.env.HUBSPOT\\_ACCESS\\_TOKEN });\n\n11\n\n  id: \"hubspot-create-contact\",\n\n12\n\n  name: \"HubSpot Create Contact\",\n\n14\n\n  trigger: eventTrigger({\n\n15\n\n    name: \"hubspot-create-contact\",\n\n17\n\n      firstname: z.string(),\n\n19\n\n      email: z.string().email(),\n\n22\n\n  run: async (payload, io, ctx) \\=> {\n\n23\n\n    const { firstname, lastname, email } \\= payload;\n\n26\n\n      \"Create HubSpot Contact\",\n\n28\n\n        // Create a contact in HubSpot\n\n29\n\n        await hubspot.crm.contacts.basicApi.create({\n\n30\n\n          properties: { firstname, lastname, email },\n\n31\n\n          associations: \\[\\], // Optional\n\n35\n\n      // Add metadata to improve how the task displays in the logs\n\n36\n\n      { name: \"Create HubSpot Contact\", icon: \"hubspot\" }"
},
{
  "url": "https://trigger.dev/apis/stripe/examples/stripe-sub-update-airtable",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/stripe/examples/stripe-sub-update-airtable",
    "loadedTime": "2024-03-16T13:47:38.516Z",
    "referrerUrl": "https://trigger.dev/apis/stripe",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/stripe/examples/stripe-sub-update-airtable",
    "title": "Stripe | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Stripe | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/stripe"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Stripe } from \"@trigger.dev/stripe\";\n3\nimport { Airtable } from \"@trigger.dev/airtable\";\n5\nconst stripe = new Stripe({\n7\napiKey: process.env.STRIPE_API_KEY!,\n10\nconst airtable = new Airtable({\n12\ntoken: process.env.AIRTABLE_TOKEN!,\n15\n//this is the type definition for the table\n16\ntype SubscribedUsers = {\n23\n// This job populates an Airtable table when a new customer subscription is created in Stripe\n25\nid: \"stripe-new-subscription-update-airtable\",\n26\nname: \"On new Stripe subscription update Airtable\",\n32\ntrigger: stripe.onCustomerSubscription(),\n33\nrun: async (payload, io, ctx) => {\n34\n// Adding the type to table<YourTableType>(\"<your table name>\")\n35\n// gives you nice type inference and errors.\n36\n// You can leave it out as well table(\"<your table name>\")\n37\nconst table = io.airtable\n38\n.base(\"<your base id>\")\n39\n.table<SubscribedUsers>(\"<your table name>\");\n42\nconst newRecords = await table.createRecords(\"create records\", [\n44\n// Check the Stripe documents for object info: https://stripe.com/docs/api/subscriptions/object\n47\ninterval: payload.items.data[0].price.recurring?.interval,\n48\ncurrency: payload.items.data[0].price.currency,\n49\n// The unit amount in pence to be charged, represented as a whole integer if possible.\n50\nunitAmount: payload.items.data[0].price.unit_amount ?? undefined,\n55\nawait io.logger.info(\"A new subscription was created.\");",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Stripe } from \"@trigger.dev/stripe\";\n\n3\n\nimport { Airtable } from \"@trigger.dev/airtable\";\n\n5\n\nconst stripe \\= new Stripe({\n\n7\n\n  apiKey: process.env.STRIPE\\_API\\_KEY!,\n\n10\n\nconst airtable \\= new Airtable({\n\n12\n\n  token: process.env.AIRTABLE\\_TOKEN!,\n\n15\n\n//this is the type definition for the table\n\n16\n\ntype SubscribedUsers \\= {\n\n23\n\n// This job populates an Airtable table when a new customer subscription is created in Stripe\n\n25\n\n  id: \"stripe-new-subscription-update-airtable\",\n\n26\n\n  name: \"On new Stripe subscription update Airtable\",\n\n32\n\n  trigger: stripe.onCustomerSubscription(),\n\n33\n\n  run: async (payload, io, ctx) \\=> {\n\n34\n\n    // Adding the type to table<YourTableType>(\"<your table name>\")\n\n35\n\n    // gives you nice type inference and errors.\n\n36\n\n    // You can leave it out as well table(\"<your table name>\")\n\n37\n\n    const table \\= io.airtable\n\n38\n\n      .base(\"<your base id>\")\n\n39\n\n      .table<SubscribedUsers\\>(\"<your table name>\");\n\n42\n\n    const newRecords \\= await table.createRecords(\"create records\", \\[\n\n44\n\n        // Check the Stripe documents for object info: https://stripe.com/docs/api/subscriptions/object\n\n47\n\n          interval: payload.items.data\\[0\\].price.recurring?.interval,\n\n48\n\n          currency: payload.items.data\\[0\\].price.currency,\n\n49\n\n          // The unit amount in pence to be charged, represented as a whole integer if possible.\n\n50\n\n          unitAmount: payload.items.data\\[0\\].price.unit\\_amount ?? undefined,\n\n55\n\n    await io.logger.info(\"A new subscription was created.\");"
},
{
  "url": "https://trigger.dev/apis/stripe/examples/update-airtable-when-stripe-account-updated",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/stripe/examples/update-airtable-when-stripe-account-updated",
    "loadedTime": "2024-03-16T13:47:52.654Z",
    "referrerUrl": "https://trigger.dev/apis/stripe",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/stripe/examples/update-airtable-when-stripe-account-updated",
    "title": "Stripe | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Stripe | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/stripe"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Stripe } from \"@trigger.dev/stripe\";\n3\nimport { Airtable } from \"@trigger.dev/airtable\";\n5\nconst stripe = new Stripe({\n7\napiKey: process.env.STRIPE_API_KEY!,\n10\nconst airtable = new Airtable({\n12\ntoken: process.env.AIRTABLE_TOKEN!,\n16\nstripe_customer_id?: string;\n21\npayment_intent_id: string;\n25\n\"stripe_customer_id (from Customers)\": string;\n29\nid: \"stripe-new-sale-update-airtable\",\n30\nname: \"On new Stripe sale update Airtable\",\n36\ntrigger: stripe.onPaymentIntentSucceeded(),\n37\nrun: async (payload, io, ctx) => {\n38\nconst customersTable = io.airtable\n39\n.base(\"<your base id>\")\n40\n.table<Customers>(\"<your table name>\");\n42\nconst salesTable = io.airtable\n43\n.base(\"<your base id>\")\n44\n.table<Sales>(\"<your table name>\");\n47\nid: payment_intent_id,\n48\ncustomer: stripe_customer_id,\n53\n// Use the filter formula to find a customer record with the given stripe_customer_id\n54\nconst records = await customersTable.getRecords(\n55\n\"Filter records by stripe_customer_id\",\n57\nfilterByFormula: `{stripe_customer_id} = \"${stripe_customer_id}\"`,\n58\nfields: [\"stripe_customer_id\"],\n63\nif (records && records.length > 0) {\n64\n// There is an existing customer\n65\ncustomerRecordId = records[0].id;\n67\nconst newCustomerRecord = await customersTable.createRecords(\n68\n\"create new customer record\",\n71\nfields: { stripe_customer_id: stripe_customer_id as string },\n75\ncustomerRecordId = newCustomerRecord[0].id;\n78\n// Add sale to the Sales table\n79\nconst newSaleRecord = await salesTable.createRecords(\n80\n\"create new sale record\",\n87\nCustomers: [customerRecordId], // Link to the customer record using its ID",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Stripe } from \"@trigger.dev/stripe\";\n\n3\n\nimport { Airtable } from \"@trigger.dev/airtable\";\n\n5\n\nconst stripe \\= new Stripe({\n\n7\n\n  apiKey: process.env.STRIPE\\_API\\_KEY!,\n\n10\n\nconst airtable \\= new Airtable({\n\n12\n\n  token: process.env.AIRTABLE\\_TOKEN!,\n\n16\n\n  stripe\\_customer\\_id?: string;\n\n21\n\n  payment\\_intent\\_id: string;\n\n25\n\n  \"stripe\\_customer\\_id (from Customers)\": string;\n\n29\n\n  id: \"stripe-new-sale-update-airtable\",\n\n30\n\n  name: \"On new Stripe sale update Airtable\",\n\n36\n\n  trigger: stripe.onPaymentIntentSucceeded(),\n\n37\n\n  run: async (payload, io, ctx) \\=> {\n\n38\n\n    const customersTable \\= io.airtable\n\n39\n\n      .base(\"<your base id>\")\n\n40\n\n      .table<Customers\\>(\"<your table name>\");\n\n42\n\n    const salesTable \\= io.airtable\n\n43\n\n      .base(\"<your base id>\")\n\n44\n\n      .table<Sales\\>(\"<your table name>\");\n\n47\n\n      id: payment\\_intent\\_id,\n\n48\n\n      customer: stripe\\_customer\\_id,\n\n53\n\n    // Use the filter formula to find a customer record with the given stripe\\_customer\\_id\n\n54\n\n    const records \\= await customersTable.getRecords(\n\n55\n\n      \"Filter records by stripe\\_customer\\_id\",\n\n57\n\n        filterByFormula: \\`{stripe\\_customer\\_id} = \"${stripe\\_customer\\_id}\"\\`,\n\n58\n\n        fields: \\[\"stripe\\_customer\\_id\"\\],\n\n63\n\n    if (records && records.length \\> 0) {\n\n64\n\n      // There is an existing customer\n\n65\n\n      customerRecordId \\= records\\[0\\].id;\n\n67\n\n      const newCustomerRecord \\= await customersTable.createRecords(\n\n68\n\n        \"create new customer record\",\n\n71\n\n            fields: { stripe\\_customer\\_id: stripe\\_customer\\_id as string },\n\n75\n\n      customerRecordId \\= newCustomerRecord\\[0\\].id;\n\n78\n\n    // Add sale to the Sales table\n\n79\n\n    const newSaleRecord \\= await salesTable.createRecords(\n\n80\n\n      \"create new sale record\",\n\n87\n\n            Customers: \\[customerRecordId\\], // Link to the customer record using its ID"
},
{
  "url": "https://trigger.dev/apis/stripe/examples/stripe-supabase-update",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/stripe/examples/stripe-supabase-update",
    "loadedTime": "2024-03-16T13:48:00.354Z",
    "referrerUrl": "https://trigger.dev/apis/stripe",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/stripe/examples/stripe-supabase-update",
    "title": "Stripe | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Stripe | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/stripe"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { SupabaseManagement, Supabase } from \"@trigger.dev/supabase\";\n2\nimport { Stripe } from \"@trigger.dev/stripe\";\n3\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n5\nexport const stripe = new Stripe({\n7\napiKey: process.env.STRIPE_API_KEY!,\n10\nconst supabase = new Supabase({\n12\nsupabaseUrl: process.env.SUPABASE_PUBLIC_URL!,\n13\nsupabaseKey: process.env.SUPABASE_SERVICE_ROLE_KEY!,\n16\n// Use OAuth to authenticate with Supabase Management API\n17\nconst supabaseManagement = new SupabaseManagement({\n18\nid: \"supabase-management\",\n21\n// Update a Supabase table when a Stripe account is updated\n23\nid: \"supabase-stripe-update-database\",\n24\nname: \"Supabase: update database when Stripe account is updated\",\n30\ntrigger: stripe.onAccountUpdated({ connect: true }),\n31\nrun: async (payload, io, ctx) => {\n32\nconst stripeAccountId = payload.id;\n33\nconst { payouts_enabled, charges_enabled, details_submitted } = payload;\n35\nconst updatedAt = new Date().toISOString();\n37\nawait io.supabase.runTask(\"update-stripe-account\", async (database) => {\n38\nconst { data, error } = await database\n44\nupdated_at: updatedAt,\n46\n.eq(\"stripe_account_id\", stripeAccountId);\n48\nif (error) throw error;",
  "markdown": "1\n\nimport { SupabaseManagement, Supabase } from \"@trigger.dev/supabase\";\n\n2\n\nimport { Stripe } from \"@trigger.dev/stripe\";\n\n3\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n5\n\nexport const stripe \\= new Stripe({\n\n7\n\n  apiKey: process.env.STRIPE\\_API\\_KEY!,\n\n10\n\nconst supabase \\= new Supabase({\n\n12\n\n  supabaseUrl: process.env.SUPABASE\\_PUBLIC\\_URL!,\n\n13\n\n  supabaseKey: process.env.SUPABASE\\_SERVICE\\_ROLE\\_KEY!,\n\n16\n\n// Use OAuth to authenticate with Supabase Management API\n\n17\n\nconst supabaseManagement \\= new SupabaseManagement({\n\n18\n\n  id: \"supabase-management\",\n\n21\n\n// Update a Supabase table when a Stripe account is updated\n\n23\n\n  id: \"supabase-stripe-update-database\",\n\n24\n\n  name: \"Supabase: update database when Stripe account is updated\",\n\n30\n\n  trigger: stripe.onAccountUpdated({ connect: true }),\n\n31\n\n  run: async (payload, io, ctx) \\=> {\n\n32\n\n    const stripeAccountId \\= payload.id;\n\n33\n\n    const { payouts\\_enabled, charges\\_enabled, details\\_submitted } \\= payload;\n\n35\n\n    const updatedAt \\= new Date().toISOString();\n\n37\n\n    await io.supabase.runTask(\"update-stripe-account\", async (database) \\=> {\n\n38\n\n      const { data, error } \\= await database\n\n44\n\n          updated\\_at: updatedAt,\n\n46\n\n        .eq(\"stripe\\_account\\_id\", stripeAccountId);\n\n48\n\n      if (error) throw error;"
},
{
  "url": "https://trigger.dev/apis/huggingface/examples/hugging-face-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/huggingface/examples/hugging-face-http-endpoint",
    "loadedTime": "2024-03-16T13:48:02.244Z",
    "referrerUrl": "https://trigger.dev/apis/huggingface",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/huggingface/examples/hugging-face-http-endpoint",
    "title": "Hugging Face | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Hugging Face | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/huggingface"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { createHash } from \"crypto\";\n4\n// Go to Hugging Face Dashboard > Click on Profile > Settings\n5\n// Go to Webhooks > Add a new webhook\n6\n// Select yourself as the target\n8\n// Add the secret as \"Test\" (for example)\n9\n// Create a model from the dashboard to trigger the webhook\n10\nconst huggingFace = client.defineHttpEndpoint({\n12\nsource: \"huggingface.co\",\n14\nverify: async (request) => {\n16\nrequest.headers.get(\"x-webhook-secret\") ===\n17\nprocess.env.HUGGING_FACE_WEBHOOK_SECRET\n19\nreturn { success: true };\n20\nreturn { success: false, reason: \"Webhook Secret Match Failed\" };\n25\nid: \"http-hugging-face\",\n26\nname: \"HTTP Hugging Face\",\n29\ntrigger: huggingFace.onRequest(),\n30\nrun: async (request, io, ctx) => {\n31\nconst body = await request.json();\n32\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { createHash } from \"crypto\";\n\n4\n\n// Go to Hugging Face Dashboard > Click on Profile > Settings\n\n5\n\n// Go to Webhooks > Add a new webhook\n\n6\n\n// Select yourself as the target\n\n8\n\n// Add the secret as \"Test\" (for example)\n\n9\n\n// Create a model from the dashboard to trigger the webhook\n\n10\n\nconst huggingFace \\= client.defineHttpEndpoint({\n\n12\n\n  source: \"huggingface.co\",\n\n14\n\n  verify: async (request) \\=> {\n\n16\n\n      request.headers.get(\"x-webhook-secret\") \\===\n\n17\n\n      process.env.HUGGING\\_FACE\\_WEBHOOK\\_SECRET\n\n19\n\n      return { success: true };\n\n20\n\n    return { success: false, reason: \"Webhook Secret Match Failed\" };\n\n25\n\n  id: \"http-hugging-face\",\n\n26\n\n  name: \"HTTP Hugging Face\",\n\n29\n\n  trigger: huggingFace.onRequest(),\n\n30\n\n  run: async (request, io, ctx) \\=> {\n\n31\n\n    const body \\= await request.json();\n\n32\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/huggingface/examples/text-classification-with-hugging-face",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/huggingface/examples/text-classification-with-hugging-face",
    "loadedTime": "2024-03-16T13:48:10.926Z",
    "referrerUrl": "https://trigger.dev/apis/huggingface",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/huggingface/examples/text-classification-with-hugging-face",
    "title": "Hugging Face | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Hugging Face | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/huggingface"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { HfInference } from \"@huggingface/inference\";\n2\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n5\n// Create a new Hugging Face inference client\n6\n// Get start with Hugging Face https://huggingface.co/docs/api-inference/quicktour\n7\n// SDK: https://www.npmjs.com/package/@huggingface/inference\n8\nconst hf = new HfInference(process.env.HUGGING_FACE_API_KEY);\n11\nid: \"hugging-face-inference\",\n12\nname: \"Hugging Face inference\",\n14\ntrigger: eventTrigger({\n15\nname: \"hugging-face-inference\",\n17\n// Hugging Face model name or ID.\n18\n// Example: \"distilbert-base-uncased-finetuned-sst-2-english\"\n19\n// More models: https://huggingface.co/models?pipeline_tag=text-classification\n21\n// Text to input to the model.\n22\n// Example: \"Such nice weather outside!\"\n26\nrun: async (payload, io, ctx) => {\n27\n// Use io.runTask to make the SDK call resumable and log-friendly\n29\n\"Hugging Face inference\",\n31\n// Call the Hugging Face API\n32\nreturn await hf.textClassification(payload);\n35\n// Add metadata to improve how the task displays in the logs\n36\n{ name: \"Hugging Face inference\", icon: \"hugging-face\" }",
  "markdown": "1\n\nimport { HfInference } from \"@huggingface/inference\";\n\n2\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n5\n\n// Create a new Hugging Face inference client\n\n6\n\n// Get start with Hugging Face https://huggingface.co/docs/api-inference/quicktour\n\n7\n\n// SDK: https://www.npmjs.com/package/@huggingface/inference\n\n8\n\nconst hf \\= new HfInference(process.env.HUGGING\\_FACE\\_API\\_KEY);\n\n11\n\n  id: \"hugging-face-inference\",\n\n12\n\n  name: \"Hugging Face inference\",\n\n14\n\n  trigger: eventTrigger({\n\n15\n\n    name: \"hugging-face-inference\",\n\n17\n\n      // Hugging Face model name or ID.\n\n18\n\n      // Example: \"distilbert-base-uncased-finetuned-sst-2-english\"\n\n19\n\n      // More models: https://huggingface.co/models?pipeline\\_tag=text-classification\n\n21\n\n      // Text to input to the model.\n\n22\n\n      // Example: \"Such nice weather outside!\"\n\n26\n\n  run: async (payload, io, ctx) \\=> {\n\n27\n\n    // Use io.runTask to make the SDK call resumable and log-friendly\n\n29\n\n      \"Hugging Face inference\",\n\n31\n\n        // Call the Hugging Face API\n\n32\n\n        return await hf.textClassification(payload);\n\n35\n\n      // Add metadata to improve how the task displays in the logs\n\n36\n\n      { name: \"Hugging Face inference\", icon: \"hugging-face\" }"
},
{
  "url": "https://trigger.dev/apis/supabase/examples/stripe-supabase-update",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/supabase/examples/stripe-supabase-update",
    "loadedTime": "2024-03-16T13:48:11.731Z",
    "referrerUrl": "https://trigger.dev/apis/supabase",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/supabase/examples/stripe-supabase-update",
    "title": "Supabase | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Supabase | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/supabase"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { SupabaseManagement, Supabase } from \"@trigger.dev/supabase\";\n2\nimport { Stripe } from \"@trigger.dev/stripe\";\n3\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n5\nexport const stripe = new Stripe({\n7\napiKey: process.env.STRIPE_API_KEY!,\n10\nconst supabase = new Supabase({\n12\nsupabaseUrl: process.env.SUPABASE_PUBLIC_URL!,\n13\nsupabaseKey: process.env.SUPABASE_SERVICE_ROLE_KEY!,\n16\n// Use OAuth to authenticate with Supabase Management API\n17\nconst supabaseManagement = new SupabaseManagement({\n18\nid: \"supabase-management\",\n21\n// Update a Supabase table when a Stripe account is updated\n23\nid: \"supabase-stripe-update-database\",\n24\nname: \"Supabase: update database when Stripe account is updated\",\n30\ntrigger: stripe.onAccountUpdated({ connect: true }),\n31\nrun: async (payload, io, ctx) => {\n32\nconst stripeAccountId = payload.id;\n33\nconst { payouts_enabled, charges_enabled, details_submitted } = payload;\n35\nconst updatedAt = new Date().toISOString();\n37\nawait io.supabase.runTask(\"update-stripe-account\", async (database) => {\n38\nconst { data, error } = await database\n44\nupdated_at: updatedAt,\n46\n.eq(\"stripe_account_id\", stripeAccountId);\n48\nif (error) throw error;",
  "markdown": "1\n\nimport { SupabaseManagement, Supabase } from \"@trigger.dev/supabase\";\n\n2\n\nimport { Stripe } from \"@trigger.dev/stripe\";\n\n3\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n5\n\nexport const stripe \\= new Stripe({\n\n7\n\n  apiKey: process.env.STRIPE\\_API\\_KEY!,\n\n10\n\nconst supabase \\= new Supabase({\n\n12\n\n  supabaseUrl: process.env.SUPABASE\\_PUBLIC\\_URL!,\n\n13\n\n  supabaseKey: process.env.SUPABASE\\_SERVICE\\_ROLE\\_KEY!,\n\n16\n\n// Use OAuth to authenticate with Supabase Management API\n\n17\n\nconst supabaseManagement \\= new SupabaseManagement({\n\n18\n\n  id: \"supabase-management\",\n\n21\n\n// Update a Supabase table when a Stripe account is updated\n\n23\n\n  id: \"supabase-stripe-update-database\",\n\n24\n\n  name: \"Supabase: update database when Stripe account is updated\",\n\n30\n\n  trigger: stripe.onAccountUpdated({ connect: true }),\n\n31\n\n  run: async (payload, io, ctx) \\=> {\n\n32\n\n    const stripeAccountId \\= payload.id;\n\n33\n\n    const { payouts\\_enabled, charges\\_enabled, details\\_submitted } \\= payload;\n\n35\n\n    const updatedAt \\= new Date().toISOString();\n\n37\n\n    await io.supabase.runTask(\"update-stripe-account\", async (database) \\=> {\n\n38\n\n      const { data, error } \\= await database\n\n44\n\n          updated\\_at: updatedAt,\n\n46\n\n        .eq(\"stripe\\_account\\_id\", stripeAccountId);\n\n48\n\n      if (error) throw error;"
},
{
  "url": "https://trigger.dev/apis/supabase/examples/welcome-email-campaign",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/supabase/examples/welcome-email-campaign",
    "loadedTime": "2024-03-16T13:48:14.423Z",
    "referrerUrl": "https://trigger.dev/apis/supabase",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/supabase/examples/welcome-email-campaign",
    "title": "Supabase | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Supabase | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/supabase"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { SupabaseManagement } from \"@trigger.dev/supabase\";\n2\nimport { Database } from \"./mocks/supabase-types\";\n3\nimport { Resend } from \"@trigger.dev/resend\";\n4\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n6\n// Use OAuth to authenticate with Supabase Management API\n7\nconst supabaseManagement = new SupabaseManagement({\n8\nid: \"supabase-management\",\n11\nconst db = supabaseManagement.db<Database>(\n12\n// process.env.NEXT_PUBLIC_SUPABASE_URL! // Use if using standard Supabase domain\n13\nprocess.env.SUPABASE_REFERENCE_ID! // Use if using a Supabase custom domain\n16\nconst resend = new Resend({\n18\napiKey: process.env.RESEND_API_KEY!,\n21\n// This job triggers when a Supabase user confirms their email address\n23\nid: \"welcome-email-campaign\",\n24\nname: \"Welcome Email Campaign\",\n26\ntrigger: db.onUpdated({\n27\n// This job triggers when there is an update in the 'users' table of the 'auth' schema.\n28\n// Specifically, it watches for a change in the 'email_confirmed_at' field from null (unconfirmed email)\n29\n// to a timestamp (confirmed email).\n34\nemail_confirmed_at: [{ $isNull: true }],\n37\nemail_confirmed_at: [{ $isNull: false }],\n44\nrun: async (payload, io, ctx) => {\n45\nif (!payload.record.email) {\n50\nctx.run.isTest || ctx.environment.type === \"DEVELOPMENT\";\n52\n// Only wait for 10 seconds when running as a test or in the development environment\n53\nawait io.wait(\"wait-1\", isTestOrDev ? 10 : 60 * 60); // 1 hour\n55\nconst email1 = await io.resend.sendEmail(\"email-1\", {\n56\nto: payload.record.email,\n57\nsubject: `Thanks for joining Acme Inc`,\n58\ntext: `Hi there, welcome to our community! This is the first email we send you to help you get started.`,\n59\nfrom: process.env.RESEND_FROM_EMAIL!,\n62\nawait io.wait(\"wait-2\", isTestOrDev ? 10 : 60 * 60 * 12); // 12 hours\n64\nconst email2 = await io.resend.sendEmail(\"email-2\", {\n65\nto: payload.record.email,\n66\nsubject: `Here are some tips to get started`,\n67\ntext: `Hi there, welcome to our community! This is the second email we send you to help you get started.`,\n68\nfrom: process.env.RESEND_FROM_EMAIL!,\n71\nawait io.wait(\"wait-3\", isTestOrDev ? 10 : 60 * 60 * 24); // 24 hours\n73\nconst email3 = await io.resend.sendEmail(\"email-3\", {\n74\nto: payload.record.email,\n75\nsubject: \"Do you have any questions?\",\n76\ntext: `Hi there, welcome to our community! This is the third email we send you to help you get started.`,\n77\nfrom: process.env.RESEND_FROM_EMAIL!,",
  "markdown": "1\n\nimport { SupabaseManagement } from \"@trigger.dev/supabase\";\n\n2\n\nimport { Database } from \"./mocks/supabase-types\";\n\n3\n\nimport { Resend } from \"@trigger.dev/resend\";\n\n4\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n6\n\n// Use OAuth to authenticate with Supabase Management API\n\n7\n\nconst supabaseManagement \\= new SupabaseManagement({\n\n8\n\n  id: \"supabase-management\",\n\n11\n\nconst db \\= supabaseManagement.db<Database\\>(\n\n12\n\n  // process.env.NEXT\\_PUBLIC\\_SUPABASE\\_URL! // Use if using standard Supabase domain\n\n13\n\n  process.env.SUPABASE\\_REFERENCE\\_ID! // Use if using a Supabase custom domain\n\n16\n\nconst resend \\= new Resend({\n\n18\n\n  apiKey: process.env.RESEND\\_API\\_KEY!,\n\n21\n\n// This job triggers when a Supabase user confirms their email address\n\n23\n\n  id: \"welcome-email-campaign\",\n\n24\n\n  name: \"Welcome Email Campaign\",\n\n26\n\n  trigger: db.onUpdated({\n\n27\n\n    // This job triggers when there is an update in the 'users' table of the 'auth' schema.\n\n28\n\n    // Specifically, it watches for a change in the 'email\\_confirmed\\_at' field from null (unconfirmed email)\n\n29\n\n    // to a timestamp (confirmed email).\n\n34\n\n        email\\_confirmed\\_at: \\[{ $isNull: true }\\],\n\n37\n\n        email\\_confirmed\\_at: \\[{ $isNull: false }\\],\n\n44\n\n  run: async (payload, io, ctx) \\=> {\n\n45\n\n    if (!payload.record.email) {\n\n50\n\n      ctx.run.isTest || ctx.environment.type \\=== \"DEVELOPMENT\";\n\n52\n\n    // Only wait for 10 seconds when running as a test or in the development environment\n\n53\n\n    await io.wait(\"wait-1\", isTestOrDev ? 10 : 60 \\* 60); // 1 hour\n\n55\n\n    const email1 \\= await io.resend.sendEmail(\"email-1\", {\n\n56\n\n      to: payload.record.email,\n\n57\n\n      subject: \\`Thanks for joining Acme Inc\\`,\n\n58\n\n      text: \\`Hi there, welcome to our community! This is the first email we send you to help you get started.\\`,\n\n59\n\n      from: process.env.RESEND\\_FROM\\_EMAIL!,\n\n62\n\n    await io.wait(\"wait-2\", isTestOrDev ? 10 : 60 \\* 60 \\* 12); // 12 hours\n\n64\n\n    const email2 \\= await io.resend.sendEmail(\"email-2\", {\n\n65\n\n      to: payload.record.email,\n\n66\n\n      subject: \\`Here are some tips to get started\\`,\n\n67\n\n      text: \\`Hi there, welcome to our community! This is the second email we send you to help you get started.\\`,\n\n68\n\n      from: process.env.RESEND\\_FROM\\_EMAIL!,\n\n71\n\n    await io.wait(\"wait-3\", isTestOrDev ? 10 : 60 \\* 60 \\* 24); // 24 hours\n\n73\n\n    const email3 \\= await io.resend.sendEmail(\"email-3\", {\n\n74\n\n      to: payload.record.email,\n\n75\n\n      subject: \"Do you have any questions?\",\n\n76\n\n      text: \\`Hi there, welcome to our community! This is the third email we send you to help you get started.\\`,\n\n77\n\n      from: process.env.RESEND\\_FROM\\_EMAIL!,"
},
{
  "url": "https://trigger.dev/apis/supabase/examples/openai-generate-blog-post",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/supabase/examples/openai-generate-blog-post",
    "loadedTime": "2024-03-16T13:48:21.862Z",
    "referrerUrl": "https://trigger.dev/apis/supabase",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/supabase/examples/openai-generate-blog-post",
    "title": "Supabase | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Supabase | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/supabase"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { SupabaseManagement, Supabase } from \"@trigger.dev/supabase\";\n2\nimport { OpenAI } from \"@trigger.dev/openai\";\n3\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n5\nconst supabaseManagement = new SupabaseManagement({\n6\nid: \"supabase-management\",\n9\nconst openai = new OpenAI({\n11\napiKey: process.env.OPENAI_API_KEY!,\n14\n// Use Supabase integration to run authenticated tasks using the service_role key\n15\nconst supabase = new Supabase({\n17\nsupabaseKey: process.env.SUPABASE_SERVICE_ROLE_KEY!,\n18\nsupabaseUrl: \"https://<project id>.supabase.co\",\n21\n// Pass the generated types to the db instance\n22\nconst db = supabase.db<Database>(\"https://<project id>.supabase.co\");\n25\nid: \"auto-generate-blog-title\",\n26\nname: \"Auto generate blog title\",\n28\n// Subscribe to new blog posts being created\n29\ntrigger: db.onInserted({\n32\n// Define the integrations that this Job will use\n37\nrun: async (payload, io, ctx) => {\n38\nconst result = await io.openai.backgroundCreateChatCompletion(\n41\nmodel: \"gpt-3.5-turbo\",\n45\ncontent: `Suggest some great titles for this blog post: \\n ${payload.record.content}`,\n51\nconst blogTitle = result.choices[0].message.content;\n54\n// Set the title for the blog post\n55\nconst { data, error } = await io.supabase.runTask(\n60\n.update({ title: blogTitle })\n61\n.eq(\"id\", payload.record.id)",
  "markdown": "1\n\nimport { SupabaseManagement, Supabase } from \"@trigger.dev/supabase\";\n\n2\n\nimport { OpenAI } from \"@trigger.dev/openai\";\n\n3\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n5\n\nconst supabaseManagement \\= new SupabaseManagement({\n\n6\n\n  id: \"supabase-management\",\n\n9\n\nconst openai \\= new OpenAI({\n\n11\n\n  apiKey: process.env.OPENAI\\_API\\_KEY!,\n\n14\n\n// Use Supabase integration to run authenticated tasks using the service\\_role key\n\n15\n\nconst supabase \\= new Supabase({\n\n17\n\n  supabaseKey: process.env.SUPABASE\\_SERVICE\\_ROLE\\_KEY!,\n\n18\n\n  supabaseUrl: \"https://<project id>.supabase.co\",\n\n21\n\n// Pass the generated types to the db instance\n\n22\n\nconst db \\= supabase.db<Database\\>(\"https://<project id>.supabase.co\");\n\n25\n\n  id: \"auto-generate-blog-title\",\n\n26\n\n  name: \"Auto generate blog title\",\n\n28\n\n  // Subscribe to new blog posts being created\n\n29\n\n  trigger: db.onInserted({\n\n32\n\n  // Define the integrations that this Job will use\n\n37\n\n  run: async (payload, io, ctx) \\=> {\n\n38\n\n    const result \\= await io.openai.backgroundCreateChatCompletion(\n\n41\n\n        model: \"gpt-3.5-turbo\",\n\n45\n\n            content: \\`Suggest some great titles for this blog post: \\\\n ${payload.record.content}\\`,\n\n51\n\n    const blogTitle \\= result.choices\\[0\\].message.content;\n\n54\n\n      // Set the title for the blog post\n\n55\n\n      const { data, error } \\= await io.supabase.runTask(\n\n60\n\n            .update({ title: blogTitle })\n\n61\n\n            .eq(\"id\", payload.record.id)"
},
{
  "url": "https://trigger.dev/apis/supabase/examples/storage-to-ai",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/supabase/examples/storage-to-ai",
    "loadedTime": "2024-03-16T13:48:28.927Z",
    "referrerUrl": "https://trigger.dev/apis/supabase",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/supabase/examples/storage-to-ai",
    "title": "Supabase | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Supabase | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/supabase"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { SupabaseManagement, Supabase } from \"@trigger.dev/supabase\";\n2\nimport { OpenAI } from \"@trigger.dev/openai\";\n3\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n5\nconst openai = new OpenAI({\n7\napiKey: process.env.OPENAI_API_KEY!,\n10\n// Use Supabase integration to run authenticated tasks using the service_role key\n11\nconst supabase = new Supabase({\n13\nsupabaseKey: process.env.SUPABASE_SERVICE_ROLE_KEY!,\n14\nsupabaseUrl: \"https://<project id>.supabase.co\",\n17\nconst supabaseManagement = new SupabaseManagement({\n18\nid: \"supabase-management\",\n21\n// Pass the generated types to the db instance\n22\nconst db = supabase.db<Database>(\"https://<project id>.supabase.co\");\n25\nid: \"ai-all-the-things\",\n26\nname: \"AI all the images\",\n28\n// Subscribe to objects being inserted\n29\ntrigger: db.onInserted({\n34\nbucket_id: [\"uploads\"],\n43\n// Define the integrations that this Job will use\n48\nrun: async (payload, io, ctx) => {\n49\n// Assuming the bucket is private, we create a signed url for temporary access\n50\n// Use the native supabase client to get a signed url\n51\nconst { error, data } = await io.supabase.client.storage\n52\n.from(\"example_bucket\")\n53\n.createSignedUrl(payload.record.name, 60);\n59\nconst imageVariation = await io.openai.createImageVariation(\n62\nimage: data.signedUrl,\n64\nresponse_format: \"url\",\n69\n// do something with the imageVariation response",
  "markdown": "1\n\nimport { SupabaseManagement, Supabase } from \"@trigger.dev/supabase\";\n\n2\n\nimport { OpenAI } from \"@trigger.dev/openai\";\n\n3\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n5\n\nconst openai \\= new OpenAI({\n\n7\n\n  apiKey: process.env.OPENAI\\_API\\_KEY!,\n\n10\n\n// Use Supabase integration to run authenticated tasks using the service\\_role key\n\n11\n\nconst supabase \\= new Supabase({\n\n13\n\n  supabaseKey: process.env.SUPABASE\\_SERVICE\\_ROLE\\_KEY!,\n\n14\n\n  supabaseUrl: \"https://<project id>.supabase.co\",\n\n17\n\nconst supabaseManagement \\= new SupabaseManagement({\n\n18\n\n  id: \"supabase-management\",\n\n21\n\n// Pass the generated types to the db instance\n\n22\n\nconst db \\= supabase.db<Database\\>(\"https://<project id>.supabase.co\");\n\n25\n\n  id: \"ai-all-the-things\",\n\n26\n\n  name: \"AI all the images\",\n\n28\n\n  // Subscribe to objects being inserted\n\n29\n\n  trigger: db.onInserted({\n\n34\n\n        bucket\\_id: \\[\"uploads\"\\],\n\n43\n\n  // Define the integrations that this Job will use\n\n48\n\n  run: async (payload, io, ctx) \\=> {\n\n49\n\n    // Assuming the bucket is private, we create a signed url for temporary access\n\n50\n\n    // Use the native supabase client to get a signed url\n\n51\n\n    const { error, data } \\= await io.supabase.client.storage\n\n52\n\n      .from(\"example\\_bucket\")\n\n53\n\n      .createSignedUrl(payload.record.name, 60);\n\n59\n\n    const imageVariation \\= await io.openai.createImageVariation(\n\n62\n\n        image: data.signedUrl,\n\n64\n\n        response\\_format: \"url\",\n\n69\n\n    // do something with the imageVariation response"
},
{
  "url": "https://trigger.dev/apis/instagram/examples/post-image-to-instagram",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/instagram/examples/post-image-to-instagram",
    "loadedTime": "2024-03-16T13:48:36.253Z",
    "referrerUrl": "https://trigger.dev/apis/instagram",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/instagram/examples/post-image-to-instagram",
    "title": "Instagram | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Instagram | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/instagram"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n4\n// You need a professional Instagram account that is connected with your facebook business account\n5\n// Get started from here: https://developers.facebook.com/docs/instagram-api/getting-started\n6\n// For permanent token you have to create system user: https://business.facebook.com/settings/system-users\n7\n// You can find your instagram user id from here: https://business.facebook.com/settings/instagram-account-v2s\n9\nuserId: process.env.INSTAGRAM_USER_ID!,\n10\naccessToken: process.env.FACEBOOK_ACCESS_TOKEN!,\n12\nconst endpointURLCreate = `https://graph.facebook.com/v18.0/${token.userId}/media`;\n13\nconst endpointURLPublish = `https://graph.facebook.com/v18.0/${token.userId}/media_publish`;\n17\nname: \"Post on Instagram\",\n19\ntrigger: eventTrigger({\n20\nname: \"post-instagram\",\n22\ncaption: z.string().max(2200), // instagram captions are limited to 2200 characters\n26\nrun: async (payload, io, ctx) => {\n27\n// wrap the SDK call in io.runTask for resumability and log display\n31\n// Publishing a single media post is a two step process,\n32\n// Step 1: Create container\n33\nconst createContainerUrl = `${endpointURLCreate}?image_url=${\n35\n}&caption=${encodeURIComponent(payload.caption)}&access_token=${\n39\nconst containerResponse = await fetch(createContainerUrl, {\n41\n}).then((response) => response.json());\n43\n// Extract container ID\n44\nconst containerId = containerResponse.id;\n46\n// Step 2: Publish container\n47\nconst publishContainerUrl = `${endpointURLPublish}?creation_id=${containerId}&access_token=${token.accessToken}`;\n49\nconst publishResponse = await fetch(publishContainerUrl, {\n51\n}).then((response) => response.json());\n53\nreturn publishResponse;\n56\n// Add metadata to the task to improve the display in the logs\n57\n{ name: \"Post to Instagram\", icon: \"instagram\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n4\n\n// You need a professional Instagram account that is connected with your facebook business account\n\n5\n\n// Get started from here: https://developers.facebook.com/docs/instagram-api/getting-started\n\n6\n\n// For permanent token you have to create system user: https://business.facebook.com/settings/system-users\n\n7\n\n// You can find your instagram user id from here: https://business.facebook.com/settings/instagram-account-v2s\n\n9\n\n  userId: process.env.INSTAGRAM\\_USER\\_ID!,\n\n10\n\n  accessToken: process.env.FACEBOOK\\_ACCESS\\_TOKEN!,\n\n12\n\nconst endpointURLCreate \\= \\`https://graph.facebook.com/v18.0/${token.userId}/media\\`;\n\n13\n\nconst endpointURLPublish \\= \\`https://graph.facebook.com/v18.0/${token.userId}/media\\_publish\\`;\n\n17\n\n  name: \"Post on Instagram\",\n\n19\n\n  trigger: eventTrigger({\n\n20\n\n    name: \"post-instagram\",\n\n22\n\n      caption: z.string().max(2200), // instagram captions are limited to 2200 characters\n\n26\n\n  run: async (payload, io, ctx) \\=> {\n\n27\n\n    // wrap the SDK call in io.runTask for resumability and log display\n\n31\n\n        // Publishing a single media post is a two step process,\n\n32\n\n        // Step 1: Create container\n\n33\n\n        const createContainerUrl \\= \\`${endpointURLCreate}?image\\_url=${\n\n35\n\n        }&caption=${encodeURIComponent(payload.caption)}&access\\_token=${\n\n39\n\n        const containerResponse \\= await fetch(createContainerUrl, {\n\n41\n\n        }).then((response) \\=> response.json());\n\n43\n\n        // Extract container ID\n\n44\n\n        const containerId \\= containerResponse.id;\n\n46\n\n        // Step 2: Publish container\n\n47\n\n        const publishContainerUrl \\= \\`${endpointURLPublish}?creation\\_id=${containerId}&access\\_token=${token.accessToken}\\`;\n\n49\n\n        const publishResponse \\= await fetch(publishContainerUrl, {\n\n51\n\n        }).then((response) \\=> response.json());\n\n53\n\n        return publishResponse;\n\n56\n\n      // Add metadata to the task to improve the display in the logs\n\n57\n\n      { name: \"Post to Instagram\", icon: \"instagram\" }"
},
{
  "url": "https://trigger.dev/apis/instagram/examples/instagram-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/instagram/examples/instagram-http-endpoint",
    "loadedTime": "2024-03-16T13:48:43.335Z",
    "referrerUrl": "https://trigger.dev/apis/instagram",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/instagram/examples/instagram-http-endpoint",
    "title": "Instagram | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Instagram | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/instagram"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, verifyRequestSignature } from \"@trigger.dev/sdk\";\n3\n// Create an HTTP endpoint to listen to Instagram webhooks\n4\n// (This will create the endpoint URL on the `trigger.dev` dashboard)\n5\n// Create a Meta developer account (if you don't have one).\n6\n// Create an app on the Meta developer platform.\n7\n// Copy the `App Secret` from Dashboard > App Settings > Basic.\n8\n// Go to Dashboard > Webhooks and setup the subscriptions.\n9\n// Provide the Webhook URL and Verification Token (random string).\n10\n// Set the `INSTAGRAM_WEBHOOK_SIGNING_SECRET` (App Secret) and `INSTAGRAM_VERIFICATION_TOKEN` (Verification Token) in the .env file.\n11\nconst instagram = client.defineHttpEndpoint({\n13\nsource: \"instagram.com\",\n15\n// This is only needed for certain APIs like Instagram which don't set up the webhook until you pass the test\n17\n// Don't trigger runs if they match this filter\n18\nskipTriggeringRuns: true,\n22\n\"hub.mode\": [{ $ignoreCaseEquals: \"subscribe\" }],\n25\n// Handler for the webhook setup test\n26\nhandler: async (request, verify) => {\n27\nconst searchParams = new URL(request.url).searchParams;\n29\nsearchParams.get(\"hub.verify_token\") !==\n30\nprocess.env.INSTAGRAM_VERIFICATION_TOKEN\n32\nreturn new Response(\"Unauthorized\", { status: 401 });\n34\nreturn new Response(searchParams.get(\"hub.challenge\") ?? \"OK\", {\n39\nverify: async (request) => {\n40\nreturn await verifyRequestSignature({\n42\nheaderName: \"x-hub-signature-256\",\n43\nsecret: process.env.INSTAGRAM_WEBHOOK_SIGNING_SECRET!,\n51\nname: \"HTTP Instagram\",\n54\ntrigger: instagram.onRequest(),\n55\nrun: async (request, io, ctx) => {\n56\nconst body = await request.json();\n57\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient, verifyRequestSignature } from \"@trigger.dev/sdk\";\n\n3\n\n// Create an HTTP endpoint to listen to Instagram webhooks\n\n4\n\n// (This will create the endpoint URL on the \\`trigger.dev\\` dashboard)\n\n5\n\n// Create a Meta developer account (if you don't have one).\n\n6\n\n// Create an app on the Meta developer platform.\n\n7\n\n// Copy the \\`App Secret\\` from Dashboard > App Settings > Basic.\n\n8\n\n// Go to Dashboard > Webhooks and setup the subscriptions.\n\n9\n\n// Provide the Webhook URL and Verification Token (random string).\n\n10\n\n// Set the \\`INSTAGRAM\\_WEBHOOK\\_SIGNING\\_SECRET\\` (App Secret) and \\`INSTAGRAM\\_VERIFICATION\\_TOKEN\\` (Verification Token) in the .env file.\n\n11\n\nconst instagram \\= client.defineHttpEndpoint({\n\n13\n\n  source: \"instagram.com\",\n\n15\n\n  // This is only needed for certain APIs like Instagram which don't set up the webhook until you pass the test\n\n17\n\n    // Don't trigger runs if they match this filter\n\n18\n\n    skipTriggeringRuns: true,\n\n22\n\n        \"hub.mode\": \\[{ $ignoreCaseEquals: \"subscribe\" }\\],\n\n25\n\n    // Handler for the webhook setup test\n\n26\n\n    handler: async (request, verify) \\=> {\n\n27\n\n      const searchParams \\= new URL(request.url).searchParams;\n\n29\n\n        searchParams.get(\"hub.verify\\_token\") !==\n\n30\n\n        process.env.INSTAGRAM\\_VERIFICATION\\_TOKEN\n\n32\n\n        return new Response(\"Unauthorized\", { status: 401 });\n\n34\n\n      return new Response(searchParams.get(\"hub.challenge\") ?? \"OK\", {\n\n39\n\n  verify: async (request) \\=> {\n\n40\n\n    return await verifyRequestSignature({\n\n42\n\n      headerName: \"x-hub-signature-256\",\n\n43\n\n      secret: process.env.INSTAGRAM\\_WEBHOOK\\_SIGNING\\_SECRET!,\n\n51\n\n  name: \"HTTP Instagram\",\n\n54\n\n  trigger: instagram.onRequest(),\n\n55\n\n  run: async (request, io, ctx) \\=> {\n\n56\n\n    const body \\= await request.json();\n\n57\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/svix/examples/svix-create-application",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/svix/examples/svix-create-application",
    "loadedTime": "2024-03-16T13:48:51.720Z",
    "referrerUrl": "https://trigger.dev/apis/svix",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/svix/examples/svix-create-application",
    "title": "Svix | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Svix | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/svix"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "2\nimport { Svix } from \"svix\";\n3\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n5\n// Create an access token at https://api.svix.com/docs#section/Introduction/Authentication\n6\n// https://dashboard.svix.com/api-access\n7\nconst svix = new Svix(process.env.SVIX_API_KEY!);\n9\n// Using official Svix sdk, https://github.com/svix/svix-webhooks/tree/main/javascript/\n11\nid: \"create-svix-application\",\n12\nname: \"Create Svix application\",\n14\ntrigger: eventTrigger({\n15\nname: \"create-svix-application\",\n18\nuid: z.string().optional(),\n19\nrateLimit: z.number().optional(),\n20\nmetadata: z.record(z.string(), z.string()).optional(),\n23\nrun: async (payload, io) => {\n27\nconst app = await svix.application.create({\n29\nrateLimit: payload.rateLimit,\n31\nmetadata: payload.metadata,\n36\n// Add metadata to improve how the task displays in the logs\n37\n{ name: \"Create application\", icon: \"svix\" }",
  "markdown": "2\n\nimport { Svix } from \"svix\";\n\n3\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n5\n\n// Create an access token at https://api.svix.com/docs#section/Introduction/Authentication\n\n6\n\n// https://dashboard.svix.com/api-access\n\n7\n\nconst svix \\= new Svix(process.env.SVIX\\_API\\_KEY!);\n\n9\n\n// Using official Svix sdk, https://github.com/svix/svix-webhooks/tree/main/javascript/\n\n11\n\n  id: \"create-svix-application\",\n\n12\n\n  name: \"Create Svix application\",\n\n14\n\n  trigger: eventTrigger({\n\n15\n\n    name: \"create-svix-application\",\n\n18\n\n      uid: z.string().optional(),\n\n19\n\n      rateLimit: z.number().optional(),\n\n20\n\n      metadata: z.record(z.string(), z.string()).optional(),\n\n23\n\n  run: async (payload, io) \\=> {\n\n27\n\n        const app \\= await svix.application.create({\n\n29\n\n          rateLimit: payload.rateLimit,\n\n31\n\n          metadata: payload.metadata,\n\n36\n\n      // Add metadata to improve how the task displays in the logs\n\n37\n\n      { name: \"Create application\", icon: \"svix\" }"
},
{
  "url": "https://trigger.dev/apis/svix/examples/svix-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/svix/examples/svix-http-endpoint",
    "loadedTime": "2024-03-16T13:48:52.332Z",
    "referrerUrl": "https://trigger.dev/apis/svix",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/svix/examples/svix-http-endpoint",
    "title": "Svix | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Svix | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/svix"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { Webhook } from \"svix\";\n2\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n4\n// Go to dashboard.svix.com > Operational Webhooks\n5\n// Create an endpoint with the Webhook URL\n6\n// Obtain the Signing Secret from the right\n7\n// To trigger the webhook, Testing > Send Event > Send Example\n8\nconst svix = client.defineHttpEndpoint({\n12\nverify: async (request) => {\n13\nconst body = await request.text();\n14\nconst svixID = request.headers.get(\"svix-id\");\n15\nconst svixTimestamp = request.headers.get(\"svix-timestamp\");\n16\nconst svixSignature = request.headers.get(\"svix-signature\");\n17\nif (!svixID || !svixTimestamp || !svixSignature) {\n18\nreturn { success: false, reason: \"Svix headers are missing\" };\n22\n\"svix-timestamp\": svixTimestamp,\n23\n\"svix-signature\": svixSignature,\n25\nconst wh = new Webhook(process.env.SVIX_SECRET_KEY!);\n27\n// Below throws an error if not matching, hence put in try/catch\n28\nwh.verify(body, headers);\n29\nreturn { success: true };\n35\n\"Svix verification failed due to \" + (e.message || e.toString()),\n46\ntrigger: svix.onRequest(),\n47\nrun: async (request, io, ctx) => {\n48\nconst body = await request.json();\n49\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { Webhook } from \"svix\";\n\n2\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n4\n\n// Go to dashboard.svix.com > Operational Webhooks\n\n5\n\n// Create an endpoint with the Webhook URL\n\n6\n\n// Obtain the Signing Secret from the right\n\n7\n\n// To trigger the webhook, Testing > Send Event > Send Example\n\n8\n\nconst svix \\= client.defineHttpEndpoint({\n\n12\n\n  verify: async (request) \\=> {\n\n13\n\n    const body \\= await request.text();\n\n14\n\n    const svixID \\= request.headers.get(\"svix-id\");\n\n15\n\n    const svixTimestamp \\= request.headers.get(\"svix-timestamp\");\n\n16\n\n    const svixSignature \\= request.headers.get(\"svix-signature\");\n\n17\n\n    if (!svixID || !svixTimestamp || !svixSignature) {\n\n18\n\n      return { success: false, reason: \"Svix headers are missing\" };\n\n22\n\n      \"svix-timestamp\": svixTimestamp,\n\n23\n\n      \"svix-signature\": svixSignature,\n\n25\n\n    const wh \\= new Webhook(process.env.SVIX\\_SECRET\\_KEY!);\n\n27\n\n      // Below throws an error if not matching, hence put in try/catch\n\n28\n\n      wh.verify(body, headers);\n\n29\n\n      return { success: true };\n\n35\n\n          \"Svix verification failed due to \" + (e.message || e.toString()),\n\n46\n\n  trigger: svix.onRequest(),\n\n47\n\n  run: async (request, io, ctx) \\=> {\n\n48\n\n    const body \\= await request.json();\n\n49\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/todoist/examples/todoist-add-new-project",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/todoist/examples/todoist-add-new-project",
    "loadedTime": "2024-03-16T13:49:00.769Z",
    "referrerUrl": "https://trigger.dev/apis/todoist",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/todoist/examples/todoist-add-new-project",
    "title": "Todoist | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Todoist | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/todoist"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { z } from \"zod\";\n3\nimport { TodoistApi } from \"@doist/todoist-api-typescript\";\n5\n// https://developer.todoist.com/rest/v2/?javascript#getting-started\n6\n// find your api reference https://todoist.com/help/articles/find-your-api-token-Jpzx9IIlB\n7\nconst todoistClientApi = new TodoistApi(process.env.TODOIST_API_TOKEN!);\n10\nid: \"todoist-add-new-project\",\n11\nname: \"Todoist add new project\",\n13\ntrigger: eventTrigger({\n14\nname: \"todoist.add.project\",\n16\nname: z.string(), // name of the project\n20\nrun: async (payload, io, ctx) => {\n21\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n22\nconst user = await io.runTask(\n25\nreturn await todoistClientApi.addProject({ name: payload.name });\n28\n// Add metadata to improve how the task displays in the logs\n29\n{ name: \"Add Todoist project\", icon: \"todoist\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { z } from \"zod\";\n\n3\n\nimport { TodoistApi } from \"@doist/todoist-api-typescript\";\n\n5\n\n// https://developer.todoist.com/rest/v2/?javascript#getting-started\n\n6\n\n// find your api reference https://todoist.com/help/articles/find-your-api-token-Jpzx9IIlB\n\n7\n\nconst todoistClientApi \\= new TodoistApi(process.env.TODOIST\\_API\\_TOKEN!);\n\n10\n\n  id: \"todoist-add-new-project\",\n\n11\n\n  name: \"Todoist add new project\",\n\n13\n\n  trigger: eventTrigger({\n\n14\n\n    name: \"todoist.add.project\",\n\n16\n\n      name: z.string(), // name of the project\n\n20\n\n  run: async (payload, io, ctx) \\=> {\n\n21\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n22\n\n    const user \\= await io.runTask(\n\n25\n\n        return await todoistClientApi.addProject({ name: payload.name });\n\n28\n\n      // Add metadata to improve how the task displays in the logs\n\n29\n\n      { name: \"Add Todoist project\", icon: \"todoist\" }"
},
{
  "url": "https://trigger.dev/apis/todoist/examples/todoist-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/todoist/examples/todoist-http-endpoint",
    "loadedTime": "2024-03-16T13:49:05.337Z",
    "referrerUrl": "https://trigger.dev/apis/todoist",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/todoist/examples/todoist-http-endpoint",
    "title": "Todoist | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Todoist | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/todoist"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { createHmac } from \"crypto\";\n2\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n4\n// Click on Profile > Settings > Integrations > Developer\n5\n// Click on \"Build Integrations\"\n6\n// Create a new app, enter the Webhook callback URL, and obtain the client_secret\n7\n// To test the app for yourself, self-authenticate via\n8\n// https://developer.todoist.com/sync/v9/#webhooks:~:text=is%20not%20available).-,Webhook,-Activation%20%26%20Personal%20Use\n9\n// Create a note in Todoist to trigger the webhook\n10\nconst todoist = client.defineHttpEndpoint({\n12\nsource: \"todoist.com\",\n14\nverify: async (request) => {\n15\nconst bodyText = await request.text();\n16\nconst hash = createHmac(\"sha256\", process.env.TODOIST_CLIENT_SECRET!)\n19\nconst reqHash = request.headers.get(\"x-todoist-hmac-sha256\");\n21\nreturn { success: false, reason: \"Failed sha256 verification.\" };\n22\nreturn { success: true };\n31\n// Create a trigger from the HTTP endpoint\n32\ntrigger: todoist.onRequest(),\n33\nrun: async (request, io, ctx) => {\n34\nconst body = await request.json();\n35\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { createHmac } from \"crypto\";\n\n2\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n4\n\n// Click on Profile > Settings > Integrations > Developer\n\n5\n\n// Click on \"Build Integrations\"\n\n6\n\n// Create a new app, enter the Webhook callback URL, and obtain the client\\_secret\n\n7\n\n// To test the app for yourself, self-authenticate via\n\n8\n\n// https://developer.todoist.com/sync/v9/#webhooks:~:text=is%20not%20available).-,Webhook,-Activation%20%26%20Personal%20Use\n\n9\n\n// Create a note in Todoist to trigger the webhook\n\n10\n\nconst todoist \\= client.defineHttpEndpoint({\n\n12\n\n  source: \"todoist.com\",\n\n14\n\n  verify: async (request) \\=> {\n\n15\n\n    const bodyText \\= await request.text();\n\n16\n\n    const hash \\= createHmac(\"sha256\", process.env.TODOIST\\_CLIENT\\_SECRET!)\n\n19\n\n    const reqHash \\= request.headers.get(\"x-todoist-hmac-sha256\");\n\n21\n\n      return { success: false, reason: \"Failed sha256 verification.\" };\n\n22\n\n    return { success: true };\n\n31\n\n  // Create a trigger from the HTTP endpoint\n\n32\n\n  trigger: todoist.onRequest(),\n\n33\n\n  run: async (request, io, ctx) \\=> {\n\n34\n\n    const body \\= await request.json();\n\n35\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/linear/examples/linear-ticket-on-github-pr",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/linear/examples/linear-ticket-on-github-pr",
    "loadedTime": "2024-03-16T13:49:05.823Z",
    "referrerUrl": "https://trigger.dev/apis/linear",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/linear/examples/linear-ticket-on-github-pr",
    "title": "Linear | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Linear | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/linear"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Github, events } from \"@trigger.dev/github\";\n3\nimport { Linear } from \"@trigger.dev/linear\";\n4\nimport { Slack } from \"@trigger.dev/slack\";\n6\nconst linear = new Linear({\n8\napiKey: process.env.LINEAR_API_KEY!,\n10\nconst slack = new Slack({ id: \"slack\" });\n12\nconst github = new Github({ id: \"github\" });\n15\nid: \"linear-create-issue-on-github-pr\",\n16\nname: \"Create a Linear issue when a pull request is opened on a GitHub repo\",\n18\ntrigger: github.triggers.repo({\n19\nevent: events.onPullRequest,\n20\nowner: \"<your-org-name>\",\n21\nrepo: \"<your-repo-name>\",\n28\nrun: async (payload, io, ctx) => {\n29\nconst pullRequestTitle = payload.pull_request.title;\n30\nconst pullRequestURL = payload.pull_request.issue_url;\n31\nconst pullRequestAuthorURL = payload.sender.html_url;\n32\nconst pullRequestDescription = payload.pull_request.body;\n34\nconst issue = await io.linear.createIssue(\"create issue\", {\n35\ntitle: pullRequestTitle,\n36\ndescription: pullRequestDescription,\n37\n// To get your Team id from within Linear, hit CMD+K and \"Copy model UUID\"\n38\nteamId: \"<your-team-uuid>\",\n41\nawait io.slack.postMessage(\"post message\", {\n42\n// Set the Slack channel ID (not name) in your environment variables\n43\nchannel: process.env.SLACK_CHANNEL_ID!,\n44\ntext: `⚡️ New pull request, \"${pullRequestTitle}\", ${pullRequestURL},\n45\n\\n created by 👨‍💻 \"${pullRequestAuthorURL}\"\n46\n\\n New issue has been created in Linear: ${issue?.url}.`,",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Github, events } from \"@trigger.dev/github\";\n\n3\n\nimport { Linear } from \"@trigger.dev/linear\";\n\n4\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n6\n\nconst linear \\= new Linear({\n\n8\n\n  apiKey: process.env.LINEAR\\_API\\_KEY!,\n\n10\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n12\n\nconst github \\= new Github({ id: \"github\" });\n\n15\n\n  id: \"linear-create-issue-on-github-pr\",\n\n16\n\n  name: \"Create a Linear issue when a pull request is opened on a GitHub repo\",\n\n18\n\n  trigger: github.triggers.repo({\n\n19\n\n    event: events.onPullRequest,\n\n20\n\n    owner: \"<your-org-name>\",\n\n21\n\n    repo: \"<your-repo-name>\",\n\n28\n\n  run: async (payload, io, ctx) \\=> {\n\n29\n\n    const pullRequestTitle \\= payload.pull\\_request.title;\n\n30\n\n    const pullRequestURL \\= payload.pull\\_request.issue\\_url;\n\n31\n\n    const pullRequestAuthorURL \\= payload.sender.html\\_url;\n\n32\n\n    const pullRequestDescription \\= payload.pull\\_request.body;\n\n34\n\n    const issue \\= await io.linear.createIssue(\"create issue\", {\n\n35\n\n      title: pullRequestTitle,\n\n36\n\n      description: pullRequestDescription,\n\n37\n\n      // To get your Team id from within Linear, hit CMD+K and \"Copy model UUID\"\n\n38\n\n      teamId: \"<your-team-uuid>\",\n\n41\n\n    await io.slack.postMessage(\"post message\", {\n\n42\n\n      // Set the Slack channel ID (not name) in your environment variables\n\n43\n\n      channel: process.env.SLACK\\_CHANNEL\\_ID!,\n\n44\n\n      text: \\`⚡️ New pull request, \"${pullRequestTitle}\", ${pullRequestURL},\n\n45\n\n            \\\\n created by 👨‍💻 \"${pullRequestAuthorURL}\"\n\n46\n\n            \\\\n New issue has been created in Linear: ${issue?.url}.\\`,"
},
{
  "url": "https://trigger.dev/apis/linear/examples/daily-linear-issues-slack-alert",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/linear/examples/daily-linear-issues-slack-alert",
    "loadedTime": "2024-03-16T13:49:14.524Z",
    "referrerUrl": "https://trigger.dev/apis/linear",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/linear/examples/daily-linear-issues-slack-alert",
    "title": "Linear | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Linear | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/linear"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, cronTrigger } from \"@trigger.dev/sdk\";\n2\nimport { Linear } from \"@trigger.dev/linear\";\n3\nimport { Slack } from \"@trigger.dev/slack\";\n4\nimport { get } from \"http\";\n6\nconst linear = new Linear({\n8\napiKey: process.env.LINEAR_API_KEY!,\n11\nconst slack = new Slack({ id: \"slack\" });\n14\nid: \"linear-issues-daily-slack-alert\",\n15\nname: \"Daily Slack alert for Linear issues\",\n21\ntrigger: cronTrigger({\n22\n// Note that the time is in UTC.\n23\n// Converted to cron schedule expression using https://crontab.guru/\n24\ncron: \"0 9 * * 1,2,3,4,5\",\n27\nrun: async (payload, io, ctx) => {\n28\nconst inProgressIssues = await io.linear.issues(\"get-in-progress-issues\", {\n29\n// Only get the first 20 issues\n34\n// To get your Team id from within Linear, hit CMD+K and \"Copy model UUID\"\n35\neq: \"<your-team-uuid>\",\n40\neq: \"<assignee-email-address>\",\n51\nawait io.slack.postMessage(\"post message\", {\n52\nchannel: process.env.SLACK_CHANNEL_ID!,\n53\n// Include text for notifications and blocks to get a rich Slack message in the channel\n54\ntext: `You have ${inProgressIssues.nodes.length} 'In Progress' issues in Linear!`,\n55\n// Create rich Slack messages with the Block Kit builder https://app.slack.com/block-kit-builder/\n56\nblocks: inProgressIssues.nodes.flatMap((issue) => [\n61\ntext: `⏳ *${issue.title}*`,\n70\nvalue: \"click_me_123\",\n72\naction_id: \"button-action\",",
  "markdown": "1\n\nimport { TriggerClient, cronTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Linear } from \"@trigger.dev/linear\";\n\n3\n\nimport { Slack } from \"@trigger.dev/slack\";\n\n4\n\nimport { get } from \"http\";\n\n6\n\nconst linear \\= new Linear({\n\n8\n\n  apiKey: process.env.LINEAR\\_API\\_KEY!,\n\n11\n\nconst slack \\= new Slack({ id: \"slack\" });\n\n14\n\n  id: \"linear-issues-daily-slack-alert\",\n\n15\n\n  name: \"Daily Slack alert for Linear issues\",\n\n21\n\n  trigger: cronTrigger({\n\n22\n\n    // Note that the time is in UTC.\n\n23\n\n    // Converted to cron schedule expression using https://crontab.guru/\n\n24\n\n    cron: \"0 9 \\* \\* 1,2,3,4,5\",\n\n27\n\n  run: async (payload, io, ctx) \\=> {\n\n28\n\n    const inProgressIssues \\= await io.linear.issues(\"get-in-progress-issues\", {\n\n29\n\n      //  Only get the first 20 issues\n\n34\n\n            // To get your Team id from within Linear, hit CMD+K and \"Copy model UUID\"\n\n35\n\n            eq: \"<your-team-uuid>\",\n\n40\n\n            eq: \"<assignee-email-address>\",\n\n51\n\n    await io.slack.postMessage(\"post message\", {\n\n52\n\n      channel: process.env.SLACK\\_CHANNEL\\_ID!,\n\n53\n\n      // Include text for notifications and blocks to get a rich Slack message in the channel\n\n54\n\n      text: \\`You have ${inProgressIssues.nodes.length} 'In Progress' issues in Linear!\\`,\n\n55\n\n      // Create rich Slack messages with the Block Kit builder https://app.slack.com/block-kit-builder/\n\n56\n\n      blocks: inProgressIssues.nodes.flatMap((issue) \\=> \\[\n\n61\n\n            text: \\`⏳ \\*${issue.title}\\*\\`,\n\n70\n\n            value: \"click\\_me\\_123\",\n\n72\n\n            action\\_id: \"button-action\","
},
{
  "url": "https://trigger.dev/apis/twilio/examples/twilio-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/twilio/examples/twilio-http-endpoint",
    "loadedTime": "2024-03-16T13:49:21.037Z",
    "referrerUrl": "https://trigger.dev/apis/twilio",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/twilio/examples/twilio-http-endpoint",
    "title": "Twilio | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Twilio | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/twilio"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { validateRequest } from \"twilio\";\n2\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n5\n// https://www.twilio.com/docs/usage/webhooks/sms-webhooks\n6\n// https://www.twilio.com/docs/usage/webhooks/webhooks-security\n9\n// Get trigger HTTP endpoints set to TWILIO_WEBHOOK_URL\n10\n// Goto twilio console > Messaging > Try it out > Send a WhatsApp message and connect sandbox\n11\n// From the reference code, copy the auth token and set to TWILIO_AUTH_TOKEN\n12\n// Goto Sandbox settings and configure `When a message comes in` to the trigger HTTP endpoint\n13\n// Send a message to the whatsapp sandbox number\n15\n// Create an HTTP Endpoint, with the twilio.com details\n16\nconst twilio = client.defineHttpEndpoint({\n20\nverify: async (request) => (validateRequest(\n21\nprocess.env.TWILIO_AUTH_TOKEN!,\n22\nrequest.headers.get(\"x-twilio-signature\")!,\n23\nprocess.env.TWILIO_WEBHOOK_URL!,\n24\nparse(await request.text())\n25\n) ? {success: true}: {success: false, message: \"Invalid signature\"}),\n29\nid: \"http-twilioDotcom\",\n30\nname: \"HTTP twilio.com\",\n33\n// Create a trigger from the HTTP endpoint\n34\ntrigger: twilio.onRequest(),\n35\nrun: async (request, io, ctx) => {\n36\nconst body = parse(await request.text());\n37\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { validateRequest } from \"twilio\";\n\n2\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n5\n\n// https://www.twilio.com/docs/usage/webhooks/sms-webhooks\n\n6\n\n// https://www.twilio.com/docs/usage/webhooks/webhooks-security\n\n9\n\n// Get trigger HTTP endpoints set to TWILIO\\_WEBHOOK\\_URL\n\n10\n\n// Goto twilio console > Messaging > Try it out > Send a WhatsApp message and connect sandbox\n\n11\n\n// From the reference code, copy the auth token and set to TWILIO\\_AUTH\\_TOKEN\n\n12\n\n// Goto Sandbox settings and configure \\`When a message comes in\\` to the trigger HTTP endpoint\n\n13\n\n// Send a message to the whatsapp sandbox number\n\n15\n\n// Create an HTTP Endpoint, with the twilio.com details\n\n16\n\nconst twilio \\= client.defineHttpEndpoint({\n\n20\n\n  verify: async (request) \\=> (validateRequest(\n\n21\n\n    process.env.TWILIO\\_AUTH\\_TOKEN!,\n\n22\n\n    request.headers.get(\"x-twilio-signature\")!,\n\n23\n\n    process.env.TWILIO\\_WEBHOOK\\_URL!,\n\n24\n\n    parse(await request.text())\n\n25\n\n  ) ? {success: true}: {success: false, message: \"Invalid signature\"}),\n\n29\n\n  id: \"http-twilioDotcom\",\n\n30\n\n  name: \"HTTP twilio.com\",\n\n33\n\n  // Create a trigger from the HTTP endpoint\n\n34\n\n  trigger: twilio.onRequest(),\n\n35\n\n  run: async (request, io, ctx) \\=> {\n\n36\n\n    const body \\= parse(await request.text());\n\n37\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/twilio/examples/twilio-send-sms-or-whatsapp-message",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/twilio/examples/twilio-send-sms-or-whatsapp-message",
    "loadedTime": "2024-03-16T13:49:27.236Z",
    "referrerUrl": "https://trigger.dev/apis/twilio",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/twilio/examples/twilio-send-sms-or-whatsapp-message",
    "title": "Twilio | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Twilio | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/twilio"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport twilio from \"twilio\";\n2\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n7\n// Initialize the Twilio instance\n8\n// Twilio SDK https://github.com/twilio/twilio-node\n9\n// Your AccountSID and Auth Token from console.twilio.com\n10\n// https://www.twilio.com/docs/sms/quickstart/node\n11\nconst twilioClient = twilio(\n12\nprocess.env.TWILIO_ACCOUNT_SID,\n13\nprocess.env.TWILIO_AUTH_TOKEN\n17\nid: \"twilio-send-message\",\n18\nname: \"Twilio send message\",\n20\ntrigger: eventTrigger({\n21\nname: \"twilio-send-message\",\n23\n// 'from' is Your Twilio phone number.\n24\n// Adding 'whatsapp:' before the number will send a WhatsApp message.\n25\n// https://console.twilio.com/us1/develop/sms/try-it-out/whatsapp-learn\n27\nto: z.string(), // The phone number you want to send the message.\n28\nbody: z.string(), // The message body\n31\nrun: async (payload, io, ctx) => {\n32\nconst { from, to, body } = payload;\n34\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n36\n\"Twilio send message\",\n38\nawait twilioClient.messages.create({ from, to, body });\n41\n// Add metadata to improve how the task displays in the logs\n42\n{ name: \"Twilio send message\", icon: \"twilio\" }",
  "markdown": "1\n\nimport twilio from \"twilio\";\n\n2\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n7\n\n// Initialize the Twilio instance\n\n8\n\n// Twilio SDK https://github.com/twilio/twilio-node\n\n9\n\n// Your AccountSID and Auth Token from console.twilio.com\n\n10\n\n// https://www.twilio.com/docs/sms/quickstart/node\n\n11\n\nconst twilioClient \\= twilio(\n\n12\n\n  process.env.TWILIO\\_ACCOUNT\\_SID,\n\n13\n\n  process.env.TWILIO\\_AUTH\\_TOKEN\n\n17\n\n  id: \"twilio-send-message\",\n\n18\n\n  name: \"Twilio send message\",\n\n20\n\n  trigger: eventTrigger({\n\n21\n\n    name: \"twilio-send-message\",\n\n23\n\n      // 'from' is Your Twilio phone number.\n\n24\n\n      // Adding 'whatsapp:' before the number will send a WhatsApp message.\n\n25\n\n      // https://console.twilio.com/us1/develop/sms/try-it-out/whatsapp-learn\n\n27\n\n      to: z.string(), // The phone number you want to send the message.\n\n28\n\n      body: z.string(), // The message body\n\n31\n\n  run: async (payload, io, ctx) \\=> {\n\n32\n\n    const { from, to, body } \\= payload;\n\n34\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n36\n\n      \"Twilio send message\",\n\n38\n\n        await twilioClient.messages.create({ from, to, body });\n\n41\n\n      // Add metadata to improve how the task displays in the logs\n\n42\n\n      { name: \"Twilio send message\", icon: \"twilio\" }"
},
{
  "url": "https://trigger.dev/apis/linear/examples/automatically-comment-and-like-linear-issues",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/linear/examples/automatically-comment-and-like-linear-issues",
    "loadedTime": "2024-03-16T13:49:28.343Z",
    "referrerUrl": "https://trigger.dev/apis/linear",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/linear/examples/automatically-comment-and-like-linear-issues",
    "title": "Linear | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Linear | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/linear"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { Linear } from \"@trigger.dev/linear\";\n4\nconst linear = new Linear({\n6\napiKey: process.env.LINEAR_API_KEY!,\n10\nid: \"linear-new-issue-reply\",\n11\nname: \"Linear: automatically reply to new issues\",\n16\ntrigger: linear.onIssueCreated(),\n17\nrun: async (payload, io, ctx) => {\n18\nconst newIssueId = payload.data.id;\n19\nawait io.linear.createComment(\"create-comment\", {\n21\nbody: \"Thanks for opening this issue!\",\n23\nawait io.linear.createReaction(\"create-reaction\", {",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { Linear } from \"@trigger.dev/linear\";\n\n4\n\nconst linear \\= new Linear({\n\n6\n\n  apiKey: process.env.LINEAR\\_API\\_KEY!,\n\n10\n\n  id: \"linear-new-issue-reply\",\n\n11\n\n  name: \"Linear: automatically reply to new issues\",\n\n16\n\n  trigger: linear.onIssueCreated(),\n\n17\n\n  run: async (payload, io, ctx) \\=> {\n\n18\n\n    const newIssueId \\= payload.data.id;\n\n19\n\n    await io.linear.createComment(\"create-comment\", {\n\n21\n\n      body: \"Thanks for opening this issue!\",\n\n23\n\n    await io.linear.createReaction(\"create-reaction\", {"
},
{
  "url": "https://trigger.dev/apis/mailgun/examples/mailgun-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/mailgun/examples/mailgun-http-endpoint",
    "loadedTime": "2024-03-16T13:49:29.222Z",
    "referrerUrl": "https://trigger.dev/apis/mailgun",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/mailgun/examples/mailgun-http-endpoint",
    "title": "Mailgun | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Mailgun | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/mailgun"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { createHmac } from \"crypto\";\n4\n// Go to your normal Mailgun account\n5\n// Create a private app in Sending > Webhooks\n6\n// With scope: Delivered\n7\n// And add your trigger webhooks url in target url\n8\n// Obtain the Webhook Key on the right of your window\n10\n// Create an HTTP Endpoint, with the Mailgun details\n11\nconst mailgun = client.defineHttpEndpoint({\n13\nsource: \"mailgun.com\",\n15\nverify: async (request) => {\n16\nconst body = await request.json();\n17\nconst { timestamp, token, signature } = body.signature;\n18\nconst mailgunKey = process.env.MAILGUN_WEBHOOK_SIGNING_KEY;\n20\nreturn { success: false, reason: \"Missing mailgun webhook signing key\" };\n21\nif (!timestamp || !token)\n24\nreason: \"Missing signature fields in request body\",\n26\nconst hash = createHmac(\"sha256\", mailgunKey)\n27\n.update(timestamp + token)\n29\nconst success = hash === signature;\n30\nif (success) return { success };\n31\nreturn { success: false, reason: \"Failed sha256 verification\" };\n35\n// Job that runs when the HTTP endpoint is called from Mailgun when an email is sent\n41\n// Create a trigger from the HTTP endpoint\n42\ntrigger: mailgun.onRequest(),\n43\nrun: async (request, io, ctx) => {\n44\nconst body = await request.json();\n45\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { createHmac } from \"crypto\";\n\n4\n\n// Go to your normal Mailgun account\n\n5\n\n// Create a private app in Sending > Webhooks\n\n6\n\n// With scope: Delivered\n\n7\n\n// And add your trigger webhooks url in target url\n\n8\n\n// Obtain the Webhook Key on the right of your window\n\n10\n\n// Create an HTTP Endpoint, with the Mailgun details\n\n11\n\nconst mailgun \\= client.defineHttpEndpoint({\n\n13\n\n  source: \"mailgun.com\",\n\n15\n\n  verify: async (request) \\=> {\n\n16\n\n    const body \\= await request.json();\n\n17\n\n    const { timestamp, token, signature } \\= body.signature;\n\n18\n\n    const mailgunKey \\= process.env.MAILGUN\\_WEBHOOK\\_SIGNING\\_KEY;\n\n20\n\n      return { success: false, reason: \"Missing mailgun webhook signing key\" };\n\n21\n\n    if (!timestamp || !token)\n\n24\n\n        reason: \"Missing signature fields in request body\",\n\n26\n\n    const hash \\= createHmac(\"sha256\", mailgunKey)\n\n27\n\n      .update(timestamp + token)\n\n29\n\n    const success \\= hash \\=== signature;\n\n30\n\n    if (success) return { success };\n\n31\n\n    return { success: false, reason: \"Failed sha256 verification\" };\n\n35\n\n// Job that runs when the HTTP endpoint is called from Mailgun when an email is sent\n\n41\n\n  // Create a trigger from the HTTP endpoint\n\n42\n\n  trigger: mailgun.onRequest(),\n\n43\n\n  run: async (request, io, ctx) \\=> {\n\n44\n\n    const body \\= await request.json();\n\n45\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/youtube/examples/youtube-search-video",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/youtube/examples/youtube-search-video",
    "loadedTime": "2024-03-16T13:49:40.419Z",
    "referrerUrl": "https://trigger.dev/apis/youtube",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/youtube/examples/youtube-search-video",
    "title": "YouTube | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "YouTube | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/youtube"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { google } from \"googleapis\";\n5\n// Get your API key here: https://console.developers.google.com/apis/credentials\n6\n// Make sure to enable the YouTube Data API v3 https://console.cloud.google.com/apis/library/youtube.googleapis.com\n7\n// SDK Docs: https://developers.google.com/youtube/v3/quickstart/nodejs\n8\n// Initialize the YouTube API with your API key\n9\nconst youtube = google.youtube({\n11\nauth: process.env.YOUTUBE_API_KEY,\n15\nid: \"youtube-api-search\",\n16\nname: \"YouTube API Search\",\n18\ntrigger: eventTrigger({\n19\nname: \"youtube-search\",\n22\nmaxResults: z.number().optional(),\n25\nrun: async (payload, io, ctx) => {\n26\nconst { q, maxResults } = payload;\n28\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n32\nconst searchResponse = await youtube.search.list({\n34\nmaxResults: maxResults || 10, // Default to 10 results if not provided\n39\n// Process the search results here\n40\nreturn JSON.parse(JSON.stringify(searchResponse.data));\n43\n// Add metadata to improve how the task displays in the logs\n44\n{ name: \"YouTube API Search\", icon: \"youtube\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { google } from \"googleapis\";\n\n5\n\n// Get your API key here: https://console.developers.google.com/apis/credentials\n\n6\n\n// Make sure to enable the YouTube Data API v3 https://console.cloud.google.com/apis/library/youtube.googleapis.com\n\n7\n\n// SDK Docs: https://developers.google.com/youtube/v3/quickstart/nodejs\n\n8\n\n// Initialize the YouTube API with your API key\n\n9\n\nconst youtube \\= google.youtube({\n\n11\n\n  auth: process.env.YOUTUBE\\_API\\_KEY,\n\n15\n\n  id: \"youtube-api-search\",\n\n16\n\n  name: \"YouTube API Search\",\n\n18\n\n  trigger: eventTrigger({\n\n19\n\n    name: \"youtube-search\",\n\n22\n\n      maxResults: z.number().optional(),\n\n25\n\n  run: async (payload, io, ctx) \\=> {\n\n26\n\n    const { q, maxResults } \\= payload;\n\n28\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n32\n\n        const searchResponse \\= await youtube.search.list({\n\n34\n\n          maxResults: maxResults || 10, // Default to 10 results if not provided\n\n39\n\n        // Process the search results here\n\n40\n\n        return JSON.parse(JSON.stringify(searchResponse.data));\n\n43\n\n      // Add metadata to improve how the task displays in the logs\n\n44\n\n      { name: \"YouTube API Search\", icon: \"youtube\" }"
},
{
  "url": "https://trigger.dev/apis/whatsapp/examples/whatsapp-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/whatsapp/examples/whatsapp-http-endpoint",
    "loadedTime": "2024-03-16T13:49:41.443Z",
    "referrerUrl": "https://trigger.dev/apis/whatsapp",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/whatsapp/examples/whatsapp-http-endpoint",
    "title": "WhatsApp | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "WhatsApp | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/whatsapp"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, verifyRequestSignature } from \"@trigger.dev/sdk\";\n4\nconst whatsApp = client.defineHttpEndpoint({\n6\nsource: \"whatsapp.com\",\n8\n// This is only needed for certain APIs like WhatsApp which don't setup the webhook until you pass the test\n10\n// Don't trigger runs if they match this filter\n11\nskipTriggeringRuns: true,\n15\n\"hub.mode\": [{ $startsWith: \"sub\" }],\n18\nhandler: async (request, verify) => {\n19\nconst searchParams = new URL(request.url).searchParams;\n21\nsearchParams.get(\"hub.verify_token\") !==\n22\nprocess.env.WHATSAPP_WEBHOOK_SECRET\n24\nreturn new Response(\"Unauthorized\", { status: 401 });\n26\nreturn new Response(searchParams.get(\"hub.challenge\") ?? \"OK\", {\n31\nverify: async (request) => {\n32\nreturn await verifyRequestSignature({\n34\nheaderName: \"x-hub-signature-256\",\n35\nsecret: process.env.WHATSAPP_APP_SECRET!,\n44\nname: \"HTTP WhatsApp\",\n47\ntrigger: whatsApp.onRequest(),\n48\nrun: async (request, io, ctx) => {\n49\nconst body = await request.json();\n50\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient, verifyRequestSignature } from \"@trigger.dev/sdk\";\n\n4\n\nconst whatsApp \\= client.defineHttpEndpoint({\n\n6\n\n  source: \"whatsapp.com\",\n\n8\n\n  // This is only needed for certain APIs like WhatsApp which don't setup the webhook until you pass the test\n\n10\n\n    // Don't trigger runs if they match this filter\n\n11\n\n    skipTriggeringRuns: true,\n\n15\n\n        \"hub.mode\": \\[{ $startsWith: \"sub\" }\\],\n\n18\n\n    handler: async (request, verify) \\=> {\n\n19\n\n      const searchParams \\= new URL(request.url).searchParams;\n\n21\n\n        searchParams.get(\"hub.verify\\_token\") !==\n\n22\n\n        process.env.WHATSAPP\\_WEBHOOK\\_SECRET\n\n24\n\n        return new Response(\"Unauthorized\", { status: 401 });\n\n26\n\n      return new Response(searchParams.get(\"hub.challenge\") ?? \"OK\", {\n\n31\n\n  verify: async (request) \\=> {\n\n32\n\n    return await verifyRequestSignature({\n\n34\n\n      headerName: \"x-hub-signature-256\",\n\n35\n\n      secret: process.env.WHATSAPP\\_APP\\_SECRET!,\n\n44\n\n  name: \"HTTP WhatsApp\",\n\n47\n\n  trigger: whatsApp.onRequest(),\n\n48\n\n  run: async (request, io, ctx) \\=> {\n\n49\n\n    const body \\= await request.json();\n\n50\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/whatsapp/examples/whatapp-send-message",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/whatsapp/examples/whatapp-send-message",
    "loadedTime": "2024-03-16T13:49:47.024Z",
    "referrerUrl": "https://trigger.dev/apis/whatsapp",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/whatsapp/examples/whatapp-send-message",
    "title": "WhatsApp | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "WhatsApp | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/whatsapp"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n4\n// You have to need Whatsapp Business API account\n5\n// Get started https://developers.facebook.com/docs/whatsapp/cloud-api/get-started\n6\n// For Permanent token you have to create system user https://business.facebook.com/settings/system-users\n7\n// User need to first send message then you can send message to user via API. Only hello_world message is allowed for first message.\n8\n// Learn more about cloud-api https://developers.facebook.com/docs/whatsapp/cloud-api/reference\n9\nconst endpointURL = `https://graph.facebook.com/v17.0/${process.env.WHATSAPP_PHONE_NUMBER_ID}/messages`;\n11\n// Create request options\n12\nconst requestOptions: RequestInit = {\n15\nAuthorization: `Bearer ${process.env.WHATSAPP_BEARER_TOKEN}`,\n16\n\"content-type\": \"application/json\",\n21\nid: \"whatsapp-send-messages\",\n22\nname: \"Whatsapp Send Messages\",\n24\ntrigger: eventTrigger({\n25\nname: \"whatsapp-send-messages\",\n31\nrun: async (payload, io, ctx) => {\n32\nconst { text, to } = payload;\n34\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n36\n\"Whatsapp Send Messages\",\n38\n// Make request using Fetch API\n39\nreturn await fetch(endpointURL, {\n41\nbody: JSON.stringify({\n42\nmessaging_product: \"whatsapp\",\n43\nrecipient_type: \"individual\",\n50\n}).then((response) => response.json());\n53\n// Add metadata to the task to improve the display in the logs\n54\n{ name: \"Whatsapp Send Messages\", icon: \"whatsapp\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n4\n\n// You have to need Whatsapp Business API account\n\n5\n\n// Get started https://developers.facebook.com/docs/whatsapp/cloud-api/get-started\n\n6\n\n// For Permanent token you have to create system user https://business.facebook.com/settings/system-users\n\n7\n\n// User need to first send message then you can send message to user via API. Only hello\\_world message is allowed for first message.\n\n8\n\n// Learn more about cloud-api https://developers.facebook.com/docs/whatsapp/cloud-api/reference\n\n9\n\nconst endpointURL \\= \\`https://graph.facebook.com/v17.0/${process.env.WHATSAPP\\_PHONE\\_NUMBER\\_ID}/messages\\`;\n\n11\n\n// Create request options\n\n12\n\nconst requestOptions: RequestInit \\= {\n\n15\n\n    Authorization: \\`Bearer ${process.env.WHATSAPP\\_BEARER\\_TOKEN}\\`,\n\n16\n\n    \"content-type\": \"application/json\",\n\n21\n\n  id: \"whatsapp-send-messages\",\n\n22\n\n  name: \"Whatsapp Send Messages\",\n\n24\n\n  trigger: eventTrigger({\n\n25\n\n    name: \"whatsapp-send-messages\",\n\n31\n\n  run: async (payload, io, ctx) \\=> {\n\n32\n\n    const { text, to } \\= payload;\n\n34\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n36\n\n      \"Whatsapp Send Messages\",\n\n38\n\n        // Make request using Fetch API\n\n39\n\n        return await fetch(endpointURL, {\n\n41\n\n          body: JSON.stringify({\n\n42\n\n            messaging\\_product: \"whatsapp\",\n\n43\n\n            recipient\\_type: \"individual\",\n\n50\n\n        }).then((response) \\=> response.json());\n\n53\n\n      // Add metadata to the task to improve the display in the logs\n\n54\n\n      { name: \"Whatsapp Send Messages\", icon: \"whatsapp\" }"
},
{
  "url": "https://trigger.dev/apis/mailgun/examples/send-email-with-mailgun",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/mailgun/examples/send-email-with-mailgun",
    "loadedTime": "2024-03-16T13:49:49.131Z",
    "referrerUrl": "https://trigger.dev/apis/mailgun",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/mailgun/examples/send-email-with-mailgun",
    "title": "Mailgun | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Mailgun | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/mailgun"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n2\nimport { z } from \"zod\";\n3\nconst formData = require(\"form-data\");\n4\nconst Mailgun = require(\"mailgun.js\");\n6\n// https://documentation.mailgun.com/en/latest/quickstart-sending.html#how-to-start-sending-emaild\n7\n// after login from https://app.mailgun.com/mg/dashboard -> setting you can get api, and private_api_key\n8\nconst mailgun = new Mailgun(formData);\n9\nconst mg = mailgun.client({\n10\nusername: process.env.MAILGUN_API_KEY_ID,\n11\nkey: process.env.MAILGUN_PRIVATE_API_KEY,\n15\nid: \"mailgun-send-email\",\n16\nname: \"Mailgun send email\",\n18\ntrigger: eventTrigger({\n19\nname: \"mailgun.send.email\",\n21\nsandboxDomain: z.string(), // for sandboxdomain -> https://app.mailgun.com/mg/dashboard\n22\nemailTo: z.string().email(),\n23\nsubject: z.string(), // email subject\n24\ntext: z.string(), // email content\n28\nrun: async (payload, io, ctx) => {\n29\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n30\nconst user = await io.runTask(\n33\nreturn await mg.messages.create(payload.sandboxDomain, {\n34\nfrom: `Mailgun Sandbox <postmaster@${payload.sandboxDomain}>`,\n35\nto: [payload.emailTo],\n36\nsubject: payload.subject,\n41\n// Add metadata to improve how the task displays in the logs\n42\n{ name: \"Send Email by Mailgun\", icon: \"mailgun\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n2\n\nimport { z } from \"zod\";\n\n3\n\nconst formData \\= require(\"form-data\");\n\n4\n\nconst Mailgun \\= require(\"mailgun.js\");\n\n6\n\n// https://documentation.mailgun.com/en/latest/quickstart-sending.html#how-to-start-sending-emaild\n\n7\n\n// after login from https://app.mailgun.com/mg/dashboard -> setting you can get api, and private\\_api\\_key\n\n8\n\nconst mailgun \\= new Mailgun(formData);\n\n9\n\nconst mg \\= mailgun.client({\n\n10\n\n  username: process.env.MAILGUN\\_API\\_KEY\\_ID,\n\n11\n\n  key: process.env.MAILGUN\\_PRIVATE\\_API\\_KEY,\n\n15\n\n  id: \"mailgun-send-email\",\n\n16\n\n  name: \"Mailgun send email\",\n\n18\n\n  trigger: eventTrigger({\n\n19\n\n    name: \"mailgun.send.email\",\n\n21\n\n      sandboxDomain: z.string(), // for sandboxdomain -> https://app.mailgun.com/mg/dashboard\n\n22\n\n      emailTo: z.string().email(),\n\n23\n\n      subject: z.string(), // email subject\n\n24\n\n      text: z.string(), // email content\n\n28\n\n  run: async (payload, io, ctx) \\=> {\n\n29\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n30\n\n    const user \\= await io.runTask(\n\n33\n\n        return await mg.messages.create(payload.sandboxDomain, {\n\n34\n\n          from: \\`Mailgun Sandbox <postmaster@${payload.sandboxDomain}\\>\\`,\n\n35\n\n          to: \\[payload.emailTo\\],\n\n36\n\n          subject: payload.subject,\n\n41\n\n      // Add metadata to improve how the task displays in the logs\n\n42\n\n      { name: \"Send Email by Mailgun\", icon: \"mailgun\" }"
},
{
  "url": "https://trigger.dev/apis/youtube/examples/youtube-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/youtube/examples/youtube-http-endpoint",
    "loadedTime": "2024-03-16T13:49:54.337Z",
    "referrerUrl": "https://trigger.dev/apis/youtube",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/youtube/examples/youtube-http-endpoint",
    "title": "YouTube | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "YouTube | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/youtube"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n2\nimport { createHmac } from \"crypto\";\n3\nimport { XMLParser } from \"fast-xml-parser\";\n5\n// Docs: https://developers.google.com/youtube/v3/guides/push_notifications\n6\n// Go to https://pubsubhubbub.appspot.com/subscribe and enter the following details:\n7\n// callback URL is endpoint URL\n8\n// Topic URL is https://www.youtube.com/xml/feeds/videos.xml?channel_id=CHANNEL_ID (replace CHANNEL_ID with your channel ID)\n9\n// Select Verify Type as Synchronous\n10\n// Select mode as subscribe\n11\n// For Hmac secret and Verify Token, enter the same value. This is the secret that will be used to verify the request.\n12\n// Get endpoint URL and Secret from the `trigger.dev` dashboard\n13\n// Set the YOUTUBE_SIGNING_SECRET (Secret) in the .env file.\n15\n// Create an HTTP Endpoint, with the YouTube details\n16\nexport const youtube = client.defineHttpEndpoint({\n19\nsource: \"youtube.com\",\n22\n// Don't trigger runs if they match this filter\n23\nskipTriggeringRuns: true,\n26\n\"hub.mode\": [{ $endsWith: \"subscribe\" }],\n29\nhandler: async (request, verify) => {\n30\nconst searchParams = new URL(request.url).searchParams;\n33\nsearchParams.get(\"hub.verify_token\") !==\n34\nprocess.env.YOUTUBE_SIGNING_SECRET\n36\nreturn new Response(\"Unauthorized\", { status: 401 });\n38\nreturn new Response(searchParams.get(\"hub.challenge\") ?? \"OK\", {\n43\nverify: async (request) => {\n44\nconst signature = request.headers.get(\"x-hub-signature\");\n47\nreturn { success: false, reason: \"Missing header\" };\n50\nconst secret = process.env.YOUTUBE_SIGNING_SECRET;\n53\nreturn { success: false, reason: \"Missing secret\" };\n56\nconst [algorithm, hash] = signature.split(\"=\");\n57\nconst body = await request.text();\n58\nconst digest = createHmac(algorithm, secret).update(body).digest(\"hex\");\n60\nif (hash !== digest) {\n61\nreturn { success: false, reason: \"Failed sha1 verification\" };\n64\nreturn { success: true };\n73\n// Create a trigger from the HTTP endpoint\n74\ntrigger: youtube.onRequest(),\n75\nrun: async (request, io, ctx) => {\n76\nconst body = await request.text();\n77\nconst parser = new XMLParser();\n78\nconst jObj = parser.parse(body);\n79\nawait io.logger.info(`Body`, jObj);",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n2\n\nimport { createHmac } from \"crypto\";\n\n3\n\nimport { XMLParser } from \"fast-xml-parser\";\n\n5\n\n// Docs: https://developers.google.com/youtube/v3/guides/push\\_notifications\n\n6\n\n// Go to https://pubsubhubbub.appspot.com/subscribe and enter the following details:\n\n7\n\n// callback URL is endpoint URL\n\n8\n\n// Topic URL is https://www.youtube.com/xml/feeds/videos.xml?channel\\_id=CHANNEL\\_ID (replace CHANNEL\\_ID with your channel ID)\n\n9\n\n// Select Verify Type as Synchronous\n\n10\n\n// Select mode as subscribe\n\n11\n\n// For Hmac secret and Verify Token, enter the same value. This is the secret that will be used to verify the request.\n\n12\n\n// Get endpoint URL and Secret from the \\`trigger.dev\\` dashboard\n\n13\n\n// Set the YOUTUBE\\_SIGNING\\_SECRET (Secret) in the .env file.\n\n15\n\n// Create an HTTP Endpoint, with the YouTube details\n\n16\n\nexport const youtube \\= client.defineHttpEndpoint({\n\n19\n\n  source: \"youtube.com\",\n\n22\n\n    // Don't trigger runs if they match this filter\n\n23\n\n    skipTriggeringRuns: true,\n\n26\n\n        \"hub.mode\": \\[{ $endsWith: \"subscribe\" }\\],\n\n29\n\n    handler: async (request, verify) \\=> {\n\n30\n\n      const searchParams \\= new URL(request.url).searchParams;\n\n33\n\n        searchParams.get(\"hub.verify\\_token\") !==\n\n34\n\n        process.env.YOUTUBE\\_SIGNING\\_SECRET\n\n36\n\n        return new Response(\"Unauthorized\", { status: 401 });\n\n38\n\n      return new Response(searchParams.get(\"hub.challenge\") ?? \"OK\", {\n\n43\n\n  verify: async (request) \\=> {\n\n44\n\n    const signature \\= request.headers.get(\"x-hub-signature\");\n\n47\n\n      return { success: false, reason: \"Missing header\" };\n\n50\n\n    const secret \\= process.env.YOUTUBE\\_SIGNING\\_SECRET;\n\n53\n\n      return { success: false, reason: \"Missing secret\" };\n\n56\n\n    const \\[algorithm, hash\\] \\= signature.split(\"=\");\n\n57\n\n    const body \\= await request.text();\n\n58\n\n    const digest \\= createHmac(algorithm, secret).update(body).digest(\"hex\");\n\n60\n\n    if (hash !== digest) {\n\n61\n\n      return { success: false, reason: \"Failed sha1 verification\" };\n\n64\n\n    return { success: true };\n\n73\n\n  // Create a trigger from the HTTP endpoint\n\n74\n\n  trigger: youtube.onRequest(),\n\n75\n\n  run: async (request, io, ctx) \\=> {\n\n76\n\n    const body \\= await request.text();\n\n77\n\n    const parser \\= new XMLParser();\n\n78\n\n    const jObj \\= parser.parse(body);\n\n79\n\n    await io.logger.info(\\`Body\\`, jObj);"
},
{
  "url": "https://trigger.dev/apis/zapier/examples/zapier-http-endpoint",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/zapier/examples/zapier-http-endpoint",
    "loadedTime": "2024-03-16T13:49:56.717Z",
    "referrerUrl": "https://trigger.dev/apis/zapier",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/zapier/examples/zapier-http-endpoint",
    "title": "Zapier | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Zapier | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/zapier"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n3\n// Create a workflow in Zapier\n4\n// Select Webhooks by Zapier\n6\n// By default, no auth is added, hence look for user-agent: Zapier\n7\n// Add basic auth by piping the username|password\n8\n// Now, look for the authorization header\n9\nconst zapier = client.defineHttpEndpoint({\n13\nverify: async (request) => {\n14\nconst secret = process.env.ZAPIER_TRIGGER_SECRET;\n18\nreason: \"The Zapier secret needs to be set in the environment.\",\n21\nif (secret !== request.headers.get(\"x-trigger-secret\")) {\n24\nreason: \"The secret does not match.\",\n27\nreturn { success: true };\n36\ntrigger: zapier.onRequest(),\n37\nrun: async (request, io, ctx) => {\n38\nconst body = await request.json();\n39\nawait io.logger.info(`Body`, body);",
  "markdown": "1\n\nimport { TriggerClient } from \"@trigger.dev/sdk\";\n\n3\n\n// Create a workflow in Zapier\n\n4\n\n// Select Webhooks by Zapier\n\n6\n\n// By default, no auth is added, hence look for user-agent: Zapier\n\n7\n\n// Add basic auth by piping the username|password\n\n8\n\n// Now, look for the authorization header\n\n9\n\nconst zapier \\= client.defineHttpEndpoint({\n\n13\n\n  verify: async (request) \\=> {\n\n14\n\n    const secret \\= process.env.ZAPIER\\_TRIGGER\\_SECRET;\n\n18\n\n        reason: \"The Zapier secret needs to be set in the environment.\",\n\n21\n\n    if (secret !== request.headers.get(\"x-trigger-secret\")) {\n\n24\n\n        reason: \"The secret does not match.\",\n\n27\n\n    return { success: true };\n\n36\n\n  trigger: zapier.onRequest(),\n\n37\n\n  run: async (request, io, ctx) \\=> {\n\n38\n\n    const body \\= await request.json();\n\n39\n\n    await io.logger.info(\\`Body\\`, body);"
},
{
  "url": "https://trigger.dev/apis/zapier/examples/zapier-store-name",
  "crawl": {
    "loadedUrl": "https://trigger.dev/apis/zapier/examples/zapier-store-name",
    "loadedTime": "2024-03-16T13:50:18.418Z",
    "referrerUrl": "https://trigger.dev/apis/zapier",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://trigger.dev/apis/zapier/examples/zapier-store-name",
    "title": "Zapier | Trigger.dev",
    "description": "Using Trigger.dev with your favorite APIs is easy. We have examples for all the most popular APIs.",
    "author": null,
    "keywords": null,
    "languageCode": "en",
    "openGraph": [
      {
        "property": "og:title",
        "content": "Zapier | Trigger.dev"
      },
      {
        "property": "og:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "twitter:image",
        "content": "https://trigger.dev/build/_assets/og-image-apis-7LA2MFFG.jpg"
      },
      {
        "property": "og:url",
        "content": "https://trigger.dev/apis/zapier"
      }
    ],
    "jsonLd": null
  },
  "screenshotUrl": null,
  "text": "1\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n4\n// Zapier webhook article https://help.zapier.com/hc/en-us/articles/8496288690317\n6\n// Create Zaps app and create a Google Sheet with first field name for save name\n7\n// 1. Set trigger to Webhooks by Zapier\n8\n// 1a. Event: catch hook; Trigger child key: name\n9\n// 1b. POST a request with JSON `[{\"name\": \"TriggerDotDev\"}]` to webhook URL then find records and select request and continue\n10\n// 2. Set action to Google Sheets\n11\n// 2a. Event: Create Spreadsheet Row\n12\n// 2b. Set your Google account\n13\n// 2c. Drive: My Google Drive; Spreadsheet: Set your Google sheet; Worksheet: Sheet1; Name: Catch Hook in Webhooks by Zapier name field; Test and publish\n14\n// 3. Copy webhook URL and add .env to ZAPIER_WEBHOOK\n17\nid: \"zapier-store-name\",\n18\nname: \"Zapier store name\",\n20\ntrigger: eventTrigger({\n21\nname: \"zapier-store-name\",\n23\nname: z.string().max(50), // Full name that you want to store\n26\nrun: async (payload, io, ctx) => {\n27\n// Wrap an SDK call in io.runTask so it's resumable and displays in logs\n31\n// Make request using Fetch API to Zapier webhook\n32\nreturn await fetch(process.env.ZAPIER_WEBHOOK!, {\n34\nbody: JSON.stringify([payload]),\n35\n}).then((response) => response.json());\n37\n// Add metadata to improve how the task displays in the logs\n38\n{ name: \"Zapier store name\", icon: \"zapier\" }",
  "markdown": "1\n\nimport { TriggerClient, eventTrigger } from \"@trigger.dev/sdk\";\n\n4\n\n// Zapier webhook article https://help.zapier.com/hc/en-us/articles/8496288690317\n\n6\n\n// Create Zaps app and create a Google Sheet with first field name for save name\n\n7\n\n// 1. Set trigger to Webhooks by Zapier\n\n8\n\n//  1a. Event: catch hook; Trigger child key: name\n\n9\n\n//  1b. POST a request with JSON \\`\\[{\"name\": \"TriggerDotDev\"}\\]\\` to webhook URL then find records and select request and continue\n\n10\n\n// 2. Set action to Google Sheets\n\n11\n\n//  2a. Event: Create Spreadsheet Row\n\n12\n\n//  2b. Set your Google account\n\n13\n\n//  2c. Drive: My Google Drive; Spreadsheet: Set your Google sheet; Worksheet: Sheet1; Name: Catch Hook in Webhooks by Zapier name field; Test and publish\n\n14\n\n// 3. Copy webhook URL and add .env to ZAPIER\\_WEBHOOK\n\n17\n\n  id: \"zapier-store-name\",\n\n18\n\n  name: \"Zapier store name\",\n\n20\n\n  trigger: eventTrigger({\n\n21\n\n    name: \"zapier-store-name\",\n\n23\n\n      name: z.string().max(50), // Full name that you want to store\n\n26\n\n  run: async (payload, io, ctx) \\=> {\n\n27\n\n    // Wrap an SDK call in io.runTask so it's resumable and displays in logs\n\n31\n\n        // Make request using Fetch API to Zapier webhook\n\n32\n\n        return await fetch(process.env.ZAPIER\\_WEBHOOK!, {\n\n34\n\n          body: JSON.stringify(\\[payload\\]),\n\n35\n\n        }).then((response) \\=> response.json());\n\n37\n\n      // Add metadata to improve how the task displays in the logs\n\n38\n\n      { name: \"Zapier store name\", icon: \"zapier\" }"
}]